var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiKeyDto.html",[0,0.162,1,2.004]],["body/classes/ApiKeyDto.html",[0,0.266,1,3.292,2,2.08,3,0.4,4,0.4,5,0.352,6,4.061,7,3.78,8,0.449,9,3.292,10,3.39,11,2.661,12,5.504,13,0.352,14,1.893,15,3.929,16,0.449,17,0.028,18,1.051,19,2.08,20,4.49,21,0.61,22,4.49,23,2.19,24,0.501,25,4.061,26,4.634,27,2.964,28,0.4,29,2.453,30,0.023,31,0.023]],["title/guards/ApiKeyGrpcGuard.html",[32,1.682,33,2.212]],["body/guards/ApiKeyGrpcGuard.html",[0,0.128,3,0.235,4,0.235,5,0.207,8,0.5,10,3.368,11,2.741,13,0.207,14,0.91,15,3.004,16,0.455,17,0.028,18,0.869,21,0.618,24,0.619,28,0.235,30,0.016,31,0.016,32,1.936,33,2.545,34,1.746,35,3.301,36,2.227,37,2.845,38,2.99,39,2.306,40,4.115,41,2.116,42,2.845,43,0.859,44,3.922,45,2.845,46,0.91,47,1.746,48,3.13,49,2.645,50,1.07,51,0.796,52,1.327,53,2.845,54,0.939,55,0.677,56,0.939,57,1.654,58,1.426,59,2.107,60,1.952,61,3.782,62,2.645,63,2.845,64,2.732,65,3.301,66,3.301,67,1.032,68,2.845,69,1.07,70,2.721,71,1.426,72,2.845,73,2.285,74,2.511,75,2.845,76,2.645,77,2.545,78,2.845,79,2.845,80,2.845,81,2.511,82,2.845,83,0.859,84,0.635,85,1.328,86,1.445,87,1.445,88,1.582,89,1.787,90,1.746,91,1.952,92,3.922,93,1.952,94,1.952,95,1.135,96,1.582,97,0.91,98,1.013,99,1.746,100,1.053,101,1.174,102,1.952,103,1.829,104,3.358,105,1.952,106,2.645,107,2.645,108,2.645,109,2.227,110,3.856,111,2.645,112,2.645,113,1.952,114,2.645]],["title/guards/ApiKeyHttpGuard.html",[32,1.682,115,2.472]],["body/guards/ApiKeyHttpGuard.html",[0,0.132,3,0.244,4,0.244,5,0.215,8,0.509,10,3.392,11,2.757,13,0.215,14,0.942,15,3.064,16,0.464,17,0.028,18,0.886,21,0.63,24,0.601,28,0.244,30,0.016,31,0.016,32,1.985,34,1.808,35,3.355,37,2.918,38,3.039,40,3.987,41,2.145,42,2.918,43,0.881,44,3.977,45,2.918,46,0.942,47,1.808,48,3.163,50,1.097,51,0.816,52,1.36,53,2.918,54,0.958,55,0.69,56,0.958,57,1.696,58,1.462,59,2.16,60,2.021,61,3.822,63,2.918,64,2.945,65,3.355,66,3.355,67,1.049,68,2.918,69,1.097,70,2.775,71,1.462,72,2.918,73,2.33,74,2.552,75,2.918,77,2.61,78,3.75,79,2.918,80,2.918,81,2.552,82,2.918,83,0.881,84,0.657,85,1.375,86,1.496,87,1.496,88,1.638,89,1.832,90,1.808,91,2.021,95,1.175,96,1.638,97,0.942,98,1.034,99,1.808,100,1.09,101,1.198,102,2.021,103,1.748,104,3.425,105,2.021,115,2.918,116,2.306,117,3.33,118,2.739,119,2.739,120,2.739,121,2.739,122,3.33,123,2.739,124,2.739]],["title/guards/ApiKeyTcpGuard.html",[32,1.682,125,2.212]],["body/guards/ApiKeyTcpGuard.html",[0,0.133,1,1.643,3,0.245,4,0.245,5,0.215,6,2.028,8,0.509,10,3.395,11,2.758,13,0.215,14,0.945,15,3.069,16,0.465,17,0.028,18,0.888,21,0.631,24,0.602,28,0.245,30,0.016,31,0.016,32,1.99,34,1.814,35,3.36,37,2.925,38,3.044,40,3.99,41,2.148,42,2.925,43,0.883,44,3.982,45,2.925,46,0.945,47,1.814,48,3.167,50,1.1,51,0.818,52,1.364,53,2.925,54,0.96,55,0.691,56,0.96,57,1.7,58,1.466,59,2.166,60,2.028,61,3.826,63,2.925,64,2.781,65,3.36,66,3.36,67,1.051,68,2.925,69,1.1,70,2.781,71,1.466,72,2.925,73,2.335,74,2.556,75,2.925,77,2.617,78,2.925,79,2.925,80,2.925,81,2.556,82,2.925,83,0.883,84,0.659,85,1.38,86,1.501,87,1.501,88,1.643,89,1.273,95,1.179,96,1.643,97,0.945,98,1.036,99,1.814,100,1.094,101,1.023,102,2.028,103,1.751,104,3.431,105,2.028,117,3.338,125,2.617,126,2.314,127,2.925,128,2.748,129,2.748,130,2.748,131,2.314,132,1.6,133,2.748,134,2.748,135,3.964]],["title/modules/AppModule.html",[136,1.83,137,2.212]],["body/modules/AppModule.html",[0,0.204,3,0.375,4,0.375,5,0.33,17,0.028,24,0.711,28,0.375,30,0.022,31,0.022,71,1.557,84,1.01,85,2.114,136,2.89,137,4.322,138,2.301,139,3.163,140,3.546,141,3.546,142,3.871,143,3.815,144,3.903,145,3.107,146,3.107,147,4.211,148,4.869,149,4.211,150,4.211,151,3.546,152,2.301,153,2.89,154,4.211,155,3.546,156,4.211,157,4.211,158,4.211,159,4.211,160,3.107]],["title/classes/CreateUserDto.html",[0,0.162,161,1.239]],["body/classes/CreateUserDto.html",[0,0.249,2,1.538,3,0.295,4,0.295,5,0.26,8,0.332,13,0.26,14,1.557,16,0.515,17,0.028,18,1.141,19,2.386,21,0.699,23,1.321,24,0.617,25,3.8,27,2.191,28,0.295,30,0.019,31,0.019,51,0.934,55,0.673,81,2.999,161,1.674,162,4.657,163,2.449,164,1.941,165,3.339,166,1.493,167,3.399,168,3.656,169,3.821,170,3.319,171,3.319,172,3.81,173,3.81,174,5.029,175,5.029,176,3.319,177,4.526,178,3.81,179,3.319,180,3.319,181,2.795,182,4.526,183,3.319,184,4.526,185,4.657,186,5.531,187,3.319,188,3.319,189,4.526,190,3.319,191,4.526,192,2.449,193,3.81,194,2.449,195,2.191,196,3.319,197,4.657,198,1.985,199,3.319,200,4.526,201,3.8,202,3.319,203,3.319,204,4.526,205,3.319,206,3.319,207,3.319,208,4.526,209,3.319]],["title/controllers/GrpcUsersService.html",[210,1.682,211,2.212]],["body/controllers/GrpcUsersService.html",[0,0.113,3,0.208,4,0.208,5,0.183,8,0.234,11,1.001,13,0.183,16,0.423,17,0.028,19,2.338,21,0.685,24,0.669,28,0.208,30,0.014,31,0.014,33,1.541,39,2.102,41,0.929,43,0.783,46,0.803,50,1.305,51,1.042,52,0.803,54,0.971,55,0.7,56,0.971,58,1.3,67,1.219,69,1.79,71,1.3,84,0.56,97,0.803,98,1.181,100,0.929,101,0.603,103,1.736,132,1.993,161,1.866,164,1.813,166,1.54,210,2.362,211,2.32,212,1.396,213,3.171,214,1.966,215,2.528,216,1.616,217,2.528,218,2.18,219,1.629,220,1.959,221,2.18,222,2.594,223,5.996,224,2.335,225,2.274,226,2.532,227,2.335,228,1.629,229,1.629,230,2.594,231,3.094,232,2.335,233,2.19,234,2.594,235,2.335,236,1.629,237,3.105,238,2.594,239,2.335,240,1.275,241,1.966,242,1.966,243,2.96,244,2.96,245,1.541,246,1.172,247,1.629,248,1.813,249,1.275,250,1.082,251,1.92,252,1.172,253,1.541,254,1.723,255,2.102,256,1.966,257,1.966,258,2.102,259,1.966,260,1.966,261,1.966,262,2.335,263,2.102,264,1.966,265,1.966,266,1.966,267,1.966,268,1.966,269,1.723,270,1.966,271,2.335,272,1.275,273,1.723,274,1.765,275,1.396,276,1.541,277,1.723,278,1.396,279,1.541,280,1.966,281,1.966,282,1.396,283,1.723,284,1.563,285,1.966,286,1.082,287,1.966,288,1.966]],["title/classes/GuidDto.html",[0,0.162,231,1.83]],["body/classes/GuidDto.html",[0,0.266,2,2.075,3,0.399,4,0.399,5,0.351,8,0.448,13,0.351,14,1.89,16,0.448,17,0.028,18,1.049,19,2.075,21,0.608,24,0.613,25,4.054,26,3.77,27,2.956,28,0.399,29,2.446,30,0.023,31,0.023,164,2.357,195,2.956,231,3.002,284,2.353,289,3.77,290,5.495,291,4.478,292,4.478,293,4.054,294,3.286,295,4.054,296,4.478,297,4.478]],["title/injectables/HashPipe.html",[83,0.746,263,2.004]],["body/injectables/HashPipe.html",[0,0.165,3,0.304,4,0.304,5,0.268,8,0.523,13,0.268,16,0.462,17,0.028,21,0.627,23,2.398,24,0.624,28,0.304,30,0.019,31,0.019,43,1.028,46,1.175,47,2.255,48,3.365,50,1.281,51,0.953,52,1.588,54,0.953,55,0.686,56,0.953,57,1.98,58,1.707,59,2.522,67,0.953,83,1.028,84,0.82,85,1.715,87,1.867,88,2.043,89,1.583,95,1.465,98,1.028,99,2.255,100,1.36,101,1.191,103,1.175,132,1.175,168,3.496,169,3.859,193,4.713,263,3.347,269,3.406,272,2.522,298,1.583,299,4.401,300,2.877,301,3.058,302,4.446,303,5.598,304,3.417,305,4.615,306,3.417,307,2.317,308,4.713,309,4.615,310,3.417,311,2.877,312,5.227,313,3.417,314,4.615,315,3.417,316,4.615,317,3.417]],["title/injectables/HttpExceptionInterceptor.html",[83,0.746,258,2.004]],["body/injectables/HttpExceptionInterceptor.html",[0,0.181,3,0.333,4,0.333,5,0.293,8,0.491,13,0.293,16,0.375,17,0.028,21,0.509,24,0.61,28,0.333,30,0.02,31,0.02,40,3.833,43,1.093,51,0.773,54,0.773,55,0.557,56,0.773,61,3.833,65,3.239,66,3.239,67,1.013,70,3.605,83,1.093,84,0.899,86,2.047,95,1.607,98,1.093,103,1.289,109,3.154,245,2.473,258,2.935,298,1.736,318,4.132,319,3.154,320,4.907,321,4.907,322,5.807,323,6.028,324,5.807,325,4.907,326,5.208,327,5.807,328,3.747,329,4.907,330,4.907,331,4.907,332,4.907,333,4.907,334,3.747,335,3.747,336,3.747,337,2.935,338,3.621,339,3.747]],["title/interfaces/IGrpcUsersService.html",[340,1.239,341,2.472]],["body/interfaces/IGrpcUsersService.html",[3,0.214,4,0.214,5,0.188,8,0.536,10,3.247,11,2.549,13,0.188,16,0.511,17,0.028,21,0.693,24,0.569,28,0.214,30,0.015,31,0.015,39,3.414,43,0.799,50,1.323,51,0.741,54,1.054,55,0.759,56,1.054,58,1.327,64,3.247,67,1.227,69,1.649,70,3.608,86,1.311,92,5.032,93,1.771,94,1.771,97,1.641,98,1.324,132,2.008,161,1.888,164,1.029,166,1.538,216,1.149,218,1.663,219,1.663,220,1.663,221,2.21,222,2.648,225,2.298,226,2.549,228,1.663,229,1.663,230,2.648,231,3.119,233,2.21,234,2.648,236,1.663,237,3.149,238,2.648,246,1.205,247,1.663,248,1.844,249,1.311,254,1.771,278,1.435,279,1.584,284,1.59,286,1.112,340,1.59,341,2.648,342,1.311,343,3.537,344,2.021,345,2.4,346,5.944,347,3.022,348,2.4,349,2.4,350,2.4,351,2.4]],["title/interfaces/ILoggingService.html",[340,1.239,352,2.004]],["body/interfaces/ILoggingService.html",[3,0.381,4,0.381,5,0.335,8,0.534,9,3.194,13,0.335,16,0.428,17,0.028,18,1.223,21,0.581,28,0.475,30,0.022,31,0.022,43,1.19,54,0.883,55,0.636,56,0.883,67,0.883,97,1.838,98,1.19,101,1.104,337,3.83,340,1.582,342,2.337,352,3.194,353,3.156,354,3.941,355,4.498,356,4.498,357,5.392,358,4.278,359,4.498,360,5.136,361,2.824,362,3.941,363,3.194]],["title/interfaces/ISecretManagerService.html",[340,1.239,364,2.004]],["body/interfaces/ISecretManagerService.html",[3,0.405,4,0.405,5,0.357,8,0.456,13,0.357,17,0.028,18,1.06,21,0.618,28,0.494,30,0.023,31,0.023,43,1.236,57,2.381,67,0.94,69,1.54,101,1.175,340,1.684,342,2.487,364,3.32,365,3.32,366,3.359,367,3.664,368,4.674,369,3.664,370,3.664,371,4.6,372,4.553,373,3.033,374,4.674,375,3.32]],["title/interfaces/IUsersDatabaseService.html",[340,1.239,376,2.004]],["body/interfaces/IUsersDatabaseService.html",[3,0.235,4,0.235,5,0.207,8,0.532,13,0.207,16,0.5,17,0.028,18,1.143,21,0.722,24,0.295,28,0.343,30,0.016,31,0.016,43,0.859,50,1.387,51,0.796,54,1.032,55,0.744,56,1.032,67,1.256,69,1.819,71,1.849,73,2.511,74,3.054,81,2.786,98,1.184,101,0.683,132,1.909,166,1.629,216,1.601,218,2.317,219,1.787,220,1.787,221,2.317,225,2.609,226,2.609,228,1.787,229,1.787,233,2.337,236,1.787,250,1.226,284,2.25,286,2.317,307,1.936,340,0.978,342,1.445,343,3.663,376,2.306,377,1.952,378,4.095,379,3.247,380,2.645,381,3.922,382,2.645,383,2.545,384,2.306,385,2.645,386,2.306,387,2.645,388,2.845,389,2.306,390,2.645,391,2.845,392,1.952,393,2.227,394,1.952,395,2.306]],["title/interfaces/IUsersService.html",[251,1.83,340,1.239]],["body/interfaces/IUsersService.html",[3,0.239,4,0.239,5,0.211,8,0.535,13,0.211,16,0.504,17,0.028,18,1.148,21,0.727,24,0.512,28,0.347,30,0.016,31,0.016,38,1.608,43,0.869,50,1.398,51,1.04,54,1.04,55,0.796,56,1.04,67,1.218,69,1.789,97,1.342,98,1.192,101,0.694,132,1.841,161,2.064,166,1.614,215,2.334,216,1.614,218,2.335,219,1.808,220,1.808,221,2.479,225,2.394,226,2.394,228,2.335,229,1.808,233,2.43,236,1.808,246,1.35,247,1.808,248,2.53,249,1.469,250,1.246,251,2.132,252,1.959,275,2.334,284,2.181,286,1.808,301,2.509,307,2.53,340,0.994,342,1.469,384,2.334,386,2.334,389,2.334,392,1.984,394,1.984,396,1.984,397,3.286,398,2.879,399,2.689,400,2.689,401,2.689,402,2.689,403,2.689,404,2.264,405,4.505,406,1.984,407,4.505,408,1.984,409,3.867,410,2.264]],["title/injectables/LoggingService.html",[83,0.746,411,2.004]],["body/injectables/LoggingService.html",[0,0.2,3,0.368,4,0.368,5,0.324,8,0.523,9,3.128,13,0.324,16,0.414,17,0.028,18,1.212,21,0.562,24,0.583,28,0.368,29,2.26,30,0.021,31,0.021,43,1.165,54,0.854,55,0.615,56,0.854,67,0.854,83,1.165,84,0.992,95,1.774,97,1.799,98,1.165,298,1.917,337,3.797,352,3.128,354,3.859,355,4.404,356,4.404,357,5.346,359,4.404,360,5.075,361,2.731,362,3.859,411,3.128,412,3.483,413,4.137,414,3.052,415,4.137,416,4.137]],["title/injectables/MongodbConfigService.html",[83,0.746,153,1.83]],["body/injectables/MongodbConfigService.html",[0,0.17,3,0.312,4,0.312,5,0.275,8,0.47,13,0.275,16,0.351,17,0.028,18,0.669,21,0.638,24,0.59,28,0.312,30,0.019,31,0.019,41,1.395,43,1.046,46,1.615,50,1.569,51,1.093,52,1.615,54,0.723,55,0.521,56,0.723,57,2.014,67,0.969,69,1.569,83,1.046,84,0.841,95,1.503,98,0.781,100,1.395,101,0.905,103,1.206,152,1.915,153,3.09,165,3.464,225,2.014,226,2.014,240,1.915,298,1.624,364,3.382,367,3.099,369,3.495,370,3.099,371,2.586,373,3.09,375,2.096,417,4.458,418,2.951,419,5.656,420,5.897,421,5.656,422,5.295,423,5.656,424,3.505,425,3.505,426,3.166,427,4.695,428,3.505,429,5.295,430,2.586,431,3.505,432,3.505,433,3.505,434,3.505,435,3.505,436,3.505,437,3.505,438,3.505,439,3.505,440,3.505]],["title/injectables/SecretManagerService.html",[83,0.746,426,2.004]],["body/injectables/SecretManagerService.html",[0,0.125,3,0.23,4,0.23,5,0.202,8,0.449,13,0.202,14,1.302,16,0.449,17,0.028,18,1.085,21,0.671,23,1.506,24,0.613,28,0.23,30,0.016,31,0.016,41,2.32,43,0.843,46,1.302,48,3.185,51,0.926,52,1.302,54,0.781,55,0.818,56,0.781,57,2.359,58,1.4,59,2.068,67,1.02,69,1.371,74,2.48,81,2.48,83,0.843,84,0.619,85,1.295,87,1.409,88,2.263,89,1.753,95,1.106,98,0.999,100,1.026,101,1.157,103,1.699,178,2.171,217,3.289,240,1.409,272,2.068,282,1.542,294,3.146,298,1.195,307,2.48,337,2.263,352,2.954,354,2.792,363,1.542,364,2.263,365,3.146,367,3.752,368,4.159,369,4.254,370,3.752,371,3.645,373,2.699,374,4.159,411,2.681,414,1.903,426,2.954,430,1.903,441,1.903,442,5.261,443,4.484,444,2.578,445,2.578,446,2.578,447,3.785,448,2.578,449,2.578,450,4.94,451,4.484,452,4.94,453,2.578,454,3.186,455,2.171,456,2.171,457,2.578,458,2.171,459,2.171,460,2.171,461,2.578,462,2.578,463,3.785,464,2.578,465,2.578,466,3.785,467,2.578,468,2.578,469,2.578,470,2.171,471,2.578,472,2.578,473,2.171,474,2.171,475,2.578,476,2.578]],["title/modules/ServicesModule.html",[136,1.83,142,2.004]],["body/modules/ServicesModule.html",[0,0.2,3,0.368,4,0.368,5,0.324,17,0.028,24,0.708,28,0.368,30,0.021,31,0.021,84,0.992,136,2.857,138,2.26,139,3.128,142,3.856,144,3.859,145,3.052,146,3.052,153,3.665,155,3.483,160,3.859,363,3.43,369,3.453,373,2.26,375,3.43,411,3.128,414,3.052,426,3.128,430,3.052,477,3.483,478,3.483,479,3.483,480,4.137,481,4.404,482,5.23,483,4.137,484,4.137,485,4.404]],["title/classes/UpdateUserDto.html",[0,0.162,248,1.437]],["body/classes/UpdateUserDto.html",[0,0.233,2,2.234,3,0.429,4,0.429,5,0.378,8,0.482,17,0.028,24,0.641,28,0.429,30,0.024,31,0.024,50,1.338,161,1.783,163,3.558,164,2.465,166,1.379,198,2.884,247,2.234,248,2.465,486,4.06,487,5.747,488,4.822,489,4.822,490,4.822]],["title/classes/User.html",[0,0.162,166,0.804]],["body/classes/User.html",[0,0.164,2,1.57,3,0.302,4,0.302,5,0.265,8,0.339,9,2.745,13,0.265,14,1.579,16,0.601,17,0.028,18,1.194,19,2.585,21,0.758,23,2.22,24,0.512,28,0.463,30,0.019,31,0.019,55,0.682,71,2.409,101,0.875,152,1.851,166,1.551,167,3.436,168,3.486,169,3.848,216,1.786,233,1.826,284,1.925,373,1.851,491,2.237,492,4.301,493,5.578,494,4.697,495,3.388,496,3.386,497,3.388,498,4.697,499,3.388,500,3.864,501,3.388,502,5.83,503,3.388,504,3.84,505,2.5,506,2.5,507,5.578,508,2.237,509,2.853]],["title/classes/User-1.html",[0,0.136,113,2.071,166,0.673]],["body/classes/User-1.html",[0,0.202,2,1.368,3,0.263,4,0.263,5,0.231,8,0.576,9,2.495,13,0.231,14,1.435,16,0.555,17,0.028,18,1.154,19,2.437,21,0.753,23,2.093,24,0.619,28,0.263,30,0.017,31,0.017,46,1.016,51,0.861,52,1.435,54,0.609,55,0.825,56,0.609,98,0.657,101,0.762,132,1.809,161,1.945,166,1.607,167,3.194,168,3.318,169,3.662,172,3.513,173,3.513,181,3.513,194,2.178,197,4.074,198,1.765,201,3.079,233,2.093,246,1.482,247,1.368,272,2.279,284,1.789,293,2.178,301,2.279,361,1.949,494,4.428,496,3.88,498,4.428,500,3.513,510,2.486,511,4.172,512,4.172,513,4.849,514,2.952,515,4.172,516,2.952,517,5.548,518,2.952,519,4.172,520,4.172,521,4.172,522,4.172,523,4.172,524,2.952,525,2.952,526,4.172,527,2.178,528,2.952,529,2.952,530,2.952,531,2.952,532,2.952,533,2.952,534,2.952,535,2.952]],["title/classes/UserListDto.html",[0,0.162,255,2.004]],["body/classes/UserListDto.html",[0,0.221,2,2.121,3,0.407,4,0.407,5,0.359,8,0.458,13,0.359,14,1.916,16,0.458,17,0.028,21,0.622,24,0.511,28,0.407,29,2.501,30,0.023,31,0.023,58,2.06,164,2.389,166,1.536,216,2.05,250,2.121,255,3.331,383,3.677,536,4.69,537,3.855,538,5.57,539,4.578,540,5.57]],["title/controllers/UsersController.html",[210,1.682,541,2.212]],["body/controllers/UsersController.html",[0,0.073,3,0.134,4,0.134,5,0.118,8,0.666,13,0.118,16,0.519,17,0.028,18,0.962,19,1.892,21,0.554,24,0.518,28,0.134,30,0.01,31,0.01,41,0.601,43,0.555,46,0.519,50,1.219,51,1.071,52,0.519,54,0.762,55,0.691,56,0.762,57,2.225,58,0.921,64,2.654,67,1.071,69,1.664,77,1.644,84,0.362,89,0.7,90,0.997,91,1.114,97,0.519,98,1.035,100,0.601,103,1.404,132,1.869,161,1.719,164,1.069,166,1.59,167,2.436,168,2.207,198,0.903,201,3.242,210,1.596,212,0.903,213,2.628,215,1.902,216,1.612,218,1.71,219,1.473,220,1.473,221,2.154,225,1.885,226,2.225,228,1.154,229,1.154,233,2.421,236,1.892,237,2.436,240,0.825,246,0.758,247,1.154,248,2.16,249,0.825,250,0.7,251,1.361,252,0.758,253,0.997,272,0.825,273,1.114,274,1.251,275,0.903,276,0.997,277,1.114,278,1.49,279,1.644,283,1.114,284,2.108,286,1.892,294,1.902,295,2.346,301,2.654,307,1.852,381,1.838,383,1.644,384,0.903,386,0.903,388,1.114,389,0.903,391,1.838,398,1.114,408,2.722,541,1.644,542,1.271,543,1.51,544,1.51,545,3.69,546,2.491,547,2.491,548,5.187,549,3.69,550,4.858,551,3.69,552,3.69,553,1.51,554,1.51,555,1.51,556,4.858,557,2.491,558,1.51,559,4.394,560,1.51,561,1.51,562,4.394,563,3.18,564,4.394,565,4.394,566,4.394,567,4.394,568,4.394,569,4.648,570,2.491,571,4.394,572,1.51,573,1.51,574,1.51,575,1.51,576,1.51,577,1.51,578,1.51,579,1.51,580,2.491,581,2.491,582,1.51,583,3.69,584,1.51,585,4.394,586,3.69,587,5.998,588,1.51,589,1.51,590,1.51,591,1.51,592,5.949,593,3.69,594,1.51,595,1.51,596,1.51,597,3.18,598,1.51,599,1.51,600,1.51,601,1.51,602,1.51]],["title/injectables/UsersDatabaseService.html",[83,0.746,603,2.212]],["body/injectables/UsersDatabaseService.html",[0,0.098,3,0.18,4,0.18,5,0.158,8,0.501,13,0.158,16,0.473,17,0.028,18,1.061,21,0.68,24,0.559,28,0.18,30,0.013,31,0.013,41,0.805,43,0.701,46,1.083,50,1.39,51,1.147,52,1.083,54,0.976,55,0.703,56,0.976,67,1.173,69,1.752,71,1.614,73,2.191,74,2.852,81,2.515,83,0.701,84,0.485,95,0.867,98,1.116,101,1.221,103,1.723,113,2.323,132,1.723,152,1.105,166,1.588,213,3.128,216,1.604,217,3.641,218,2.022,219,1.459,220,1.459,221,2.022,225,2.437,226,2.521,228,1.459,229,1.459,233,2.152,236,1.459,250,0.937,276,2.078,282,2.828,284,2.203,286,2.022,298,0.937,307,1.581,338,2.853,376,1.883,378,3.991,379,2.651,381,3.49,383,2.078,384,1.883,386,1.883,388,2.323,389,1.883,391,2.323,406,2.323,470,2.651,473,2.651,474,3.675,504,2.853,505,1.492,506,1.492,513,1.702,527,1.492,603,2.881,604,1.702,605,2.022,606,5.009,607,2.022,608,3.867,609,4.364,610,2.022,611,2.022,612,2.022,613,2.022,614,2.022,615,2.022,616,1.492,617,1.492,618,2.022,619,2.022,620,2.022,621,3.867,622,3.148,623,3.148,624,3.148,625,3.148,626,2.022,627,2.022,628,2.022,629,2.022,630,3.148,631,2.022,632,2.022,633,3.148,634,2.022,635,2.022,636,2.022]],["title/modules/UsersModule.html",[136,1.83,143,2.004]],["body/modules/UsersModule.html",[0,0.195,3,0.359,4,0.359,5,0.316,17,0.028,24,0.737,28,0.359,30,0.021,31,0.021,55,0.6,84,0.968,136,2.812,138,2.204,143,3.078,148,3.397,151,3.397,152,2.204,160,3.798,166,0.968,211,3.742,212,3.078,216,1.912,252,2.584,253,2.663,274,2.584,395,3.078,481,3.397,485,4.334,492,2.977,508,3.398,527,2.977,541,3.742,603,3.398,616,2.977,617,2.977,637,4.034,638,3.742,639,4.034,640,4.034,641,4.034,642,4.034,643,4.034,644,4.034,645,4.034]],["title/injectables/UsersService.html",[83,0.746,274,1.682]],["body/injectables/UsersService.html",[0,0.104,3,0.191,4,0.191,5,0.168,8,0.513,13,0.168,16,0.486,17,0.028,18,1.079,21,0.696,23,1.791,24,0.542,28,0.191,30,0.013,31,0.013,38,1.281,41,0.852,43,0.733,46,1.132,50,1.248,51,1.23,52,1.132,54,1.002,55,0.722,56,1.002,67,1.138,69,1.723,71,0.792,73,1.652,83,0.733,84,0.514,97,1.548,98,1.142,100,0.852,101,1.323,103,1.379,132,1.837,161,1.896,166,1.583,215,1.968,216,1.441,217,3.563,218,2.085,219,1.525,220,1.525,221,2.25,225,2.199,226,2.664,228,2.085,229,1.525,233,2.297,236,1.525,240,1.17,246,1.075,247,1.525,248,2.364,249,1.17,250,0.992,274,2.259,275,1.968,282,2.691,284,2.038,286,1.525,298,0.992,301,2.19,307,2.259,338,3.583,376,2.691,378,2.429,384,1.968,386,1.968,389,1.968,395,1.281,397,2.771,398,2.429,405,4.089,406,2.958,407,4.089,408,1.58,409,4.496,410,3.376,454,2.771,616,1.58,617,1.58,646,1.803,647,2.141,648,2.141,649,3.291,650,4.009,651,2.141,652,2.141,653,2.141,654,2.141,655,2.141,656,2.141,657,2.141,658,2.141,659,2.141,660,2.141,661,4.009,662,2.141,663,2.141,664,2.141,665,2.141]],["title/controllers/UsersTcpController.html",[210,1.682,638,2.212]],["body/controllers/UsersTcpController.html",[0,0.107,1,3.327,3,0.196,4,0.196,5,0.173,8,0.221,11,0.946,13,0.173,16,0.221,17,0.028,19,2.28,21,0.668,24,0.669,28,0.196,30,0.014,31,0.014,41,0.878,43,0.75,46,0.759,50,1.439,51,1.016,52,0.759,54,1.016,55,0.732,56,1.016,58,1.245,67,1.201,69,1.775,71,1.245,84,0.529,97,0.759,98,1.155,100,0.878,101,0.569,103,1.693,125,1.456,127,2.484,131,1.857,132,2.001,161,1.51,164,1.751,166,1.527,210,2.294,212,1.319,213,3.102,215,2.442,216,1.576,217,2.442,218,2.117,219,2.117,220,2.28,221,2.403,222,2.484,225,2.225,226,2.495,228,1.56,229,1.56,230,2.484,231,2.496,233,2.147,234,2.484,236,1.56,237,3.016,238,2.484,240,1.205,241,1.857,242,1.857,243,2.834,244,2.834,245,1.456,246,1.107,247,1.56,248,1.751,249,1.205,250,1.022,251,1.839,252,1.107,253,1.456,254,1.627,255,2.013,256,1.857,257,1.857,258,2.013,259,1.857,260,1.857,261,1.857,263,2.013,264,1.857,265,1.857,266,1.857,267,1.857,268,1.857,269,1.627,270,1.857,272,1.205,273,1.627,274,1.69,275,1.319,276,1.456,277,1.627,278,1.319,279,1.456,280,1.857,281,1.857,282,1.319,283,1.627,284,1.51,285,1.857,286,1.022,287,1.857,288,1.857,326,1.857,347,2.834,638,2.222,666,1.857,667,4.921,668,2.205,669,2.205,670,2.205,671,2.205,672,2.205,673,5.187,674,2.205,675,2.205,676,2.205,677,4.921,678,2.205,679,2.205,680,2.205,681,2.205,682,2.205,683,2.205,684,2.205]],["title/coverage.html",[685,3.835]],["body/coverage.html",[0,0.284,1,1.707,5,0.224,6,2.106,7,2.403,11,2.037,16,0.286,17,0.028,30,0.017,31,0.017,32,2.384,33,1.884,35,3.135,36,2.403,39,1.707,51,0.589,83,1.305,115,2.106,116,2.403,125,1.884,126,2.403,153,1.559,161,1.055,162,2.403,163,3.005,166,0.977,195,1.884,210,2.384,211,1.884,213,3.097,214,2.403,231,1.559,248,1.224,251,1.559,252,1.433,255,1.707,258,1.707,263,1.707,274,1.433,289,2.403,299,2.403,300,2.403,318,2.403,319,2.403,340,2.025,341,2.106,343,3.135,344,2.403,352,1.707,353,3.005,363,1.707,364,1.707,365,2.84,366,3.005,375,1.707,376,1.707,377,3.005,395,1.707,396,3.005,411,1.707,412,2.403,417,2.403,418,2.403,426,1.707,441,2.106,486,2.403,491,2.689,508,1.884,510,2.403,536,2.403,537,2.403,541,1.884,542,2.403,603,1.884,604,2.403,638,1.884,646,2.403,666,2.403,685,2.403,686,2.854,687,2.854,688,2.854,689,2.403,690,3.429,691,4.935,692,2.403,693,6.842,694,6.426,695,2.403,696,2.403,697,5.477,698,5.862,699,2.403,700,2.403,701,4.073,702,5.695,703,2.854,704,5.862,705,4.073,706,2.403,707,4.361,708,4.361,709,2.403,710,2.403,711,2.403,712,2.403,713,2.854,714,2.854]],["title/dependencies.html",[139,2.407,715,2.363]],["body/dependencies.html",[0,0.26,17,0.028,27,2.854,30,0.022,31,0.022,84,1.037,85,2.17,86,2.362,92,3.19,93,3.19,94,3.19,139,2.585,152,2.362,194,3.19,198,2.585,245,2.854,293,3.19,311,3.64,367,2.854,370,2.854,455,3.64,505,3.19,716,4.323,717,4.323,718,4.323,719,4.323,720,4.323,721,6.124,722,4.323,723,4.323,724,4.323,725,4.323,726,4.323,727,4.323,728,4.323,729,4.323,730,4.323,731,4.323,732,4.323,733,4.323,734,4.323,735,4.323,736,4.323,737,4.323,738,4.323,739,4.323,740,4.323,741,4.323,742,4.323,743,4.323]],["title/miscellaneous/enumerations.html",[744,1.3,745,3.389]],["body/miscellaneous/enumerations.html",[10,2.4,11,1.884,13,0.344,17,0.028,23,2.648,30,0.022,31,0.022,64,2.4,87,2.967,89,2.731,90,3.585,122,3.699,365,2.627,441,4.007,456,3.699,458,4.573,459,3.699,460,3.699,744,2.035,745,3.699,746,4.393,747,6.158,748,4.393,749,3.699,750,4.393,751,4.393,752,3.241,753,4.393,754,4.393,755,4.393,756,4.393,757,4.393,758,4.393,759,4.393,760,4.393,761,4.393,762,4.393,763,4.393,764,4.393,765,4.393,766,4.393,767,4.393,768,4.393,769,4.393]],["title/miscellaneous/functions.html",[744,1.3,770,3.389]],["body/miscellaneous/functions.html",[8,0.567,13,0.245,16,0.614,17,0.027,18,1.228,23,1.729,29,2.374,30,0.018,31,0.018,39,1.871,48,2.947,50,1.385,51,0.646,54,1.211,55,0.912,56,1.211,57,1.863,58,1.846,59,2.947,67,1.113,69,0.868,71,1.157,73,2.181,74,1.57,96,2.598,97,1.495,127,2.308,132,1.076,164,2.516,165,2.308,174,3.658,175,3.658,185,4.203,192,4.182,278,1.871,301,2.374,302,3.206,308,2.634,337,3.226,361,3.295,362,3.206,689,2.634,690,4.541,691,3.658,692,3.658,695,2.634,696,3.658,699,2.634,700,4.203,707,2.634,708,4.772,709,3.658,710,3.658,711,3.658,712,3.658,744,1.449,770,2.634,771,3.128,772,3.128,773,5.394,774,3.128,775,3.128,776,3.128,777,4.345,778,3.128,779,5.866,780,4.992,781,3.128,782,3.128,783,3.128,784,5.866,785,4.345,786,4.992,787,4.203,788,5.394,789,3.128,790,3.128,791,5.667,792,4.345,793,3.128,794,3.128,795,3.128,796,3.128,797,3.128,798,3.128]],["title/index.html",[13,0.262,799,2.821]],["body/index.html",[2,2.133,17,0.027,30,0.023,31,0.023,34,3.039,137,4.303,138,2.515,139,3.342,140,3.876,141,3.876,142,3.899,143,3.599,144,4.124,145,3.397,146,3.397,153,3.604,212,2.753,298,2.133,342,2.515,477,3.876,478,3.876,479,3.876,799,3.876,800,5.067,801,5.589,802,3.876]],["title/modules.html",[138,2.488]],["body/modules.html",[17,0.024,30,0.024,31,0.024,137,3.373,138,2.791,142,3.056,143,3.056,803,5.946,804,5.946,805,5.946,806,6.29,807,5.11,808,5.11]],["title/properties.html",[14,1.385,715,2.363]],["body/properties.html",[8,0.518,14,1.78,17,0.027,30,0.025,31,0.025,294,3.094,809,5.174,810,5.174,811,5.174,812,5.174]],["title/miscellaneous/typealiases.html",[744,1.3,813,4.025]],["body/miscellaneous/typealiases.html",[13,0.405,16,0.599,17,0.025,30,0.025,31,0.025,216,1.657,491,3.416,504,3.818,506,4.42,744,2.397,814,5.174,815,4.357]],["title/miscellaneous/variables.html",[744,1.3,752,2.97]],["body/miscellaneous/variables.html",[13,0.282,16,0.595,17,0.028,18,1.091,23,2.434,29,3.341,30,0.02,31,0.02,55,0.535,89,2.214,96,2.151,192,4.512,195,3.541,216,1.152,252,2.693,294,2.151,295,2.655,302,2.655,343,2.375,353,2.655,363,3.208,365,2.151,366,3.525,373,1.965,375,3.208,377,3.525,392,4.217,393,4.517,394,4.217,395,3.208,396,2.655,404,3.029,491,2.375,492,2.655,496,3.525,508,3.154,509,3.029,706,3.029,744,1.667,749,3.029,752,2.655,787,3.029,800,3.029,802,3.029,815,3.029,816,3.598,817,3.598,818,3.598,819,3.598,820,5.365,821,3.598,822,5.365,823,3.598,824,3.598,825,4.778,826,3.598,827,3.598,828,3.598,829,4.778,830,3.598,831,3.598,832,3.598,833,3.598,834,3.598,835,3.598,836,3.598,837,3.598]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":809,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":113,"title":{"classes/User-1.html":{}},"body":{"guards/ApiKeyGrpcGuard.html":{},"injectables/UsersDatabaseService.html":{}}}],["1.7.0",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":625,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["2.2.0",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["2048",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":800,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":520,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["4",{"_index":295,"title":{},"body":{"classes/GuidDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["4.1.2",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["4027",{"_index":521,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["404",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["409",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["4096",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["5",{"_index":802,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["6.1.2",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":801,"title":{},"body":{"index.html":{}}}],["7.2.0",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["ab9d",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["access",{"_index":57,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["accessing",{"_index":454,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["address",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["aliases",{"_index":814,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":408,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":10,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["apikeydto",{"_index":1,"title":{"classes/ApiKeyDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apikeydto).apikey",{"_index":135,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{}}}],["apikeygrpcguard",{"_index":33,"title":{"guards/ApiKeyGrpcGuard.html":{}},"body":{"guards/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["apikeyguard",{"_index":53,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["apikeyhttpguard",{"_index":115,"title":{"guards/ApiKeyHttpGuard.html":{}},"body":{"guards/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["apikeys",{"_index":110,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["apikeys.length",{"_index":112,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["apikeys[0].tostring",{"_index":114,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["apikeytcpguard",{"_index":125,"title":{"guards/ApiKeyTcpGuard.html":{}},"body":{"guards/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apioperation",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["apisecurity",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["application",{"_index":58,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":137,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":108,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["args",{"_index":134,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{}}}],["array",{"_index":229,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["async",{"_index":217,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["author",{"_index":812,"title":{},"body":{"properties.html":{}}}],["available",{"_index":808,"title":{},"body":{"modules.html":{}}}],["await",{"_index":282,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ba47",{"_index":522,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":410,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["bcrypt",{"_index":311,"title":{},"body":{"injectables/HashPipe.html":{},"dependencies.html":{}}}],["body",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":68,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["bootstrap",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":806,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":803,"title":{},"body":{"modules.html":{}}}],["call",{"_index":331,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":327,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":44,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["canactivate(context",{"_index":60,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["catch",{"_index":473,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["catch((err",{"_index":439,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["catcherror",{"_index":334,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":336,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":519,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["class",{"_index":0,"title":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":442,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["cloud",{"_index":368,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":455,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["clouds",{"_index":427,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["cls",{"_index":788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_servicesmodule",{"_index":477,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_exports",{"_index":478,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_providers",{"_index":479,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cmd",{"_index":677,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["config",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.service",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{}}}],["config.service.ts",{"_index":418,"title":{},"body":{"injectables/MongodbConfigService.html":{},"coverage.html":{}}}],["config.service.ts:15",{"_index":425,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["config.service.ts:29",{"_index":428,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["config.ts",{"_index":690,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":48,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":59,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["conflictexception",{"_index":406,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connecting",{"_index":421,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["connection",{"_index":374,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["connection_string",{"_index":459,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":437,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["console.log(message",{"_index":415,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":416,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":101,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constants",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_min_length",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_min_length",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":46,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constructor(configservice",{"_index":47,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{}}}],["constructor(databaseservice",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(loggingservice",{"_index":444,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":99,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{}}}],["constructor(secretmanagerservice",{"_index":424,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["constructor(user",{"_index":512,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":605,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":278,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":40,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.getargs().find((args",{"_index":133,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":121,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{}}}],["controller",{"_index":210,"title":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["controller('users",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller.interface.ts",{"_index":344,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["controller.interface.ts:17",{"_index":345,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:24",{"_index":348,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:32",{"_index":349,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:41",{"_index":351,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:49",{"_index":350,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controllers",{"_index":212,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"index.html":{}}}],["coverage",{"_index":685,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":50,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["create(@body",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":398,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":222,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["create(user",{"_index":379,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":381,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["createmongooseoptions",{"_index":423,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["creates",{"_index":272,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["createuserdto",{"_index":161,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["creating",{"_index":165,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MongodbConfigService.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":215,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["current",{"_index":65,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["data",{"_index":132,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":632,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":314,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":316,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":378,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":617,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":377,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":380,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":382,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":385,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":390,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:47",{"_index":387,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":641,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":604,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:12",{"_index":607,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:28",{"_index":610,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:46",{"_index":611,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:57",{"_index":612,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:70",{"_index":614,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:88",{"_index":613,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":527,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{},"injectables/LoggingService.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete",{"_index":236,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete(':guid",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":388,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["deleted.'})@apiresponse({status",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["depedency",{"_index":404,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":139,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":393,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":9,"title":{},"body":{"classes/ApiKeyDto.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["disable",{"_index":679,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["display",{"_index":496,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["display_name_max_length",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":167,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["document",{"_index":504,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["document.save",{"_index":620,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":626,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":628,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["dto",{"_index":164,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":281,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/api",{"_index":675,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["dto/create",{"_index":246,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/guid.dto",{"_index":254,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/update",{"_index":249,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/user",{"_index":256,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ef3aa7fd1bc5",{"_index":523,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["email",{"_index":168,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["email_max_length",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emails",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":237,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["entities/user.entity",{"_index":250,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["entity",{"_index":511,"title":{},"body":{"classes/User-1.html":{}}}],["enum",{"_index":457,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":745,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":88,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{}}}],["environment",{"_index":751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["envnames",{"_index":87,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["envnames.project_name",{"_index":468,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["err",{"_index":474,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["err.code",{"_index":624,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.name",{"_index":622,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":476,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":337,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":678,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["eslint/no",{"_index":682,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["example",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["exception.interceptor",{"_index":260,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exception.interceptor.ts",{"_index":319,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":328,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":517,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":630,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execution",{"_index":66,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":61,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":391,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["exists",{"_index":307,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":96,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exports",{"_index":482,"title":{},"body":{"modules/ServicesModule.html":{}}}],["express",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":489,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["factory",{"_index":791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fails",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":73,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":269,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["find",{"_index":228,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["find((arg",{"_index":107,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["findall",{"_index":218,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findall(data",{"_index":347,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone",{"_index":219,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(data",{"_index":230,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(guid",{"_index":384,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["forbidden",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["found",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["found.'})@apiresponse({status",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["function",{"_index":691,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":770,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':guid')@apioperation({description",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({description",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["getargs",{"_index":106,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["getconnectionstring",{"_index":371,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{}}}],["gets",{"_index":447,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":443,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":448,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["given",{"_index":301,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":367,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":807,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":39,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["grpc.controller",{"_index":642,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":214,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:49",{"_index":224,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":227,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":232,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":239,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":235,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard",{"_index":262,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard.ts",{"_index":36,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"coverage.html":{}}}],["grpc.guard.ts:16",{"_index":49,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:29",{"_index":62,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:50",{"_index":76,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["grpc/grpc",{"_index":93,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["grpc_port",{"_index":763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpcconfig",{"_index":692,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["grpcconfig(config",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grpcmethod",{"_index":223,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersservice",{"_index":211,"title":{"controllers/GrpcUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["guard",{"_index":32,"title":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["guards",{"_index":34,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"index.html":{}}}],["guards/api",{"_index":261,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guid",{"_index":284,"title":{},"body":{"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guiddto",{"_index":231,"title":{"classes/GuidDto.html":{}},"body":{"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["handler",{"_index":332,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":498,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":303,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":263,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["hashrounds",{"_index":312,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":310,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":315,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":317,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":91,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"controllers/UsersController.html":{}}}],["headernames",{"_index":90,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["headers",{"_index":122,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":124,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{}}}],["helper.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["http",{"_index":78,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["http.controller",{"_index":640,"title":{},"body":{"modules/UsersModule.html":{}}}],["http.controller.ts",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["http.controller.ts:126",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["http.controller.ts:149",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["http.controller.ts:59",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["http.controller.ts:75",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["http.controller.ts:99",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["http.guard.ts",{"_index":116,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["http.guard.ts:15",{"_index":118,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:28",{"_index":119,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:49",{"_index":120,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{}}}],["httpcode",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(201",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception",{"_index":322,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":258,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":329,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["id",{"_index":233,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["identifier",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["igrpcusersservice",{"_index":341,"title":{"interfaces/IGrpcUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["iloggingservice",{"_index":352,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":95,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["imports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":82,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["includes",{"_index":346,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["initialized",{"_index":515,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":240,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["inject(logging_service",{"_index":461,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(secret_manager_service",{"_index":431,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["inject(users_database_service",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":277,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["injectable",{"_index":83,"title":{"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":298,"title":{},"body":{"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":394,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["injectmodel",{"_index":615,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":618,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":52,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["instanceof",{"_index":109,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SecretManagerService.html":{}}}],["intercept",{"_index":324,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":325,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":320,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":259,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["interface",{"_index":340,"title":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":342,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":616,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":253,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{}}}],["invalid",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["isecretmanagerservice",{"_index":364,"title":{"interfaces/ISecretManagerService.html":{}},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["isemail",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["isstring()@isuuid",{"_index":20,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["isstring()@isuuid(constants.uuid_version",{"_index":291,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":170,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":26,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{}}}],["isuuid(constants.uuid_version",{"_index":297,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersdatabaseservice",{"_index":376,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":251,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["jane",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["js",{"_index":94,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["key",{"_index":11,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["key.dto",{"_index":131,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{}}}],["key.dto.ts",{"_index":7,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["key.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["known",{"_index":540,"title":{},"body":{"classes/UserListDto.html":{}}}],["latest",{"_index":450,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["length(constants.display_name_min_length",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.password_min_length",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":810,"title":{},"body":{"properties.html":{}}}],["line",{"_index":680,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["list",{"_index":383,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["list.dto",{"_index":257,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["list.dto.ts",{"_index":537,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:10",{"_index":539,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["loader",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":359,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":355,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":356,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":354,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":414,"title":{},"body":{"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["logging.service",{"_index":483,"title":{},"body":{"modules/ServicesModule.html":{}}}],["logging_service",{"_index":363,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingservice",{"_index":411,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["logic",{"_index":397,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":370,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.interface",{"_index":430,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["manager.interface.ts",{"_index":366,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.interface.ts:13",{"_index":372,"title":{},"body":{"interfaces/ISecretManagerService.html":{}}}],["manager.service",{"_index":484,"title":{},"body":{"modules/ServicesModule.html":{}}}],["manager.service.ts",{"_index":441,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:19",{"_index":445,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:33",{"_index":453,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:39",{"_index":446,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:48",{"_index":449,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":360,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["messagepattern",{"_index":673,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["messagepattern({cmd",{"_index":667,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["metadata",{"_index":92,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":111,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{}}}],["method",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":43,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["minimum",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":744,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["model",{"_index":606,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":136,"title":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":138,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":373,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mongodbconfigservice",{"_index":153,"title":{"injectables/MongodbConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/MongodbConfigService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["mongoose",{"_index":505,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":644,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemoduleoptions",{"_index":429,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["mongooseoptionsfactory",{"_index":419,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["mongoservererror",{"_index":623,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":55,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":89,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["names.ts",{"_index":747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":333,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/common",{"_index":84,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":85,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":245,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongodbConfigService.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":51,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":326,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{}}}],["next.handle().pipe",{"_index":335,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["notfoundexception",{"_index":409,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":302,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":70,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{}}}],["operations",{"_index":276,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersTcpController.html":{}}}],["optional",{"_index":56,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":420,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["otherwise",{"_index":74,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{}}}],["output",{"_index":781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":799,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":715,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":98,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["param('guid",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":12,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["parameters",{"_index":54,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["parseint(this.configservice.get(envnames.hash_rounds",{"_index":313,"title":{},"body":{"injectables/HashPipe.html":{}}}],["parseuuidpipe",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":789,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":488,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":490,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":169,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["password_max_length",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':guid",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["pipe",{"_index":265,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["pipe.ts",{"_index":300,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:10",{"_index":304,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:22",{"_index":306,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":264,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["pipetransform",{"_index":309,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":185,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["post",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@httpcode(201)@apioperation({description",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["predefined",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["private",{"_index":41,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["project_name",{"_index":755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/${this.configservice.get",{"_index":467,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":69,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":432,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["prop",{"_index":502,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":493,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["provide",{"_index":485,"title":{},"body":{"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":38,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":481,"title":{},"body":{"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":275,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["providing",{"_index":538,"title":{},"body":{"classes/UserListDto.html":{}}}],["public",{"_index":422,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["rcp",{"_index":79,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["read",{"_index":77,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/UsersController.html":{}}}],["readapikey",{"_index":45,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["readapikey(context",{"_index":75,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["readonly",{"_index":100,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["reflect",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":433,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["reject(err",{"_index":440,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["remove",{"_index":220,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(data",{"_index":234,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(guid",{"_index":386,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":64,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":123,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{}}}],["requests",{"_index":80,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["required",{"_index":507,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{}}}],["resolve(options",{"_index":438,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["result",{"_index":226,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["result.acknowledged",{"_index":633,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":636,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.matchedcount",{"_index":634,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":30,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":330,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":321,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":103,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["returned",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":67,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["rpcexception",{"_index":323,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":339,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rxjs",{"_index":86,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["schema",{"_index":492,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":503,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":509,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":369,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["secret_manager_service",{"_index":375,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretmanagerservice",{"_index":426,"title":{"injectables/SecretManagerService.html":{}},"body":{"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["secretmanagerserviceclient",{"_index":452,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":451,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":458,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":456,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets/${secretname}/versions/latest",{"_index":469,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secrets_from_env",{"_index":757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["service",{"_index":97,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["serviceapikey",{"_index":42,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["services",{"_index":117,"title":{},"body":{"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["services/mongodb",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["services/services.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["servicesmodule",{"_index":142,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["setup",{"_index":775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["single",{"_index":290,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["src/.../constants.ts",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env",{"_index":746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../grpc",{"_index":772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../header",{"_index":748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":749,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../tcp",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":815,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["src/configs/grpc",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/configs/tcp",{"_index":695,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/env",{"_index":750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":35,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/header",{"_index":767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/interceptors/http",{"_index":318,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":299,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/services/logging.interface.ts",{"_index":353,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/logging.interface.ts:15",{"_index":358,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/services/logging.service.ts",{"_index":412,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/services/logging.service.ts:14",{"_index":413,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/services/mongodb",{"_index":417,"title":{},"body":{"injectables/MongodbConfigService.html":{},"coverage.html":{}}}],["src/services/secret",{"_index":365,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/services/services.module.ts",{"_index":480,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/users/database/user.schema.ts",{"_index":491,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":495,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":497,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":499,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:36",{"_index":501,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/api",{"_index":6,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":162,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":289,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:13",{"_index":292,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/update",{"_index":486,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":536,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":510,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":514,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":516,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":518,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":524,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":525,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":343,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":396,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":399,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":400,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":401,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:43",{"_index":403,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:50",{"_index":402,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":213,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["src/users/users.module.ts",{"_index":637,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:103",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:76",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/validation/constants",{"_index":296,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/validation/constants.ts",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":357,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["stopatfirsterror",{"_index":266,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["support",{"_index":804,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":805,"title":{},"body":{"modules.html":{}}}],["table",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["tcp",{"_index":127,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["tcp.controller",{"_index":643,"title":{},"body":{"modules/UsersModule.html":{}}}],["tcp.controller.ts",{"_index":666,"title":{},"body":{"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["tcp.controller.ts:50",{"_index":668,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:60",{"_index":669,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:72",{"_index":670,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:83",{"_index":672,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:93",{"_index":671,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard",{"_index":674,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard.ts",{"_index":126,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["tcp.guard.ts:15",{"_index":128,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:28",{"_index":129,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:49",{"_index":130,"title":{},"body":{"guards/ApiKeyTcpGuard.html":{}}}],["tcp_port",{"_index":765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcpconfig",{"_index":696,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tcpconfig(config",{"_index":798,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/test",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":794,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["then((connectionstring",{"_index":435,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["this.client",{"_index":466,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.accesssecretversion",{"_index":471,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.configservice.get(envnames.api_key",{"_index":105,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["this.configservice.get(envnames.secrets_from_env",{"_index":464,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.configservice.get(secretname",{"_index":465,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.databaseservice.create(user",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":528,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":530,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":462,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.guid",{"_index":534,"title":{},"body":{"classes/User-1.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":475,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.password",{"_index":532,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":102,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["this.secretmanagerservice",{"_index":434,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["this.serviceapikey",{"_index":104,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["this.usermodel(user",{"_index":619,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":635,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":627,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":629,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":631,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(data",{"_index":280,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findall",{"_index":283,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":285,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(guid",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":288,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.remove(guid",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(data.guid",{"_index":287,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.update(guid",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":338,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":407,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":405,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{}}}],["transform(value",{"_index":305,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":308,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["true",{"_index":71,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":470,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/ApiKeyDto.html":{},"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":813,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":681,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["undefined",{"_index":81,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["undefined})@apiresponse({status",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":494,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":268,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["unlicensed",{"_index":811,"title":{},"body":{"properties.html":{}}}],["unqiue",{"_index":500,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unused",{"_index":683,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["update",{"_index":221,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(data",{"_index":238,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(guid",{"_index":389,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":286,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["updated.'})@apiresponse({status",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":248,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["updating",{"_index":487,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":436,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["use",{"_index":463,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["use_swagger",{"_index":761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":392,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":241,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useguards(apikeygrpcguard",{"_index":271,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeytcpguard",{"_index":676,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["useinterceptors",{"_index":242,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useinterceptors(new",{"_index":270,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["usepipes",{"_index":243,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user",{"_index":166,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.'})@apiresponse({status",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.displayname",{"_index":529,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":247,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user.dto.ts",{"_index":163,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":531,"title":{},"body":{"classes/User-1.html":{}}}],["user.name",{"_index":645,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":533,"title":{},"body":{"classes/User-1.html":{}}}],["usercontroller",{"_index":273,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["userdatabase",{"_index":513,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":535,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":506,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":609,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":621,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":255,"title":{"classes/UserListDto.html":{}},"body":{"controllers/GrpcUsersService.html":{},"classes/UserListDto.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usermodel",{"_index":608,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":216,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users.'})@apiresponse({status",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.service",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["users_api_key",{"_index":760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_database_service",{"_index":395,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_grpc_port",{"_index":764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_hash_rounds",{"_index":754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_project_name",{"_index":756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_secrets_from_env",{"_index":758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_service",{"_index":252,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_tcp_port",{"_index":766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_use_swagger",{"_index":762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userschema",{"_index":508,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":541,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersdatabaseservice",{"_index":603,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":143,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":274,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usersserviceconnectionstring",{"_index":460,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["userstcpcontroller",{"_index":638,"title":{"controllers/UsersTcpController.html":{}},"body":{"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user})@apiresponse({status",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid",{"_index":293,"title":{},"body":{"classes/GuidDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuids",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":526,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":72,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["validate",{"_index":63,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["validated",{"_index":279,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersController.html":{},"controllers/UsersTcpController.html":{}}}],["validating",{"_index":37,"title":{},"body":{"guards/ApiKeyGrpcGuard.html":{},"guards/ApiKeyHttpGuard.html":{},"guards/ApiKeyTcpGuard.html":{}}}],["validation",{"_index":787,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validation/constants",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validationpipe",{"_index":244,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"dependencies.html":{}}}],["value",{"_index":23,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["variable",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":752,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":684,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["version",{"_index":294,"title":{},"body":{"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version.payload.data.tostring",{"_index":472,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":362,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":267,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["whose",{"_index":225,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["x",{"_index":769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":361,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiKeyDto.html":{"url":"classes/ApiKeyDto.html","title":"class - ApiKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/api-key.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes an api key parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/api-key.dto.ts:12\n                        \n                    \n\n            \n                \n                    The value of the api key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * Describes an api key parameter.\n */\nexport default class ApiKeyDto {\n  /**\n   * The value of the api key.\n   */\n  @IsString()\n  @IsUUID()\n  apiKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGrpcGuard.html":{"url":"guards/ApiKeyGrpcGuard.html","title":"guard - ApiKeyGrpcGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGrpcGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key-grpc.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard for validating the provided api key in GRPC context.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                serviceApiKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-grpc.guard.ts:16\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access to the application configuration.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:29\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:50\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { EnvNames } from '../env-names';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Guard for validating the provided api key in GRPC context.\n */\n@Injectable()\nexport class ApiKeyGrpcGuard implements CanActivate {\n  /**\n   * The expected api key for the service.\n   */\n  private serviceApiKey: string;\n\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param configService Access to the application configuration.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    if (!this.serviceApiKey) {\n      this.serviceApiKey = this.configService.get(EnvNames.API_KEY);\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  private readApiKey(context: ExecutionContext): string | undefined {\n    const metadata: Metadata = context\n      .getArgs()\n      .find((arg) => arg instanceof Metadata);\n    if (!metadata) {\n      return;\n    }\n\n    const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n    if (!apiKeys || apiKeys.length !== 1) {\n      return;\n    }\n\n    return apiKeys[0].toString();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyHttpGuard.html":{"url":"guards/ApiKeyHttpGuard.html","title":"guard - ApiKeyHttpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyHttpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key-http.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard for validating the provided api key for http services.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                serviceApiKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-http.guard.ts:15\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access to the application configuration.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:28\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:49\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { EnvNames } from '../env-names';\nimport { HeaderNames } from '../header-names';\n\n/**\n * Guard for validating the provided api key for http services.\n */\n@Injectable()\nexport class ApiKeyHttpGuard implements CanActivate {\n  /**\n   * The expected api key for the service.\n   */\n  private serviceApiKey: string;\n\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param configService Access to the application configuration.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    if (!this.serviceApiKey) {\n      this.serviceApiKey = this.configService.get(EnvNames.API_KEY);\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  private readApiKey(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const headers = request?.headers;\n\n    if (!headers) {\n      return;\n    }\n\n    return headers[HeaderNames.X_API_KEY];\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyTcpGuard.html":{"url":"guards/ApiKeyTcpGuard.html","title":"guard - ApiKeyTcpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyTcpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key-tcp.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard for validating the provided api key for tcp services.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                serviceApiKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-tcp.guard.ts:15\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access to the application configuration.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:28\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:49\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { EnvNames } from '../env-names';\nimport ApiKeyDto from 'src/users/dto/api-key.dto';\n\n/**\n * Guard for validating the provided api key for tcp services.\n */\n@Injectable()\nexport class ApiKeyTcpGuard implements CanActivate {\n  /**\n   * The expected api key for the service.\n   */\n  private serviceApiKey: string;\n\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param configService Access to the application configuration.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    if (!this.serviceApiKey) {\n      this.serviceApiKey = this.configService.get(EnvNames.API_KEY);\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  private readApiKey(context: ExecutionContext): string | undefined {\n    const data = context.getArgs().find((args) => (args as ApiKeyDto).apiKey);\n    if (data) {\n      return (data as ApiKeyDto).apiKey;\n    }\n\n    return;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nServicesModule\n\nServicesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ServicesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ServicesModule } from './services/services.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { MongodbConfigService } from './services/mongodb-config.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      imports: [ServicesModule],\n      useClass: MongodbConfigService,\n    }),\n    ServicesModule,\n    UsersModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../../validation/constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from './interfaces/users.interface';\nimport GuidDto from './dto/guid.dto';\nimport UserListDto from './dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../interceptors/http-exception.interceptor';\nimport { ApiKeyGrpcGuard } from '../guards/api-key-grpc.guard';\nimport { HashPipe } from '../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGrpcGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID(Constants.UUID_VERSION)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:13\n                        \n                    \n\n            \n                \n                    An uuid in version 4.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { Constants } from 'src/validation/constants';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  /**\n   * An uuid in version 4.\n   */\n  @IsString()\n  @IsUUID(Constants.UUID_VERSION)\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access the application configuration.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:22\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { PipeTransform, Injectable } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { EnvNames } from '../env-names';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param configService Access the application configuration.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    const hashRounds = parseInt(this.configService.get(EnvNames.HASH_ROUNDS));\n    if (data.email) {\n      data.email = hashSync(data.email, hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrpcUsersService.html":{"url":"interfaces/IGrpcUsersService.html","title":"interface - IGrpcUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-grpc-controller.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service interface for the GRPC service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:17\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:24\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:32\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:49\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:41\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport GuidDto from '../dto/guid.dto';\nimport { Observable } from 'rxjs';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Service interface for the GRPC service.\n */\nexport interface IGrpcUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto, metadata: Metadata): Observable;\n\n  /**\n   * Find all users of the application.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(data: any, metadata: Metadata): Observable;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  update(data: UpdateUserDto & GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  remove(data: GuidDto, metadata: Metadata): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISecretManagerService.html":{"url":"interfaces/ISecretManagerService.html","title":"interface - ISecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/secret-manager.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \ngetConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.interface.ts:13\n                \n            \n\n\n            \n                \n                    Get the mongodb connection string.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const SECRET_MANAGER_SERVICE = 'SECRET_MANAGER_SERVICE';\n\n/**\n * Access for the google cloud secret manager.\n */\nexport interface ISecretManagerService {\n  /**\n   * Get the mongodb connection string.\n   */\n  getConnectionString(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:47\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:50\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:43\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongodbConfigService.html":{"url":"injectables/MongodbConfigService.html","title":"injectable - MongodbConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongodbConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/mongodb-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A MongooseOptionsFactory for creating the options for connecting to mongodb.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createMongooseOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(secretManagerService: ISecretManagerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/mongodb-config.service.ts:15\n                            \n                        \n\n                \n                    \n                            Create a new instance of MongodbConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        secretManagerService\n                                                  \n                                                        \n                                                                        ISecretManagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access google clouds secret manager.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createMongooseOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMongooseOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/services/mongodb-config.service.ts:29\n                \n            \n\n\n            \n                \n                    Create the options for connecting to mongodb.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result are the MongooseModuleOptions.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport {\n  MongooseModuleOptions,\n  MongooseOptionsFactory,\n} from '@nestjs/mongoose';\nimport {\n  ISecretManagerService,\n  SECRET_MANAGER_SERVICE,\n} from './secret-manager.interface';\n\n/**\n * A MongooseOptionsFactory for creating the options for connecting to mongodb.\n */\n@Injectable()\nexport class MongodbConfigService implements MongooseOptionsFactory {\n  /**\n   * Create a new instance of MongodbConfigService.\n   * @param secretManagerService Access google clouds secret manager.\n   */\n  constructor(\n    @Inject(SECRET_MANAGER_SERVICE)\n    private readonly secretManagerService: ISecretManagerService,\n  ) {}\n\n  /**\n   * Create the options for connecting to mongodb.\n   * @returns A Promise whose result are the MongooseModuleOptions.\n   */\n  public createMongooseOptions(): Promise {\n    return new Promise((resolve, reject) => {\n      this.secretManagerService\n        .getConnectionString()\n        .then((connectionString: string) => {\n          const options = {\n            uri: connectionString,\n          };\n\n          resolve(options);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/secret-manager.service.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access the configuration of the application.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.service.ts:48\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/services/secret-manager.service.ts:33\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ISecretManagerService } from './secret-manager.interface';\nimport { ILoggingService, LOGGING_SERVICE } from './logging.interface';\nimport { EnvNames } from '../env-names';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService implements ISecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   * @param configService Access the configuration of the application.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    // use .env instead of google cloud secret manager\n    if (this.configService.get(EnvNames.SECRETS_FROM_ENV)) {\n      return this.configService.get(secretName);\n    }\n\n    // use google cloud secret manager\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.configService.get(\n      EnvNames.PROJECT_NAME,\n    )}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nMongodbConfigService \n\nMongodbConfigService \n\n\n\nServicesModule\n\nServicesModule\n\nMongodbConfigService  -->\n\nServicesModule->MongodbConfigService \n\n\n\n\n\nMongodbConfigService\n\nMongodbConfigService\n\nServicesModule -->\n\nMongodbConfigService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MongodbConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MongodbConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\nimport { MongodbConfigService } from './mongodb-config.service';\nimport { SECRET_MANAGER_SERVICE } from './secret-manager.interface';\nimport { SecretManagerService } from './secret-manager.service';\n\n@Module({\n  exports: [LOGGING_SERVICE, SECRET_MANAGER_SERVICE, MongodbConfigService],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n    {\n      provide: SECRET_MANAGER_SERVICE,\n      useClass: SecretManagerService,\n    },\n    MongodbConfigService,\n  ],\n})\nexport class ServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the schema for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:36\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * The document type for users.\n */\nexport type UserDocument = User & Document;\n\n/**\n * Describes the schema for users.\n */\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\n/**\n * The mongodb schema for users.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:10\n                        \n                    \n\n            \n                \n                    All known users of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  /**\n   * All known users of the application.\n   */\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-http.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-http.controller.ts:59\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-http.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-http.controller.ts:99\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-http.controller.ts:149\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-http.controller.ts:126\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from './interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post()\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            Create a new instance of UsersDatabaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The model for database operations on users.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:28\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:46\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:57\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:88\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:70\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  /**\n   * Create a new instance of UsersDatabaseService.\n   * @param userModel The model for database operations on users.\n   */\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            GrpcUsersService\n                        \n                        \n                            UsersTcpController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users-http.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './users-grpc.controller';\nimport { UsersTcpController } from './users-tcp.controller';\n\n@Module({\n  controllers: [UsersController, GrpcUsersService, UsersTcpController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:103\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersTcpController.html":{"url":"controllers/UsersTcpController.html","title":"controller - UsersTcpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersTcpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-tcp.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                TCP CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'create'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-tcp.controller.ts:50\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(data: ApiKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findAll'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-tcp.controller.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ApiKeyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findOne'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-tcp.controller.ts:72\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'remove'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-tcp.controller.ts:93\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'update'})\n                \n            \n\n            \n                \n                    Defined in src/users/users-tcp.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from './interfaces/users.interface';\nimport GuidDto from './dto/guid.dto';\nimport UserListDto from './dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../interceptors/http-exception.interceptor';\nimport { ApiKeyTcpGuard } from '../guards/api-key-tcp.guard';\nimport { HashPipe } from '../pipes/hash-pipe';\nimport ApiKeyDto from './dto/api-key.dto';\n\n/**\n * TCP CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyTcpGuard)\n@Controller()\nexport class UsersTcpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'create' })\n  create(data: CreateUserDto & ApiKeyDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @MessagePattern({ cmd: 'findAll' })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findAll(data: ApiKeyDto): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'findOne' })\n  findOne(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'update' })\n  update(data: UpdateUserDto & GuidDto & ApiKeyDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'remove' })\n  remove(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/configs/grpc-config.ts\n            \n            function\n            grpcConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configs/tcp-config.ts\n            \n            function\n            tcpConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/guards/api-key-grpc.guard.ts\n            \n            guard\n            ApiKeyGrpcGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/guards/api-key-http.guard.ts\n            \n            guard\n            ApiKeyHttpGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/guards/api-key-tcp.guard.ts\n            \n            guard\n            ApiKeyTcpGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/mongodb-config.service.ts\n            \n            injectable\n            MongodbConfigService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/secret-manager.interface.ts\n            \n            interface\n            ISecretManagerService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/secret-manager.interface.ts\n            \n            variable\n            SECRET_MANAGER_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/api-key.dto.ts\n            \n            class\n            ApiKeyDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-grpc-controller.interface.ts\n            \n            interface\n            IGrpcUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users-http.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users-tcp.controller.ts\n            \n            controller\n            UsersTcpController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/validation/constants.ts\n            \n            variable\n            Constants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvNames   (src/.../env-names.ts)\n                        \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/env-names.ts\n    \n        \n            \n                \n                    \n                        \n                        EnvNames\n                    \n                \n                    \n                        \n                            Names of environment variables.\n\n                        \n                    \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : USERS_HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : USERS_PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : USERS_SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : USERS_API_KEY\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USERS_USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_TCP_PORT\n                            \n                        \n            \n        \n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/services/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            grpcConfig   (src/.../grpc-config.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            tcpConfig   (src/.../tcp-config.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The application setup.\n\n\n                \n            \n        \n    \n    src/configs/grpc-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        grpcConfig\n                        \n                    \n                \n            \n            \n                \ngrpcConfig(config?: ConfigService)\n                \n            \n\n\n\n\n            \n                \n                    Create the configuration for the grpc service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            ConfigService\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Access to the application configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/configs/tcp-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tcpConfig\n                        \n                    \n                \n            \n            \n                \ntcpConfig(config?: ConfigService)\n                \n            \n\n\n\n\n            \n                \n                    Create the configuration for the tcp service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            ConfigService\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Access to the application configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nServicesModule\n\nServicesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nMongodbConfigService \n\nMongodbConfigService \n\nMongodbConfigService  -->\n\nServicesModule->MongodbConfigService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nMongodbConfigService\n\nMongodbConfigService\n\nServicesModule -->\n\nMongodbConfigService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The document type for users.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            SECRET_MANAGER_SERVICE   (src/.../secret-manager.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The minimum length for display names.\n   */\n  DISPLAY_NAME_MIN_LENGTH: 3,\n\n  /**\n   * The maximum length for display names.\n   */\n  DISPLAY_NAME_MAX_LENGTH: 256,\n\n  /**\n   * The minimum length for emails.\n   */\n  EMAIL_MIN_LENGTH: 5,\n\n  /**\n   * The maximum length for emails.\n   */\n  EMAIL_MAX_LENGTH: 2048,\n\n  /**\n   * The minimum length for passwords.\n   */\n  PASSWORD_MIN_LENGTH: 8,\n\n  /**\n   * The maximum length for passwords.\n   */\n  PASSWORD_MAX_LENGTH: 4096,\n\n  /**\n   * The expected version for uuids.\n   */\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n            \n                \n                    Predefined validation constants.\n\n                \n            \n\n        \n    \n\n    src/services/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/services/secret-manager.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SECRET_MANAGER_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SECRET_MANAGER_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The mongodb schema for users.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
