var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiKeyDto.html",[0,0.146,1,2.25]],["body/classes/ApiKeyDto.html",[0,0.245,1,3.764,2,2.476,3,0.305,4,0.305,5,0.269,6,5.121,7,4.205,8,0.58,9,3.477,10,2.638,11,2.223,12,6,13,0.496,14,2.495,15,3.044,16,0.58,17,0.022,18,0.994,19,2.319,20,4.927,21,0.717,22,4.927,23,2.351,24,0.378,25,4.542,26,5.121,27,3.375,28,0.305,29,2.319,30,0.018,31,0.018]],["title/injectables/ApiKeyGrpcGuard.html",[32,0.632,33,2.078]],["body/injectables/ApiKeyGrpcGuard.html",[0,0.147,3,0.223,4,0.223,5,0.197,8,0.577,10,2.634,11,2.275,13,0.363,15,1.695,16,0.577,17,0.022,18,1.037,21,0.714,24,0.48,28,0.223,30,0.014,31,0.014,32,0.864,33,2.841,34,1.332,35,3.496,36,3.075,37,2.639,38,3.358,39,2.841,40,2.166,41,4.143,42,3.076,43,3.625,44,1.033,45,3.817,46,3.358,47,1.125,48,2.467,49,3.603,50,1.37,51,0.918,52,1.531,53,1.033,54,0.762,55,1.033,56,3.358,57,3.358,58,3.752,59,3.603,60,3.076,61,3.358,62,3.711,63,3.076,64,3.076,65,3.076,66,0.975,67,3.006,68,3.358,69,2.639,70,2.463,71,1.125,72,0.597,73,1.94,74,2.087,75,1.695,76,4.285,77,2.467,78,2.467,79,1.332,80,1.592,81,2.727,82,1.033,83,2.467,84,2.727,85,2.727,86,1.225,87,3.603,88,3.603,89,3.603,90,3.075,91,1.473,92,4.903,93,3.603,94,3.603,95,2.467,96,3.603]],["title/guards/ApiKeyGuard.html",[37,1.931,43,2.078]],["body/guards/ApiKeyGuard.html",[0,0.141,3,0.214,4,0.214,5,0.189,8,0.642,10,2.705,11,2.23,13,0.348,15,2.766,16,0.642,17,0.022,18,1.022,21,0.794,24,0.366,28,0.214,30,0.014,31,0.014,32,0.84,35,3.687,37,2.565,38,3.263,39,2.76,41,4.237,43,3.406,44,1.004,45,3.735,46,3.263,47,1.079,48,2.367,50,1.331,51,0.893,52,1.487,53,1.149,54,0.848,55,1.149,56,3.263,57,3.263,58,4.098,60,2.989,63,2.989,64,3.687,65,3.687,66,1.169,67,2.953,68,3.263,69,3.164,70,2.953,72,0.572,82,1.149,83,3.735,86,0.864,91,1.259,97,3.455,98,2.949,99,4.764,100,4.764,101,6.166,102,5.878,103,3.455,104,3.455,105,3.455,106,4.764,107,4.066,108,1.331,109,4.128,110,1.867,111,2.74,112,3.455,113,2.002,114,1.626,115,3.455,116,1.437,117,3.455,118,3.455]],["title/injectables/ApiKeyHttpGuard.html",[32,0.632,119,2.25]],["body/injectables/ApiKeyHttpGuard.html",[0,0.153,3,0.232,4,0.232,5,0.205,8,0.593,10,2.658,11,2.292,13,0.377,15,1.764,16,0.593,17,0.022,18,1.051,21,0.733,24,0.466,28,0.232,30,0.015,31,0.015,32,0.888,34,1.386,35,3.568,37,2.711,38,3.449,39,2.918,41,3.814,42,3.159,43,3.675,44,1.061,45,3.895,46,3.449,47,1.17,48,2.567,50,1.407,51,0.943,52,1.572,53,1.061,54,0.783,55,1.061,56,3.449,57,3.449,58,3.814,60,3.159,61,4.164,62,3.812,63,3.159,64,3.159,65,3.159,66,1.001,67,3.055,68,3.449,69,3.062,70,2.53,71,1.17,72,0.621,73,2.018,74,2.172,75,1.764,79,1.386,80,1.656,81,2.838,82,1.061,83,2.567,84,2.838,85,2.838,86,1.259,91,1.331,119,3.159,120,3.199,121,3.449,122,3.749,123,3.749,124,3.749,125,3.812,126,3.749,127,3.749]],["title/injectables/ApiKeyTcpGuard.html",[32,0.632,128,2.078]],["body/injectables/ApiKeyTcpGuard.html",[0,0.153,1,2.356,3,0.232,4,0.232,5,0.205,8,0.594,10,2.659,11,2.293,13,0.378,15,1.767,16,0.594,17,0.022,18,1.052,21,0.734,24,0.467,28,0.232,30,0.015,31,0.015,32,0.889,34,1.389,35,3.571,37,2.715,38,3.454,39,2.922,41,3.817,42,3.163,43,3.678,44,1.063,45,3.899,46,3.454,47,1.173,48,2.572,50,1.409,51,0.945,52,1.574,53,1.063,54,0.784,55,1.063,56,3.454,57,3.454,58,3.817,60,3.163,61,3.454,62,3.817,63,3.163,64,3.163,65,3.163,66,1.003,67,3.057,68,3.454,69,2.715,70,2.534,71,1.173,72,0.622,79,1.389,80,1.66,81,2.843,82,1.063,83,2.572,84,2.843,85,2.843,86,0.939,91,1.333,121,3.454,128,2.922,129,3.206,130,2.922,131,3.756,132,3.756,133,3.756,134,3.206,135,3.756,136,1.879,137,3.756,138,3.756,139,5.043]],["title/modules/AppModule.html",[140,1.002,141,2.456]],["body/modules/AppModule.html",[0,0.158,3,0.24,4,0.24,5,0.212,17,0.022,18,0.642,24,0.544,28,0.24,30,0.015,31,0.015,71,1.21,72,0.642,79,1.433,80,1.713,91,1.024,110,1.519,140,1.439,141,4.982,142,1.519,143,2.141,144,3.308,145,3.308,146,3.821,147,2.973,148,3.821,149,3.821,150,4.137,151,3.821,152,4.137,153,2.423,154,1.824,155,1.824,156,3.876,157,2.906,158,3.876,159,3.308,160,3.308,161,2.431,162,3.308,163,2.934,164,3.876,165,1.433,166,2.934,167,3.308,168,3.308,169,2.246,170,3.308,171,3.23,172,3.876,173,3.308,174,3.876,175,3.876,176,2.934,177,5.149,178,3.876,179,2.934]],["title/modules/ClientsModule.html",[140,1.002,146,2.078]],["body/modules/ClientsModule.html",[0,0.167,3,0.252,4,0.252,5,0.223,17,0.022,24,0.513,28,0.252,30,0.016,31,0.016,40,1.802,71,1.663,72,0.676,79,1.508,80,1.802,91,1.078,130,2.364,140,1.488,142,1.598,143,2.214,146,4.084,147,2.955,153,2.506,154,1.919,155,1.919,157,2.676,169,2.364,176,4.032,180,3.482,181,4.079,182,3.482,183,5.815,184,5.815,185,5.815,186,5.815,187,4.079,188,3.086,189,3.341,190,1.189,191,2.867,192,4.079,193,2.05,194,3.648,195,2.196,196,4.306,197,4.079,198,4.079,199,3.088,200,3.482,201,4.079,202,3.088,203,4.032]],["title/modules/ConfigurationModule.html",[140,1.002,147,1.584]],["body/modules/ConfigurationModule.html",[0,0.109,3,0.165,4,0.165,5,0.146,10,1.048,15,1.259,16,0.315,17,0.022,18,0.657,23,2.049,24,0.496,28,0.165,30,0.012,31,0.012,51,0.501,54,0.416,71,1.941,72,0.443,73,1.44,74,2.298,75,1.867,79,0.989,86,1.396,91,1.708,107,4.035,108,0.747,110,1.554,111,1.993,140,1.108,142,1.048,143,1.649,147,3.054,151,3.389,153,1.867,154,1.259,155,1.259,157,1.993,159,2.283,162,2.283,163,2.025,173,2.283,176,4.808,179,4.583,188,2.298,190,0.886,193,1.344,195,2.136,196,4.35,199,4.583,202,4.583,204,2.283,205,2.675,206,2.283,207,2.283,208,5.168,209,5.168,210,5.168,211,5.307,212,5.168,213,5.168,214,3.985,215,2.675,216,7.137,217,4.728,218,2.675,219,2.675,220,2.283,221,2.675,222,2.283,223,2.025,224,2.675,225,3.967,226,1.55,227,2.675,228,1.182,229,3.967,230,2.675,231,2.675,232,4.728,233,2.675,234,2.675,235,3.386,236,2.025,237,2.675,238,2.675,239,2.675,240,2.675,241,2.675,242,2.025,243,2.283,244,2.675,245,2.675,246,2.675,247,2.675,248,2.675,249,2.675,250,0.989,251,2.675,252,2.675,253,2.675,254,3.967,255,2.675,256,2.675,257,2.675,258,2.675,259,2.675,260,2.675]],["title/classes/CreateUserDto.html",[0,0.146,261,1.252]],["body/classes/CreateUserDto.html",[0,0.231,2,1.869,3,0.23,4,0.23,5,0.203,8,0.438,13,0.374,14,2.083,16,0.667,17,0.022,18,1.08,19,2.666,21,0.825,23,1.458,24,0.465,25,4.288,27,2.548,28,0.23,30,0.015,31,0.015,51,0.939,54,0.779,67,3.274,226,2.155,261,1.75,262,5.173,263,2.816,264,1.963,265,4.276,266,1.6,267,3.88,268,4.178,269,4.333,270,3.72,271,3.72,272,4.276,273,4.276,274,5.562,275,5.562,276,3.72,277,5.01,278,5.01,279,3.72,280,3.72,281,3.175,282,5.01,283,3.72,284,5.01,285,5.173,286,6.061,287,3.72,288,3.72,289,5.01,290,3.72,291,5.01,292,2.816,293,4.276,294,2.816,295,2.548,296,3.175,297,5.173,298,3.72,299,5.01,300,4.288,301,3.72,302,3.72,303,5.01,304,3.72,305,3.72,306,3.72,307,5.01,308,3.72]],["title/injectables/GrpcUsersClient.html",[32,0.632,189,2.25]],["body/injectables/GrpcUsersClient.html",[0,0.082,3,0.124,4,0.124,5,0.109,8,0.577,10,1.244,11,1.048,13,0.202,14,1.32,15,2.305,16,0.643,17,0.022,18,1.028,21,0.87,24,0.483,28,0.124,29,1.494,30,0.009,31,0.009,32,0.56,34,0.74,40,2.413,44,0.669,47,0.992,50,1.255,51,0.918,52,0.992,53,1.032,54,0.761,55,1.032,66,1.252,71,0.625,72,0.332,73,1.078,74,1.16,75,0.942,76,3.996,77,1.371,78,1.371,79,0.74,80,0.885,82,1.151,86,1.525,91,1.043,108,1.933,113,1.16,114,0.942,116,2.271,136,1.926,165,1.174,189,2.818,190,1.44,191,3.141,193,1.006,228,2.986,250,1.661,261,1.711,264,1.76,266,1.621,309,5.207,310,1.516,311,2.404,312,2.271,313,3.947,314,3.945,315,1.867,316,1.32,317,2.257,318,1.32,319,1.867,320,1.709,321,4.492,322,3.176,323,1.403,324,2.71,325,2.71,326,2.175,327,4.289,328,3.834,329,2.002,330,1.84,331,2.002,332,2.167,333,2.432,334,2.002,335,1.32,336,1.403,337,1.32,338,1.596,339,1.709,340,2.21,341,2.038,342,2.002,343,1.494,344,1.71,345,1.403,346,2.806,347,1.596,348,2.002,349,1.32,350,1.596,351,2.042,352,2.002,353,2.703,354,2.002,355,2.404,356,1.709,357,1.709,358,1.32,359,2.418,360,2.002,361,1.709,362,1.709,363,2.404,364,2.002,365,1.84,366,1.516,367,1.71,368,1.709,369,1.371,370,2.002,371,1.516,372,2.002,373,2.002,374,5.462,375,2.002,376,1.006,377,1.078,378,4.448,379,3.118,380,2.002,381,4.448,382,2.002,383,1.709,384,2.002,385,0.833,386,2.002,387,2.002,388,2.002,389,1.709]],["title/controllers/GrpcUsersService.html",[390,1.584,391,2.25]],["body/controllers/GrpcUsersService.html",[0,0.103,3,0.156,4,0.156,5,0.138,8,0.297,11,0.833,13,0.254,16,0.538,17,0.022,19,2.693,21,0.833,24,0.496,28,0.156,30,0.011,31,0.011,33,1.461,40,1.677,44,0.8,47,0.787,50,1.419,51,1.072,52,0.787,53,1.07,54,0.789,55,1.07,66,1.303,71,0.787,72,0.418,82,1.206,86,0.63,91,1.513,108,1.975,110,1.488,116,1.049,136,2.064,165,1.404,190,1.216,193,1.267,228,2.017,250,0.933,261,1.902,264,1.789,266,1.637,312,1.049,315,2.112,316,1.578,317,2.552,318,1.898,319,2.112,323,1.115,330,2.2,332,2.379,333,2.569,335,1.578,336,1.677,337,1.578,340,2.196,341,1.594,343,1.786,344,2.044,345,1.677,346,3.081,349,1.578,351,1.789,358,1.578,359,3.29,367,2.044,369,1.728,376,1.267,377,1.358,379,1.267,385,1.049,390,2.244,391,2.381,392,1.358,393,4.067,394,2.153,395,2.864,396,6.629,397,2.522,398,2.522,399,2.874,400,2.522,401,2.522,402,2.874,403,2.522,404,2.874,405,2.522,406,2.153,407,2.153,408,3.24,409,3.24,410,1.267,411,1.358,412,1.187,413,2.044,414,1.358,415,1.582,416,1.909,417,2.153,418,2.381,419,2.153,420,2.153,421,2.153,422,2.153,423,2.044,424,2.153,425,1.909,426,2.153,427,2.153,428,2.153,429,1.909,430,2.153,431,2.522,432,1.909,433,2.044,434,1.582,435,1.582,436,1.909,437,2.153,438,2.153,439,1.909,440,2.153,441,2.153,442,2.153,443,2.522,444,2.522]],["title/modules/GuardsModule.html",[140,1.002,148,2.078]],["body/modules/GuardsModule.html",[0,0.175,3,0.266,4,0.266,5,0.235,10,2.382,11,2.007,17,0.022,24,0.509,28,0.266,30,0.016,31,0.016,33,4.171,72,0.712,119,4.516,128,4.171,140,1.539,142,1.683,143,2.29,147,2.997,148,4.223,153,2.591,154,2.021,155,2.021,157,2.767,169,2.489,188,3.191,195,2.965,422,3.666,445,3.666,446,4.296,447,3.666,448,3.666,449,4.296,450,4.296,451,3.666]],["title/classes/GuidDto.html",[0,0.146,359,1.931]],["body/classes/GuidDto.html",[0,0.245,2,2.47,3,0.304,4,0.304,5,0.269,8,0.579,13,0.495,14,2.491,16,0.579,17,0.022,18,0.993,19,2.313,21,0.715,24,0.46,25,4.535,26,4.195,27,3.366,28,0.304,29,2.313,30,0.018,31,0.018,264,2.347,295,3.366,296,4.195,341,2.409,359,3.225,452,4.195,453,5.991,454,4.915,455,4.915,456,4.535,457,3.758,458,4.103,459,4.915]],["title/injectables/HashPipe.html",[32,0.632,423,1.931]],["body/injectables/HashPipe.html",[0,0.157,3,0.238,4,0.238,5,0.211,8,0.679,13,0.388,16,0.604,17,0.022,21,0.747,23,2.579,24,0.442,28,0.238,30,0.015,31,0.015,32,0.904,34,1.425,44,1.081,47,1.601,50,1.433,51,0.961,52,1.601,53,1.081,54,0.797,55,1.081,66,1.02,71,1.203,72,0.638,79,1.425,80,1.702,82,1.081,86,0.963,91,1.018,114,1.813,116,1.602,136,1.272,242,4.846,243,4.378,268,4.016,269,4.384,293,5.247,312,1.602,323,2.266,423,3.309,429,3.883,460,4.921,461,3.288,462,3.562,463,4.509,464,6.147,465,3.853,466,3.853,467,5.766,468,2.972,469,3.513,470,5.129,471,3.853,472,2.761,473,5.247,474,5.129,475,3.853,476,3.288,477,3.853,478,5.129,479,3.853,480,5.129,481,5.129,482,3.853]],["title/modules/HealthChecksModule.html",[140,1.002,149,2.078]],["body/modules/HealthChecksModule.html",[0,0.194,3,0.293,4,0.293,5,0.259,17,0.022,24,0.488,28,0.293,30,0.017,31,0.017,40,2.097,72,0.786,140,1.638,142,1.86,143,2.438,146,4.03,149,4.159,153,2.76,154,2.234,155,2.234,157,2.947,165,1.755,166,3.593,168,4.051,188,3.398,190,1.06,195,3.157,345,2.097,483,4.051,484,4.051,485,4.051,486,4.747,487,4.227,488,3.593,489,4.747]],["title/controllers/HealthController.html",[390,1.584,490,2.456]],["body/controllers/HealthController.html",[0,0.141,3,0.213,4,0.213,5,0.188,8,0.405,10,1.862,11,1.137,13,0.347,15,2.236,17,0.022,18,0.57,19,1.62,21,0.501,24,0.472,28,0.213,30,0.014,31,0.014,40,2.1,44,1.002,47,1.075,51,0.645,52,1.075,61,2.358,63,2.16,66,0.945,71,1.075,72,0.57,73,1.854,74,1.995,75,1.62,79,1.273,80,1.521,82,1.375,86,0.861,91,0.91,108,1.328,116,1.976,125,2.606,130,1.995,165,2.607,190,1.31,200,4.056,228,2.593,235,4.056,250,2.354,266,0.814,311,2.606,312,2.713,317,2.388,323,1.521,327,3.598,336,2.721,343,2.236,345,2.938,371,2.606,390,2.405,392,1.854,468,1.995,487,3.4,490,3.728,491,2.939,492,2.939,493,5.443,494,3.443,495,3.443,496,5.443,497,3.598,498,5.869,499,5.869,500,5.869,501,5.869,502,3.443,503,2.358,504,2.606,505,3.443,506,3.443,507,3.443,508,2.16,509,3.443,510,3.443,511,3.443,512,2.939,513,3.443,514,3.443,515,3.443,516,4.753,517,3.443,518,3.443,519,3.443,520,3.443,521,3.443]],["title/modules/HealthModule.html",[140,1.002,150,2.25]],["body/modules/HealthModule.html",[0,0.191,3,0.289,4,0.289,5,0.256,17,0.022,24,0.532,28,0.289,30,0.017,31,0.017,72,0.775,140,1.624,142,1.833,143,2.416,147,3.063,149,4.016,150,4.455,153,2.735,154,2.201,155,2.201,157,2.92,165,1.73,166,3.541,167,3.993,169,2.711,392,3.129,490,4.33,503,3.204,522,4.678,523,4.678,524,4.678,525,5.812,526,3.993,527,5.812,528,4.678]],["title/injectables/HttpExceptionInterceptor.html",[32,0.632,418,2.25]],["body/injectables/HttpExceptionInterceptor.html",[0,0.17,3,0.258,4,0.258,5,0.228,8,0.636,13,0.419,16,0.491,17,0.022,21,0.606,24,0.46,28,0.258,30,0.016,31,0.016,32,0.952,34,1.541,41,3.976,44,1.138,51,0.781,53,0.878,54,0.648,55,0.878,58,3.976,64,3.387,65,3.387,66,1.074,72,0.69,82,1.138,90,3.556,91,1.101,109,4.97,113,2.414,114,1.961,193,2.094,418,3.387,529,4.609,530,3.556,531,5.4,532,5.4,533,6.338,534,6.566,535,6.338,536,5.4,537,5.092,538,6.338,539,4.167,540,5.4,541,5.4,542,5.4,543,5.4,544,5.4,545,4.167,546,4.167,547,4.167,548,3.129,549,3.698,550,4.167]],["title/interfaces/IGrpcUsersService.html",[353,2.456,551,1.326]],["body/interfaces/IGrpcUsersService.html",[3,0.155,4,0.155,5,0.137,8,0.698,10,2.566,11,2.162,13,0.253,16,0.673,17,0.022,21,0.831,24,0.417,28,0.155,30,0.011,31,0.011,40,2.759,44,0.797,50,1.415,51,0.708,53,1.204,54,0.888,55,1.204,66,1.302,69,3.525,76,5.064,77,1.719,78,1.719,82,1.38,108,1.829,109,5.013,113,1.454,136,2.186,165,1.398,190,0.844,250,1.873,261,1.898,264,0.983,266,1.626,315,1.572,316,1.572,317,1.9,318,1.572,319,2.106,330,2.191,332,2.375,333,2.566,335,1.572,336,1.671,337,1.572,340,2.192,341,1.589,343,1.779,344,2.036,345,1.671,346,3.075,349,1.572,351,1.783,353,2.59,358,1.572,359,3.285,376,1.261,377,1.351,385,1.043,399,2.862,402,2.862,404,2.862,410,1.261,411,1.351,416,1.899,551,1.683,552,1.351,553,3.719,554,2.142,555,2.509,556,6.548,557,3.227,558,2.509,559,2.509,560,3.782,561,2.509,562,3.782,563,2.509,564,2.509]],["title/interfaces/ILoggingService.html",[551,1.326,565,2.25]],["body/interfaces/ILoggingService.html",[3,0.291,4,0.291,5,0.258,8,0.688,9,3.383,13,0.474,16,0.555,17,0.022,18,1.15,21,0.686,28,0.361,30,0.017,31,0.017,44,1.23,53,0.993,54,0.732,55,0.993,66,0.937,82,1.23,86,1.178,250,2.159,548,4.023,551,1.742,552,2.537,565,3.662,566,3.567,567,4.419,568,4.983,569,4.983,570,5.926,571,4.712,572,4.983,573,5.658,574,3.227,575,3.662,576,3.662]],["title/interfaces/ISecretManagerService.html",[551,1.326,577,2.456]],["body/interfaces/ISecretManagerService.html",[3,0.309,4,0.309,5,0.273,8,0.588,13,0.502,17,0.022,18,1.002,21,0.726,28,0.374,30,0.018,31,0.018,44,1.275,66,0.992,86,1.247,108,1.689,223,4.577,326,4.141,508,3.793,551,1.845,552,2.687,577,4.141,578,4.577,579,3.778,580,4.577,581,5.161,582,4.577,583,5.772,584,4.991,585,4.141,586,4.577]],["title/interfaces/IUsersClient.html",[365,2.078,551,1.326]],["body/interfaces/IUsersClient.html",[3,0.182,4,0.182,5,0.161,8,0.645,9,2.467,13,0.297,16,0.645,17,0.022,18,1.079,21,0.908,24,0.384,28,0.182,29,1.387,30,0.013,31,0.013,44,0.897,50,1.53,51,0.798,53,1.154,54,0.851,55,1.154,66,1.358,82,1.224,108,2.018,136,2.11,165,1.574,190,1.222,191,2.948,261,2.029,264,1.155,266,1.689,314,4.582,315,2.277,316,1.77,317,2.751,318,1.77,319,2.277,330,2.467,332,2.517,333,2.651,335,1.77,336,1.881,337,1.77,338,2.139,340,2.444,341,2.114,343,2.004,344,2.292,345,1.881,346,3.259,347,2.139,349,1.77,350,2.139,351,2.276,358,1.77,365,2.467,376,1.481,377,1.587,385,1.225,390,1.881,410,1.481,411,1.587,412,1.387,435,2.671,551,1.849,552,1.587,553,4.009,585,2.916,587,2.515,588,2.947,589,2.947,590,2.947,591,2.947,592,2.947,593,2.947,594,2.947]],["title/interfaces/IUsersDatabaseService.html",[551,1.326,595,2.25]],["body/interfaces/IUsersDatabaseService.html",[3,0.186,4,0.186,5,0.164,8,0.689,13,0.302,16,0.65,17,0.022,18,1.084,21,0.851,24,0.23,28,0.267,30,0.013,31,0.013,44,0.909,50,1.543,51,0.808,53,1.164,54,0.858,55,1.164,66,1.32,67,3.061,70,3.335,82,1.233,86,0.75,108,1.988,110,2.164,111,2.775,136,2.011,190,1.233,266,1.737,315,2.296,316,1.794,318,1.794,319,2.296,332,2.76,333,2.601,335,1.794,337,1.794,338,2.168,340,2.374,341,2.318,347,2.168,349,1.794,350,2.168,385,2.296,412,1.412,468,1.739,472,2.323,551,1.11,552,1.616,553,3.821,595,2.707,596,2.272,597,4.611,598,3.683,599,3.002,600,4.428,601,3.002,602,2.955,603,3.002,604,3.002,605,3.266,606,3.002,607,3.266,608,2.562,609,2.056,610,2.707]],["title/interfaces/IUsersService.html",[413,1.931,551,1.326]],["body/interfaces/IUsersService.html",[3,0.188,4,0.188,5,0.167,8,0.693,13,0.307,16,0.655,17,0.022,18,1.088,21,0.857,24,0.391,28,0.27,30,0.013,31,0.013,39,1.766,44,0.92,50,1.554,51,1.042,53,1.172,54,0.915,55,1.172,66,1.282,82,1.241,86,0.762,108,1.957,136,1.943,190,1.242,250,1.613,261,2.139,266,1.722,315,2.313,316,1.814,318,1.814,319,2.447,332,2.546,333,2.399,335,2.313,337,1.814,338,2.192,340,2.463,341,2.252,347,2.192,349,1.814,350,2.192,351,2.527,358,1.814,385,1.814,395,2.737,410,1.532,411,1.641,412,1.435,413,2.349,414,2.349,434,2.737,462,2.952,468,1.766,472,2.994,551,1.127,552,1.641,609,2.088,611,2.308,612,3.724,613,3.303,614,3.049,615,3.049,616,3.049,617,3.049,618,3.049,619,2.602,620,5.023,621,2.308,622,5.023,623,2.308,624,4.349,625,2.602]],["title/injectables/LoggingService.html",[32,0.632,626,2.25]],["body/injectables/LoggingService.html",[0,0.186,3,0.282,4,0.282,5,0.25,8,0.674,9,3.318,13,0.46,16,0.538,17,0.022,18,1.142,21,0.665,24,0.439,28,0.282,29,2.15,30,0.017,31,0.017,32,1.01,34,1.689,44,1.207,53,0.963,54,0.71,55,0.963,66,0.908,72,0.757,82,1.207,114,2.15,250,2.117,548,3.992,565,3.592,567,4.334,568,4.887,569,4.887,570,5.881,572,4.887,573,5.596,574,3.129,575,3.592,626,3.592,627,3.899,628,4.568,629,3.899,630,4.568,631,4.568]],["title/modules/PipesModule.html",[140,1.002,171,2.25]],["body/modules/PipesModule.html",[0,0.2,3,0.303,4,0.303,5,0.268,17,0.022,24,0.495,28,0.303,30,0.018,31,0.018,72,0.812,140,1.671,142,1.921,143,2.487,147,3.098,153,2.815,154,2.307,155,2.307,157,3.006,169,2.841,171,4.494,188,2.841,195,3.22,423,3.821,425,3.711,469,3.358,632,4.184,633,4.903,634,4.184,635,4.903]],["title/injectables/SecretManagerService.html",[32,0.632,214,2.25]],["body/injectables/SecretManagerService.html",[0,0.126,3,0.191,4,0.191,5,0.169,8,0.604,13,0.311,14,1.83,16,0.604,17,0.022,18,1.107,21,0.814,23,1.725,24,0.454,28,0.191,30,0.013,31,0.013,32,0.776,34,1.142,44,0.928,47,1.375,51,0.961,52,1.375,53,0.928,54,0.956,55,0.928,66,1.112,67,2.811,70,2.811,71,0.964,72,0.512,75,1.453,79,1.142,82,0.928,86,1.283,91,1.356,108,1.563,114,1.453,116,1.83,191,3.184,214,3.509,222,2.635,223,5.249,228,2.717,312,2.69,323,1.945,326,3.831,355,3.333,379,1.551,457,3.71,472,3.012,508,3.509,548,2.551,565,3.509,567,3.333,576,1.937,577,3.015,580,4.477,581,3.758,582,4.477,583,4.775,585,3.831,626,3.219,636,4.477,637,2.337,638,5.131,639,3.087,640,5.131,641,3.087,642,3.087,643,4.403,644,3.087,645,3.087,646,5.594,647,5.131,648,5.594,649,3.087,650,2.635,651,3.087,652,3.087,653,3.087,654,2.635,655,3.087,656,2.635,657,2.635,658,2.635,659,3.087,660,3.087,661,3.087,662,3.758,663,3.087,664,2.337,665,3.087,666,3.087,667,2.337,668,2.337,669,3.087,670,3.087]],["title/modules/ServicesModule.html",[140,1.002,151,2.078]],["body/modules/ServicesModule.html",[0,0.214,3,0.323,4,0.323,5,0.286,17,0.022,24,0.509,28,0.323,30,0.018,31,0.018,72,0.867,140,1.738,142,2.05,151,3.605,188,3.032,195,2.817,196,3.584,203,3.961,576,4.165,626,3.903,629,4.466,671,5.233,672,5.233]],["title/injectables/TcpUsersClient.html",[32,0.632,194,2.456]],["body/injectables/TcpUsersClient.html",[0,0.079,3,0.119,4,0.119,5,0.106,8,0.567,10,1.209,11,1.018,13,0.194,14,1.283,15,2.782,16,0.567,17,0.022,18,1.019,21,0.861,23,0.757,24,0.442,28,0.119,29,0.909,30,0.009,31,0.009,32,0.544,34,0.714,44,0.65,47,0.963,50,1.344,51,0.824,52,0.963,53,1.014,54,0.748,55,1.014,66,1.273,71,0.603,72,0.32,79,0.714,80,0.853,82,1.135,86,1.398,91,1.163,108,1.937,110,1.51,111,1.55,113,1.119,114,0.909,116,1.283,130,2.55,136,1.952,165,1.141,190,1.429,191,3.361,193,0.97,194,3.014,228,3.016,250,1.141,261,1.68,264,0.757,266,1.626,310,1.462,311,2.335,312,2.325,314,3.883,315,2,316,1.602,317,2.417,318,1.602,319,2,320,1.648,323,1.363,324,3.755,325,2.633,327,3.883,328,2.633,330,1.787,332,2.132,333,2.409,335,1.283,336,1.363,337,1.283,338,1.55,339,1.648,340,2.186,341,2.014,343,1.452,344,1.661,345,1.363,346,2.761,347,1.55,349,1.283,350,1.55,351,1.885,356,2.633,357,1.648,358,1.283,361,1.648,362,1.648,363,1.462,365,1.787,366,1.462,367,1.661,368,1.648,369,1.322,371,1.462,376,0.97,377,1.039,378,4.106,379,3.333,381,4.106,383,1.648,385,0.803,389,1.648,512,4.378,585,2.113,662,1.648,673,5.154,674,3.853,675,4.4,676,4.4,677,3.085,678,3.085,679,1.931,680,1.931,681,3.085,682,4.4,683,1.931,684,1.931,685,1.931,686,1.931,687,1.931,688,3.085,689,1.931,690,5.129,691,5.129,692,4.378,693,3.853,694,1.931,695,1.931]],["title/classes/UpdateUserDto.html",[0,0.146,351,1.405]],["body/classes/UpdateUserDto.html",[0,0.215,2,2.643,3,0.325,4,0.325,5,0.287,8,0.62,17,0.022,24,0.479,28,0.325,30,0.018,31,0.018,42,3.3,50,1.47,226,3.048,261,1.837,263,3.982,264,2.446,266,1.475,351,2.446,358,2.187,696,4.49,697,6.241,698,5.261,699,5.261]],["title/classes/User.html",[0,0.146,266,0.847]],["body/classes/User.html",[0,0.155,2,1.906,3,0.234,4,0.234,5,0.207,8,0.447,9,2.941,13,0.382,14,2.11,16,0.772,17,0.022,18,1.127,19,2.874,21,0.889,23,2.394,24,0.389,28,0.354,30,0.015,31,0.015,54,0.789,86,0.948,110,2.769,161,2.379,190,1.364,266,1.658,267,3.918,268,3.995,269,4.361,340,1.877,341,1.998,469,4.184,508,2.379,700,2.597,701,4.82,702,6.109,703,5.214,704,3.793,705,3.842,706,3.793,707,3.793,708,4.332,709,3.793,710,6.368,711,3.793,712,4.33,713,2.871,714,2.871,715,6.109,716,2.597,717,3.237]],["title/classes/User-1.html",[0,0.122,95,2.053,266,0.708]],["body/classes/User-1.html",[0,0.19,2,1.674,3,0.206,4,0.206,5,0.182,8,0.742,9,2.691,13,0.335,14,1.931,16,0.717,17,0.022,18,1.093,19,2.723,21,0.886,23,2.267,24,0.467,28,0.206,30,0.014,31,0.014,47,1.04,51,0.87,52,1.45,53,0.702,54,0.946,55,0.702,82,0.702,86,0.833,136,1.91,226,1.93,261,2.021,266,1.715,267,3.663,268,3.817,269,4.167,272,3.964,273,3.964,281,3.964,294,2.521,297,4.564,300,3.516,323,2.052,340,2.139,341,1.868,358,1.385,410,1.674,456,2.521,462,2.691,469,3.963,574,2.281,703,4.938,705,4.38,708,3.964,718,2.843,719,4.645,720,4.645,721,5.378,722,3.331,723,4.645,724,3.331,725,6.085,726,3.331,727,4.645,728,4.645,729,4.645,730,4.645,731,4.645,732,3.331,733,3.331,734,4.645,735,2.521,736,3.331,737,3.331,738,3.331,739,3.331,740,3.331,741,3.331,742,3.331,743,3.331]],["title/classes/UserListDto.html",[0,0.146,367,1.931]],["body/classes/UserListDto.html",[0,0.205,2,2.521,3,0.31,4,0.31,5,0.274,8,0.591,13,0.505,14,2.522,16,0.591,17,0.022,21,0.73,24,0.385,28,0.31,29,2.361,30,0.018,31,0.018,190,1.548,264,2.377,266,1.639,336,2.68,367,3.266,412,2.361,602,4.154,744,5.177,745,4.281,746,6.066,747,5.017,748,6.066]],["title/injectables/UsersDatabaseService.html",[32,0.632,749,2.456]],["body/injectables/UsersDatabaseService.html",[0,0.095,3,0.143,4,0.143,5,0.127,8,0.653,13,0.234,16,0.618,17,0.022,18,1.012,21,0.806,24,0.425,28,0.143,30,0.01,31,0.01,32,0.628,34,0.858,44,0.751,47,1.112,50,1.548,51,1.144,52,1.112,53,1.106,54,0.816,55,1.106,66,1.239,67,2.784,70,3.132,72,0.384,82,1.168,86,1.312,91,1.464,95,2.44,108,1.921,110,1.907,111,2.445,114,1.092,136,1.829,161,1.456,190,1.237,228,2.938,266,1.697,312,0.965,315,2.023,316,1.481,318,1.481,319,2.023,332,2.591,333,2.521,335,1.481,337,1.481,338,1.79,340,2.202,341,2.275,347,1.79,349,1.481,350,1.79,379,2.638,385,2.023,412,1.092,435,2.235,472,1.918,549,2.97,595,2.235,597,4.507,598,3.041,600,3.974,602,2.44,605,2.697,607,2.697,621,2.697,664,2.697,667,2.697,668,3.683,712,3.283,713,1.757,714,1.757,721,1.981,735,1.757,749,3.332,750,4.924,751,1.981,752,2.321,753,5.541,754,2.321,755,4.337,756,4.866,757,2.321,758,2.321,759,2.321,760,2.321,761,2.321,762,2.321,763,1.757,764,1.757,765,2.321,766,2.321,767,2.321,768,4.337,769,3.563,770,3.563,771,3.563,772,3.563,773,2.321,774,2.321,775,2.321,776,2.321,777,3.563,778,2.321,779,2.321,780,3.563,781,2.321,782,2.321,783,2.321]],["title/injectables/UsersGrpcHealthCheck.html",[32,0.632,487,2.078]],["body/injectables/UsersGrpcHealthCheck.html",[0,0.146,3,0.343,4,0.221,5,0.195,8,0.653,11,2.125,13,0.359,16,0.574,17,0.022,18,0.919,21,0.709,24,0.457,28,0.221,30,0.014,31,0.014,32,0.859,34,1.32,40,3.005,42,3.056,44,1.027,47,1.521,51,1.039,52,1.521,53,1.027,54,0.757,55,1.027,66,0.969,71,1.114,72,0.591,79,1.32,80,1.577,82,1.027,91,0.943,108,1.361,110,1.399,111,1.794,116,1.484,165,2.544,189,3.479,190,1.437,191,2.623,228,2.451,250,2.515,312,1.484,323,2.153,333,1.909,343,2.292,345,2.451,363,2.702,365,3.453,366,2.702,379,1.794,463,3.337,468,2.823,487,3.453,488,4.198,497,3.688,503,2.445,504,4.198,548,2.068,549,2.445,664,2.702,667,2.702,668,2.702,784,3.047,785,5.546,786,4.872,787,5.546,788,4.872,789,3.57,790,3.57,791,4.872,792,3.57,793,4.872,794,3.57,795,3.57,796,3.57,797,3.57,798,4.872,799,3.57,800,3.57,801,3.57,802,3.57,803,3.57]],["title/controllers/UsersHttpController.html",[390,1.584,804,2.456]],["body/controllers/UsersHttpController.html",[0,0.068,3,0.103,4,0.103,5,0.091,8,0.849,13,0.167,16,0.664,17,0.022,18,0.907,19,2.253,21,0.697,24,0.388,28,0.103,30,0.008,31,0.008,44,0.576,47,0.519,50,1.338,51,1.056,52,0.519,53,0.85,54,0.786,55,0.85,60,1.715,66,1.148,69,2.845,71,0.519,72,0.276,73,0.895,74,0.964,75,0.783,82,1.066,91,1.177,108,1.815,116,0.691,136,1.946,165,1.49,190,1.222,226,0.964,250,1.287,261,1.767,264,1.071,266,1.692,267,2.76,268,2.528,300,3.624,312,0.691,315,1.676,316,1.447,317,2.025,318,1.447,319,2.103,323,0.735,326,3.859,332,1.991,333,2.208,335,1.136,336,1.208,337,1.136,338,0.836,340,2.436,341,2.159,343,1.897,344,2.17,345,1.538,346,2.397,347,0.836,349,1.851,350,0.836,351,2.145,358,1.136,376,1.373,377,1.472,385,1.851,390,1.538,392,0.895,393,3.465,395,2.183,410,0.836,411,0.895,412,0.783,413,1.472,414,0.895,415,1.043,432,1.259,433,1.472,434,1.043,435,1.043,436,1.259,439,1.259,457,2.183,458,2.383,462,3.062,472,2.17,492,1.419,497,4.918,537,1.259,575,1.715,600,2.069,602,1.872,605,1.259,607,2.069,613,1.259,623,3.051,804,1.872,805,1.419,806,1.663,807,4.031,808,2.733,809,2.733,810,5.635,811,4.031,812,5.284,813,4.031,814,4.031,815,1.663,816,1.663,817,1.663,818,5.635,819,2.733,820,1.663,821,4.788,822,1.663,823,1.663,824,4.788,825,3.48,826,4.788,827,4.788,828,4.788,829,4.788,830,4.788,831,5.059,832,2.733,833,4.788,834,1.663,835,1.663,836,1.663,837,2.733,838,1.663,839,1.663,840,1.663,841,1.663,842,1.663,843,1.663,844,1.663,845,1.663,846,2.733,847,2.733,848,1.663,849,4.031,850,1.663,851,5.059,852,4.031,853,6.544,854,1.663,855,1.663,856,1.663,857,1.663,858,4.031,859,1.663,860,1.663,861,1.663,862,3.48,863,1.663,864,1.663,865,1.663,866,1.663,867,1.663,868,1.663,869,1.419,870,1.419,871,1.419,872,1.419,873,1.419,874,1.139]],["title/modules/UsersModule.html",[140,1.002,152,2.25]],["body/modules/UsersModule.html",[0,0.168,3,0.254,4,0.254,5,0.225,17,0.022,24,0.549,28,0.254,30,0.016,31,0.016,54,0.639,72,0.682,140,1.496,142,1.612,143,2.226,147,2.962,148,3.884,152,4.342,153,2.52,154,1.936,155,1.936,157,2.691,160,3.511,161,2.581,169,2.384,170,3.511,190,0.918,195,2.215,196,3.668,203,4.054,266,0.972,391,3.735,392,2.883,414,2.883,415,2.581,433,2.883,610,3.359,701,3.114,716,3.668,735,3.114,749,3.668,763,3.114,764,3.114,804,4.078,875,4.114,876,4.114,877,4.114,878,4.078,879,4.114,880,5.954,881,4.114,882,4.114,883,4.114,884,4.114,885,4.114,886,4.114]],["title/injectables/UsersService.html",[32,0.632,433,1.931]],["body/injectables/UsersService.html",[0,0.099,3,0.15,4,0.15,5,0.133,8,0.665,13,0.245,16,0.631,17,0.022,18,1.025,21,0.821,23,1.953,24,0.433,28,0.15,30,0.011,31,0.011,32,0.651,34,0.899,39,1.408,44,0.778,47,1.153,50,1.393,51,1.218,52,1.153,53,1.13,54,0.833,55,1.13,66,1.201,71,0.759,72,0.403,82,1.189,86,1.41,91,1.18,108,1.889,110,0.953,111,1.855,114,1.144,116,1.011,136,1.936,190,1.113,228,2.873,250,1.843,261,1.971,266,1.691,312,1.011,315,2.072,316,1.535,318,1.535,319,2.228,332,2.346,333,2.649,335,2.072,337,1.535,338,1.855,340,2.333,341,2.11,347,1.855,349,1.535,350,1.855,351,2.368,355,2.794,358,1.535,379,2.504,385,1.535,395,2.316,410,1.221,411,1.309,412,1.144,413,1.987,415,1.525,433,2.683,434,2.316,462,2.586,472,2.683,549,3.671,595,3.127,597,2.794,610,1.525,612,3.151,613,2.794,620,4.574,621,3.379,622,4.574,623,1.84,624,5.005,625,3.809,763,1.84,764,1.84,887,2.075,888,2.431,889,2.431,890,3.692,891,4.463,892,2.431,893,2.431,894,2.431,895,2.431,896,2.431,897,2.431,898,2.431,899,2.431,900,2.431,901,2.431,902,4.463,903,2.431,904,2.431,905,2.431,906,2.431]],["title/controllers/UsersTcpController.html",[390,1.584,878,2.456]],["body/controllers/UsersTcpController.html",[0,0.097,1,3.763,3,0.147,4,0.147,5,0.13,8,0.28,11,0.784,13,0.239,16,0.28,17,0.022,19,2.631,21,0.814,24,0.496,28,0.147,30,0.011,31,0.011,44,0.764,47,0.741,50,1.562,51,0.994,52,0.741,53,1.118,54,0.824,55,1.118,66,1.286,71,0.741,72,0.393,82,1.179,86,0.593,91,1.402,108,1.946,110,1.421,116,0.987,128,1.376,130,2.101,134,2.027,136,2.07,165,1.341,190,1.184,193,1.193,228,1.944,250,0.878,261,1.537,264,1.724,266,1.622,312,0.987,315,2.047,316,2.047,317,2.81,318,2.205,319,2.325,323,1.049,330,2.101,332,2.325,333,2.534,335,1.508,336,1.602,337,1.508,340,2.151,341,1.537,343,1.706,344,1.952,345,1.602,346,3.131,349,1.508,351,1.724,358,1.508,359,2.651,367,1.952,369,1.626,376,1.193,377,1.278,379,1.193,385,0.987,390,2.176,392,1.278,393,3.984,395,2.76,399,2.745,402,2.745,404,2.745,406,2.027,407,2.027,408,3.095,409,3.095,410,1.193,411,1.278,412,1.117,413,1.952,414,1.278,415,1.49,416,1.797,417,2.027,418,2.275,419,2.027,420,2.027,421,2.027,423,1.952,424,2.027,425,1.797,426,2.027,427,2.027,428,2.027,429,1.797,430,2.027,432,1.797,433,1.952,434,1.49,435,1.49,436,1.797,437,2.027,438,2.027,439,1.797,440,2.027,441,2.027,442,2.027,451,2.027,537,2.745,557,3.095,575,2.275,692,4.772,869,3.095,870,3.095,871,3.095,872,3.095,873,3.095,874,1.626,878,2.484,907,2.027,908,5.592,909,2.374,910,2.374,911,2.374,912,2.374,913,2.374,914,2.374,915,5.817,916,2.374,917,2.374,918,2.374,919,2.374]],["title/coverage.html",[920,4.171]],["body/coverage.html",[0,0.258,1,1.925,5,0.168,6,2.618,7,2.618,11,1.688,16,0.361,17,0.022,30,0.013,31,0.013,32,1.202,33,1.778,35,3.499,36,2.618,37,1.652,40,1.937,43,1.778,51,0.575,98,2.618,119,1.925,120,2.618,128,1.778,129,2.618,165,1.134,189,1.925,190,0.978,194,2.101,214,1.925,261,1.072,262,2.618,263,3.318,266,1.036,295,2.101,309,2.618,310,3.318,351,1.202,353,2.101,359,1.652,365,1.778,367,1.652,390,2.465,391,1.925,393,3.502,394,2.618,413,1.652,414,1.652,418,1.925,423,1.652,433,1.652,452,2.618,460,2.618,461,2.618,487,1.778,488,2.322,490,2.101,491,2.618,504,2.322,529,2.618,530,2.618,551,2.269,553,3.499,554,2.618,565,1.925,566,3.318,576,1.925,577,2.101,578,3.318,579,3.318,586,2.322,587,2.618,595,1.925,596,3.318,610,1.925,611,3.318,626,1.925,627,2.618,636,2.322,637,2.322,673,2.618,696,2.618,700,3.002,716,2.101,718,2.618,744,2.618,745,2.618,749,2.101,750,2.618,751,2.618,784,2.618,804,2.101,805,2.618,874,4.202,878,2.101,887,2.618,907,2.618,920,2.618,921,3.068,922,3.068,923,3.068,924,7.405,925,4.383,926,4.383,927,5.9,928,4.383,929,6.459,930,2.618,931,2.618,932,6.877,933,6.136,934,6.136,935,5.113,936,3.068,937,2.618,938,2.618,939,2.618,940,4.761,941,4.761,942,2.618,943,2.618,944,2.618,945,2.618,946,3.068,947,3.068]],["title/dependencies.html",[143,1.792,236,2.269]],["body/dependencies.html",[0,0.238,17,0.022,27,3.212,30,0.017,31,0.017,72,0.777,76,3.212,77,3.212,78,3.212,113,2.717,143,1.95,161,2.942,163,3.55,193,2.356,226,2.717,294,3.55,456,3.55,476,4.002,503,3.212,526,4.002,580,3.55,582,3.55,650,4.002,713,3.55,948,4.69,949,4.69,950,4.69,951,4.69,952,4.69,953,4.69,954,6.618,955,4.69,956,4.69,957,4.69,958,4.69,959,4.69,960,4.69,961,4.69,962,4.69,963,4.69,964,4.69,965,4.69,966,4.69,967,4.69,968,4.69,969,4.69,970,4.69,971,4.69,972,4.69,973,4.69,974,4.69,975,4.69,976,4.69,977,4.69]],["title/miscellaneous/enumerations.html",[978,1.506,979,3.679]],["body/miscellaneous/enumerations.html",[10,1.605,11,1.352,13,0.412,17,0.022,23,2.9,30,0.016,31,0.016,69,2.205,73,2.875,75,2.963,79,1.975,121,2.806,125,3.101,220,4.558,391,2.57,636,3.101,637,4.043,654,3.496,656,4.558,657,5.574,658,3.496,978,2.058,979,3.496,980,4.096,981,6.696,982,4.096,983,4.096,984,3.496,985,5.341,986,4.096,987,4.096,988,4.096,989,3.101,990,5.942,991,4.096,992,5.942,993,4.096,994,5.942,995,4.096,996,5.942,997,4.096,998,5.942,999,4.096,1000,4.096,1001,4.096,1002,4.096,1003,4.096,1004,4.096,1005,4.096,1006,4.096,1007,4.096,1008,5.341,1009,5.341,1010,5.341,1011,5.341,1012,5.341,1013,5.341,1014,5.341,1015,4.096,1016,4.096]],["title/miscellaneous/functions.html",[978,1.506,1017,3.679]],["body/miscellaneous/functions.html",[8,0.706,13,0.365,16,0.779,17,0.021,18,1.188,23,1.928,29,2.316,30,0.014,31,0.014,40,1.601,50,1.012,51,0.679,53,1.321,54,1.061,55,1.321,66,1.192,70,1.82,108,1.012,110,1.42,111,2.473,121,2.481,130,2.099,136,1.196,191,2.649,242,4.895,264,2.534,265,3.092,274,4.2,275,4.2,285,4.77,292,4.746,336,1.601,376,1.82,462,2.851,463,3.37,473,3.092,548,3.474,574,2.481,575,3.087,609,3.37,874,3.37,930,3.092,931,4.77,938,3.092,939,4.2,940,3.092,941,5.351,942,4.2,943,4.2,944,4.2,945,4.2,978,1.82,1017,3.092,1018,3.623,1019,3.623,1020,5.996,1021,3.623,1022,3.623,1023,4.921,1024,3.623,1025,5.996,1026,3.623,1027,3.623,1028,3.623,1029,3.623,1030,3.623,1031,5.589,1032,3.623,1033,3.623,1034,3.623,1035,6.466,1036,4.921,1037,4.77,1038,5.996,1039,4.2,1040,3.623,1041,3.623,1042,6.269,1043,4.921,1044,3.623,1045,3.623,1046,3.623,1047,3.623,1048,3.623]],["title/index.html",[13,0.361,1049,3.061]],["body/index.html",[2,1.657,17,0.022,30,0.014,31,0.014,33,3.736,34,1.219,37,1.775,95,2.258,119,4.045,128,3.736,141,4.851,142,1.292,143,1.917,144,2.814,145,2.814,146,3.924,147,3.188,148,4.083,149,3.873,150,4.045,151,3.337,152,4.045,153,2.17,154,1.551,155,1.551,171,3.941,179,4.36,180,2.814,182,2.814,183,4.916,184,4.916,185,4.916,186,4.916,199,4.36,202,4.36,204,2.814,206,2.814,207,2.814,208,4.916,209,4.916,210,4.916,211,4.916,212,4.916,213,4.916,214,3.336,392,1.775,423,2.863,445,2.814,447,2.814,448,2.814,458,2.258,483,2.814,484,2.814,485,2.814,487,3.736,552,1.775,632,2.814,634,2.814,1049,2.814,1050,3.297,1051,3.297,1052,3.297,1053,3.297]],["title/modules.html",[142,1.915]],["body/modules.html",[17,0.018,30,0.018,31,0.018,141,3.499,142,2.002,146,2.96,147,2.257,148,2.96,149,2.96,150,3.205,151,2.96,152,3.205,171,3.205,1054,7.218,1055,7.218,1056,7.218,1057,7.265,1058,5.109,1059,5.109]],["title/properties.html",[14,1.792,236,2.269]],["body/properties.html",[8,0.661,14,2.333,17,0.021,30,0.019,31,0.019,457,3.52,1060,5.61,1061,5.61,1062,5.61,1063,5.61]],["title/miscellaneous/typealiases.html",[978,1.506,1064,4.311]],["body/miscellaneous/typealiases.html",[13,0.565,16,0.763,17,0.019,30,0.019,31,0.019,190,1.252,700,3.842,712,4.247,714,4.906,978,2.819,1065,5.61,1066,4.788]],["title/miscellaneous/variables.html",[978,1.506,989,3.263]],["body/miscellaneous/variables.html",[13,0.404,16,0.764,17,0.022,18,1.035,23,2.609,29,3.133,30,0.015,31,0.015,54,0.624,75,2.479,190,0.896,292,5.04,295,4.029,414,3.167,457,2.517,458,2.748,463,2.748,468,3.619,508,2.517,553,2.517,566,3.037,576,3.69,578,3.037,579,3.988,586,4.453,596,3.988,608,5.02,609,4.278,610,3.69,611,3.037,619,3.424,700,2.748,701,3.037,705,3.988,716,3.608,717,3.424,937,3.424,978,2.016,984,3.424,989,3.037,1037,3.424,1039,3.424,1066,3.424,1067,4.012,1068,4.012,1069,4.012,1070,4.012,1071,5.882,1072,4.012,1073,4.012,1074,5.882,1075,4.012,1076,4.012,1077,5.268,1078,4.012,1079,4.012,1080,4.012,1081,4.012,1082,5.268,1083,4.012,1084,4.012,1085,4.012,1086,4.012,1087,4.012,1088,4.012,1089,4.012,1090,4.012]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0.0.0.0",{"_index":259,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.0.1",{"_index":1060,"title":{},"body":{"properties.html":{}}}],["0.1.0",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":95,"title":{"classes/User-1.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/UsersDatabaseService.html":{},"index.html":{}}}],["1.7.0",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":772,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["12",{"_index":1051,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":818,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["201",{"_index":808,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["2048",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":728,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":830,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4",{"_index":458,"title":{},"body":{"classes/GuidDto.html":{},"controllers/UsersHttpController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["4.1.2",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":812,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4027",{"_index":729,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":810,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["404",{"_index":833,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["409",{"_index":814,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4096",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":828,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["5",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1053,"title":{},"body":{"index.html":{}}}],["6.1.2",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1052,"title":{},"body":{"index.html":{}}}],["7.2.0",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1050,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":827,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["ab9d",{"_index":829,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["abstract",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["access",{"_index":326,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{}}}],["accessing",{"_index":355,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["addapikey",{"_index":253,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["address",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addtag('users",{"_index":252,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["aliases",{"_index":1065,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":623,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":10,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":996,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["apikeydto",{"_index":1,"title":{"classes/ApiKeyDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apikeydto).apikey",{"_index":139,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["apikeygrpcguard",{"_index":33,"title":{"injectables/ApiKeyGrpcGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeyguard",{"_index":43,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["apikeyhttpguard",{"_index":119,"title":{"injectables/ApiKeyHttpGuard.html":{}},"body":{"injectables/ApiKeyHttpGuard.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeys",{"_index":92,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys.length",{"_index":94,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys[0].tostring",{"_index":96,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeytcpguard",{"_index":128,"title":{"injectables/ApiKeyTcpGuard.html":{}},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["apioperation",{"_index":851,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiparam",{"_index":852,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiproperty",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":853,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity",{"_index":854,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":855,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["application",{"_index":336,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":141,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":89,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["args",{"_index":138,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["array",{"_index":337,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["async",{"_index":228,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["author",{"_index":1063,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1059,"title":{},"body":{"modules.html":{}}}],["await",{"_index":379,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ba47",{"_index":730,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":625,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["based",{"_index":506,"title":{},"body":{"controllers/HealthController.html":{}}}],["bcrypt",{"_index":476,"title":{},"body":{"injectables/HashPipe.html":{},"dependencies.html":{}}}],["body",{"_index":847,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{}}}],["bootstrap",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1057,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1054,"title":{},"body":{"modules.html":{}}}],["build",{"_index":255,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["call",{"_index":542,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":538,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":101,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["canactivate(context",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["catch",{"_index":667,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["catcherror",{"_index":545,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":547,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":727,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":824,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["check",{"_index":345,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["check.'})@apiresponse({status",{"_index":836,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["check.ts",{"_index":784,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{}}}],["check.ts:14",{"_index":790,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["check.ts:31",{"_index":792,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["checking",{"_index":493,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks",{"_index":496,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["checks.module.ts",{"_index":489,"title":{},"body":{"modules/HealthChecksModule.html":{}}}],["checks/health",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{}}}],["checks/users",{"_index":504,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{}}}],["class",{"_index":0,"title":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":1035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":191,"title":{},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"miscellaneous/functions.html":{}}}],["client.getservice('grpcusersservice",{"_index":373,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.interface",{"_index":366,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["client.interface.ts",{"_index":587,"title":{},"body":{"interfaces/IUsersClient.html":{},"coverage.html":{}}}],["client.interface.ts:14",{"_index":589,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:20",{"_index":590,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:27",{"_index":591,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:35",{"_index":594,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:42",{"_index":593,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:48",{"_index":592,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:53",{"_index":588,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.ts",{"_index":310,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["client.ts:105",{"_index":686,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:110",{"_index":342,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:117",{"_index":685,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:118",{"_index":329,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:127",{"_index":679,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:135",{"_index":680,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:19",{"_index":677,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:23",{"_index":354,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:28",{"_index":322,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:37",{"_index":683,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:51",{"_index":331,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:57",{"_index":684,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:60",{"_index":334,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:71",{"_index":339,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.ts:84",{"_index":352,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:86",{"_index":687,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:98",{"_index":348,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client_grpc_proxy",{"_index":1009,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["client_tcp_proxy",{"_index":1010,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clientgrpcproxy",{"_index":321,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientinjectionname",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clientproxy",{"_index":676,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["clientproxyfactory",{"_index":192,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(grpcconfig",{"_index":198,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(tcpconfig",{"_index":201,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clients",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clients/clients.module",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthChecksModule.html":{}}}],["clientservice",{"_index":313,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientsmodule",{"_index":146,"title":{"modules/ClientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/HealthChecksModule.html":{},"index.html":{},"modules.html":{}}}],["clienttest",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["clienttest(clientinjectionname",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":314,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["cloud",{"_index":581,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":650,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["cls",{"_index":1038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_clientsmodule",{"_index":180,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_exports",{"_index":182,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_imports",{"_index":181,"title":{},"body":{"modules/ClientsModule.html":{}}}],["cluster_configurationmodule",{"_index":204,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_exports",{"_index":206,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_imports",{"_index":205,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["cluster_configurationmodule_providers",{"_index":207,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_guardsmodule",{"_index":445,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_exports",{"_index":447,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_imports",{"_index":446,"title":{},"body":{"modules/GuardsModule.html":{}}}],["cluster_guardsmodule_providers",{"_index":448,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_healthchecksmodule",{"_index":483,"title":{},"body":{"modules/HealthChecksModule.html":{},"index.html":{}}}],["cluster_healthchecksmodule_exports",{"_index":484,"title":{},"body":{"modules/HealthChecksModule.html":{},"index.html":{}}}],["cluster_healthchecksmodule_imports",{"_index":486,"title":{},"body":{"modules/HealthChecksModule.html":{}}}],["cluster_healthchecksmodule_providers",{"_index":485,"title":{},"body":{"modules/HealthChecksModule.html":{},"index.html":{}}}],["cluster_healthmodule",{"_index":522,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_imports",{"_index":523,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_pipesmodule",{"_index":632,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_pipesmodule_imports",{"_index":633,"title":{},"body":{"modules/PipesModule.html":{}}}],["cluster_pipesmodule_providers",{"_index":634,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":875,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":876,"title":{},"body":{"modules/UsersModule.html":{}}}],["cmd",{"_index":692,"title":{},"body":{"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["cofiguration",{"_index":509,"title":{},"body":{"controllers/HealthController.html":{}}}],["configmodule",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":216,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.api_key",{"_index":227,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.connection_string",{"_index":230,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.grpc_port",{"_index":233,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.hash_rounds",{"_index":244,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.project_name",{"_index":246,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.secrets_from_env",{"_index":247,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.tcp_port",{"_index":256,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.use_swagger",{"_index":260,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configuration",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration/configuration.module",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["configuration/injectionnames.enum",{"_index":80,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["configurationmodule",{"_index":147,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["configured",{"_index":325,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["conflictexception",{"_index":621,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":675,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connected",{"_index":682,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connection",{"_index":585,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["connection_string",{"_index":657,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(context.getargs",{"_index":135,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["console.log(message",{"_index":630,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":631,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":86,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constants",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_min_length",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_min_length",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":47,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constructor(@inject(injectionnames.api_key",{"_index":84,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(client",{"_index":320,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["constructor(databaseservice",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(grpcusersclient",{"_index":789,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["constructor(hashrounds",{"_index":465,"title":{},"body":{"injectables/HashPipe.html":{}}}],["constructor(loggingservice",{"_index":639,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["constructor(serviceapikey",{"_index":48,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(user",{"_index":720,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":752,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":376,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":41,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.getargs().find((args",{"_index":137,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["controller",{"_index":390,"title":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["controller('health",{"_index":505,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('users",{"_index":856,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["controller.interface",{"_index":364,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["controller.interface.ts",{"_index":554,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["controller.interface.ts:17",{"_index":555,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:24",{"_index":558,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:32",{"_index":559,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:41",{"_index":564,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:49",{"_index":563,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:57",{"_index":561,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controllers",{"_index":392,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"index.html":{}}}],["controllers/users",{"_index":880,"title":{},"body":{"modules/UsersModule.html":{}}}],["coverage",{"_index":920,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":50,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["create(@body",{"_index":859,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["create(createuserdto",{"_index":613,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":330,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["create(user",{"_index":598,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":600,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["creates",{"_index":323,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["createuserdto",{"_index":261,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["creating",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":395,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["current",{"_index":64,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["custom",{"_index":785,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["data",{"_index":136,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":779,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":478,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":481,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":597,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":764,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":596,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":599,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":601,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":603,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":606,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:47",{"_index":604,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":882,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":751,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:12",{"_index":754,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:28",{"_index":757,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:46",{"_index":758,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:57",{"_index":759,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:70",{"_index":761,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:88",{"_index":760,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":735,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaultvalue",{"_index":693,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete",{"_index":349,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete(':guid",{"_index":866,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":839,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["deleted",{"_index":605,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["deleted.'})@apiresponse({status",{"_index":840,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["depedency",{"_index":619,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":143,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":608,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":9,"title":{},"body":{"classes/ApiKeyDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["different",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":870,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["display",{"_index":705,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["display_name_max_length",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["doc",{"_index":517,"title":{},"body":{"controllers/HealthController.html":{}}}],["document",{"_index":712,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["document.save",{"_index":767,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":225,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["documents",{"_index":773,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":775,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["down",{"_index":802,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["dto",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":438,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/api",{"_index":916,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["dto/create",{"_index":410,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/guid.dto",{"_index":416,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/update",{"_index":411,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/user",{"_index":417,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ef3aa7fd1bc5",{"_index":731,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":826,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["email",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["email_max_length",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emails",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":346,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["entities/user.entity",{"_index":412,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["entity",{"_index":719,"title":{},"body":{"classes/User-1.html":{}}}],["enum",{"_index":655,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":979,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":221,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["environment",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["envnames",{"_index":220,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/enumerations.html":{}}}],["err",{"_index":668,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["err.code",{"_index":771,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.message",{"_index":803,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["err.name",{"_index":769,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":670,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":548,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":869,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["eslint/no",{"_index":873,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["establish",{"_index":681,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["example",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["exception.interceptor",{"_index":420,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exception.interceptor.ts",{"_index":530,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":539,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":725,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":777,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execute",{"_index":343,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["execution",{"_index":65,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":58,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":607,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["exists",{"_index":472,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":1039,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exports",{"_index":188,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/PipesModule.html":{},"modules/ServicesModule.html":{}}}],["express",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["factory",{"_index":1042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["failed",{"_index":801,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["fails",{"_index":1046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":111,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":1043,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":429,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["find",{"_index":335,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["find((arg",{"_index":88,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["findall",{"_index":315,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findall(data",{"_index":557,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone",{"_index":316,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(data",{"_index":399,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(guid",{"_index":338,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["firstvaluefrom",{"_index":356,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["firstvaluefrom(response",{"_index":381,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["forbidden",{"_index":821,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":811,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found",{"_index":831,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found.'})@apiresponse({status",{"_index":844,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["function",{"_index":874,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1017,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":861,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get(':guid')@apioperation({description",{"_index":823,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check",{"_index":868,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check')@apioperation({description",{"_index":835,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@apioperation({description",{"_index":816,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@healthcheck",{"_index":494,"title":{},"body":{"controllers/HealthController.html":{}}}],["getargs",{"_index":87,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["getconnectionstring",{"_index":583,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["gets",{"_index":643,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":638,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":644,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["given",{"_index":462,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":580,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":1058,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":40,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["grpc.controller",{"_index":883,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":394,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:100",{"_index":401,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:49",{"_index":397,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":398,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":400,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":405,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":403,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard",{"_index":422,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{}}}],["grpc.guard.ts",{"_index":36,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"coverage.html":{}}}],["grpc.guard.ts:11",{"_index":49,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:25",{"_index":59,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc/grpc",{"_index":77,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["grpc_config",{"_index":1012,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_port",{"_index":1000,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_client",{"_index":1008,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_service",{"_index":1016,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpcconfig",{"_index":197,"title":{},"body":{"modules/ClientsModule.html":{}}}],["grpcmethod",{"_index":396,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersclient",{"_index":189,"title":{"injectables/GrpcUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{}}}],["grpcusersservice",{"_index":391,"title":{"controllers/GrpcUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["guard",{"_index":37,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":97,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["guards/api",{"_index":421,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guards/guards.module",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["guardsmodule",{"_index":148,"title":{"modules/GuardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuardsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["guid",{"_index":341,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guiddto",{"_index":359,"title":{"classes/GuidDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["handler",{"_index":543,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":1036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":469,"title":{},"body":{"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":464,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":423,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["hashrounds",{"_index":467,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":475,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":479,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":482,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":74,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["headernames",{"_index":73,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["headernames.x_api_key",{"_index":254,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["headers",{"_index":125,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"controllers/HealthController.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":127,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["health",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["health.controller",{"_index":528,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":317,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["healthcheck(data",{"_index":560,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["healthcheckerror",{"_index":793,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["healthcheckresult",{"_index":502,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":499,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthchecksmodule",{"_index":149,"title":{"modules/HealthChecksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["healthcontroller",{"_index":490,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicator",{"_index":787,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["healthindicatorresult",{"_index":794,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["healthmodule",{"_index":150,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["healthy",{"_index":837,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["helper.ts",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["host",{"_index":258,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["http",{"_index":61,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["http.controller",{"_index":881,"title":{},"body":{"modules/UsersModule.html":{}}}],["http.controller.ts",{"_index":805,"title":{},"body":{"controllers/UsersHttpController.html":{},"coverage.html":{}}}],["http.controller.ts:126",{"_index":845,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:149",{"_index":841,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:162",{"_index":838,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:59",{"_index":815,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:75",{"_index":822,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:99",{"_index":834,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.guard",{"_index":450,"title":{},"body":{"modules/GuardsModule.html":{}}}],["http.guard.ts",{"_index":120,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["http.guard.ts:10",{"_index":122,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:24",{"_index":123,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["http://localhost:3000/users/health/check",{"_index":520,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode",{"_index":850,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpcode(201",{"_index":857,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpexception",{"_index":533,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":418,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":540,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httphealthindicator",{"_index":500,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":525,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://michaeldiers.github.io/users",{"_index":518,"title":{},"body":{"controllers/HealthController.html":{}}}],["id",{"_index":340,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["identifier",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["igrpcusersservice",{"_index":353,"title":{"interfaces/IGrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["iloggingservice",{"_index":565,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":114,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["imports",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":68,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["includes",{"_index":556,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":688,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["indicator",{"_index":786,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["initialized",{"_index":723,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":71,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["inject(injectionnames.api_key",{"_index":371,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.client_grpc_proxy",{"_index":370,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["inject(injectionnames.client_tcp_proxy",{"_index":689,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.grpc_users_client",{"_index":795,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["inject(injectionnames.hash_rounds",{"_index":477,"title":{},"body":{"injectables/HashPipe.html":{}}}],["inject(injectionnames.project_name",{"_index":660,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(injectionnames.tcp_config",{"_index":510,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(logging_service",{"_index":659,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(users_database_service",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":436,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["injectable",{"_index":32,"title":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":34,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":609,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectionnames",{"_index":79,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"miscellaneous/enumerations.html":{}}}],["injectionnames.api_key",{"_index":208,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.client_grpc_proxy",{"_index":183,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.client_tcp_proxy",{"_index":184,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.connection_string",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.enum",{"_index":222,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["injectionnames.grpc_config",{"_index":199,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_users_client",{"_index":185,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.hash_rounds",{"_index":209,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.project_name",{"_index":210,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.secrets_from_env",{"_index":211,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.swagger_config",{"_index":212,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_config",{"_index":202,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_users_client",{"_index":186,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.use_swagger",{"_index":213,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectmodel",{"_index":762,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":765,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":52,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["instanceof",{"_index":90,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["intercept",{"_index":535,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":536,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":531,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":419,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["interface",{"_index":551,"title":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":552,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":763,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":415,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["invalid",{"_index":858,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":813,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["isconnected",{"_index":674,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["isecretmanagerservice",{"_index":577,"title":{"interfaces/ISecretManagerService.html":{}},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["isemail",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":788,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["ishealthy(key",{"_index":791,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["isstring()@isuuid",{"_index":20,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["isstring()@isuuid(constants.uuid_version",{"_index":454,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":26,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{}}}],["isuuid(constants.uuid_version",{"_index":459,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersclient",{"_index":365,"title":{"interfaces/IUsersClient.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{}}}],["iusersdatabaseservice",{"_index":595,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":413,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["jane",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":218,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["join(__dirname",{"_index":238,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["js",{"_index":78,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["key",{"_index":11,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["key.dto",{"_index":134,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{}}}],["key.dto.ts",{"_index":7,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["key.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["key.guard",{"_index":81,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["key.guard.ts",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:20",{"_index":105,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:37",{"_index":112,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:8",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["known",{"_index":748,"title":{},"body":{"classes/UserListDto.html":{}}}],["latest",{"_index":646,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["length(constants.display_name_min_length",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.password_min_length",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1061,"title":{},"body":{"properties.html":{}}}],["line",{"_index":871,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["list",{"_index":602,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["list.dto",{"_index":369,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["list.dto.ts",{"_index":745,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:10",{"_index":747,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":819,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["loader",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["localhost:${port",{"_index":241,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["log",{"_index":572,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":568,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":569,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":567,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":629,"title":{},"body":{"injectables/LoggingService.html":{},"modules/ServicesModule.html":{}}}],["logging.service",{"_index":672,"title":{},"body":{"modules/ServicesModule.html":{}}}],["logging_service",{"_index":576,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingservice",{"_index":626,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["logic",{"_index":612,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":582,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.interface",{"_index":652,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.interface.ts",{"_index":579,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.interface.ts:13",{"_index":584,"title":{},"body":{"interfaces/ISecretManagerService.html":{}}}],["manager.service",{"_index":224,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["manager.service.ts",{"_index":637,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:21",{"_index":641,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:34",{"_index":649,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:40",{"_index":642,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:49",{"_index":645,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":573,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["messagepattern",{"_index":915,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["messagepattern({cmd",{"_index":908,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":93,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["method",{"_index":1048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":44,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["microserviceconfigname",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["microservicehealthindicator",{"_index":501,"title":{},"body":{"controllers/HealthController.html":{}}}],["microservices",{"_index":507,"title":{},"body":{"controllers/HealthController.html":{}}}],["minimum",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":978,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["model",{"_index":753,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":140,"title":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":142,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":508,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":713,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosehealthindicator",{"_index":498,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":885,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":770,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":75,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["names.ts",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":544,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/axios",{"_index":526,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":72,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":193,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":226,"title":{},"body":{"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":503,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/UsersGrpcHealthCheck.html":{},"dependencies.html":{}}}],["new",{"_index":51,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":537,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["next.handle().pipe",{"_index":546,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["notfoundexception",{"_index":624,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":242,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":463,"title":{},"body":{"injectables/HashPipe.html":{},"injectables/UsersGrpcHealthCheck.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":109,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{}}}],["operations",{"_index":435,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["optional",{"_index":55,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":235,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{}}}],["options.headers[headernames.x_api_key",{"_index":511,"title":{},"body":{"controllers/HealthController.html":{}}}],["otherwise",{"_index":70,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["output",{"_index":1032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1049,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":236,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/ConfigurationModule.html":{}}}],["param",{"_index":82,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["param('guid",{"_index":862,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["parameter",{"_index":12,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["parseint(rounds",{"_index":245,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseuuidpipe",{"_index":849,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["part",{"_index":1040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":698,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":699,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["password_max_length",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":848,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid",{"_index":864,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":842,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["path",{"_index":219,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["pipe",{"_index":425,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{}}}],["pipe.ts",{"_index":461,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:23",{"_index":471,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:9",{"_index":466,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":424,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["pipes/pipes.module",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["pipesmodule",{"_index":171,"title":{"modules/PipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PipesModule.html":{},"index.html":{},"modules.html":{}}}],["pipetransform",{"_index":474,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":232,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["post",{"_index":846,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["post()@httpcode(201)@apioperation({description",{"_index":806,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["predefined",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":492,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["private",{"_index":312,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["processed",{"_index":562,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["project_name",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projectname",{"_index":640,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["projects/${this.projectname}/secrets/${secretname}/versions/latest",{"_index":663,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":108,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":443,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["prop",{"_index":710,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":702,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["protected",{"_index":45,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["proto/users.proto",{"_index":239,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["protopath",{"_index":237,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["provide",{"_index":196,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":39,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":195,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/PipesModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":434,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["providing",{"_index":746,"title":{},"body":{"classes/UserListDto.html":{}}}],["proxy",{"_index":324,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rcp",{"_index":62,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["read",{"_index":60,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersHttpController.html":{}}}],["readapikey",{"_index":46,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readapikey(context",{"_index":57,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readonly",{"_index":116,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["reflect",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":318,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(data",{"_index":402,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(guid",{"_index":347,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":69,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":126,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["requests",{"_index":63,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["required",{"_index":715,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resolve",{"_index":444,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["response",{"_index":378,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["result",{"_index":333,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["result.acknowledged",{"_index":780,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":783,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.matchedcount",{"_index":781,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":1033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":30,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":541,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":532,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":91,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["returned",{"_index":832,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["rounds",{"_index":243,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{}}}],["rpcexception",{"_index":534,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":550,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["running",{"_index":800,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["rxjs",{"_index":113,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"dependencies.html":{}}}],["schema",{"_index":701,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":711,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":717,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":223,"title":{},"body":{"modules/ConfigurationModule.html":{},"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["secret_manager_service",{"_index":586,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretmanagerservice",{"_index":214,"title":{"injectables/SecretManagerService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"index.html":{}}}],["secretmanagerservice.getconnectionstring",{"_index":231,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["secretmanagerserviceclient",{"_index":648,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":647,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":656,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":654,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets_from_env",{"_index":994,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secretsfromenv",{"_index":229,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["send",{"_index":691,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["sent",{"_index":328,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["server",{"_index":327,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["service",{"_index":250,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["serviceapikey",{"_index":56,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["servicenames",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["services",{"_index":121,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["services/logging.interface",{"_index":653,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["services/secret",{"_index":651,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["services/services.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["servicesmodule",{"_index":151,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["setdescription('the",{"_index":249,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["settitle('usersservice",{"_index":248,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["setup",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.0",{"_index":251,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["simple",{"_index":344,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["single",{"_index":453,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["src/.../constants.ts",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../header",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../injectionnames.enum.ts",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../service",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1066,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["src/clients/clients.module.ts",{"_index":187,"title":{},"body":{"modules/ClientsModule.html":{}}}],["src/clients/grpc",{"_index":309,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{}}}],["src/clients/tcp",{"_index":673,"title":{},"body":{"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["src/configuration/configuration.module.ts",{"_index":215,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/configuration/env",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/injectionnames.enum.ts",{"_index":1007,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/secret",{"_index":636,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":35,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/guards/guards.module.ts",{"_index":449,"title":{},"body":{"modules/GuardsModule.html":{}}}],["src/header",{"_index":1004,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/health",{"_index":488,"title":{},"body":{"modules/HealthChecksModule.html":{},"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":491,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:45",{"_index":495,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":524,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/interceptors/http",{"_index":529,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":460,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/pipes/pipes.module.ts",{"_index":635,"title":{},"body":{"modules/PipesModule.html":{}}}],["src/service",{"_index":1015,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/services/logging.interface.ts",{"_index":566,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/logging.interface.ts:15",{"_index":571,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/services/logging.service.ts",{"_index":627,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/services/logging.service.ts:14",{"_index":628,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/services/secret",{"_index":578,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/services.module.ts",{"_index":671,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/users/controllers/users",{"_index":393,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["src/users/database/user.schema.ts",{"_index":700,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":704,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":706,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":707,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:36",{"_index":709,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/api",{"_index":6,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":452,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:13",{"_index":455,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/update",{"_index":696,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":744,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":718,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":722,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":724,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":726,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":732,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":733,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":553,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":611,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":614,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":615,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":616,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:43",{"_index":618,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:50",{"_index":617,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":750,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["src/users/users.module.ts",{"_index":877,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:104",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/validation/constants.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":570,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":497,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{}}}],["stopatfirsterror",{"_index":426,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":942,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super",{"_index":796,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["super(serviceapikey",{"_index":85,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["support",{"_index":1055,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1056,"title":{},"body":{"modules.html":{}}}],["swagger_config",{"_index":1014,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["tcp",{"_index":130,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/ClientsModule.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["tcp.controller",{"_index":884,"title":{},"body":{"modules/UsersModule.html":{}}}],["tcp.controller.ts",{"_index":907,"title":{},"body":{"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["tcp.controller.ts:103",{"_index":912,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:50",{"_index":909,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:60",{"_index":910,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:72",{"_index":911,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:83",{"_index":914,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:93",{"_index":913,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard",{"_index":451,"title":{},"body":{"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{}}}],["tcp.guard.ts",{"_index":129,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["tcp.guard.ts:10",{"_index":131,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:24",{"_index":132,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp_config",{"_index":1013,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_port",{"_index":1002,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_users_client",{"_index":1011,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcpconfig",{"_index":200,"title":{},"body":{"modules/ClientsModule.html":{},"controllers/HealthController.html":{}}}],["tcpusersclient",{"_index":194,"title":{"injectables/TcpUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":527,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../client.tester.ts",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/client.tester.ts",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/test",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":1041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":945,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":1044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":1045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["this.apikey",{"_index":512,"title":{},"body":{"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client",{"_index":662,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.accesssecretversion",{"_index":665,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.close",{"_index":389,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.connect",{"_index":695,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.clientservice",{"_index":372,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.create(data",{"_index":380,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findall",{"_index":382,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findone(dto",{"_index":384,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.healthcheck",{"_index":388,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.remove(dto",{"_index":387,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.update(dto",{"_index":386,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.connect",{"_index":690,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.databaseservice.create(user",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":736,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":738,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":661,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.getstatus(key",{"_index":798,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["this.grpcusersclient.healthcheck",{"_index":797,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["this.guid",{"_index":742,"title":{},"body":{"classes/User-1.html":{}}}],["this.hashrounds",{"_index":480,"title":{},"body":{"injectables/HashPipe.html":{}}}],["this.healthcheckservice.check",{"_index":513,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httphealthindicator.pingcheck",{"_index":516,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isconnected",{"_index":694,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":669,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.metadata",{"_index":374,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.metadata.add(headernames.x_api_key",{"_index":375,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.microservicehealthindicator.pingcheck('tcp",{"_index":514,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mongoosehealthindicator.pingcheck('mongoose",{"_index":519,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.password",{"_index":740,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":117,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.serviceapikey",{"_index":118,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.tcpconfig",{"_index":515,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.usermodel(user",{"_index":766,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":782,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":774,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":776,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":778,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersgrpchealthcheck.ishealthy('grpc",{"_index":521,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":860,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.create(data",{"_index":437,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findall",{"_index":439,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":440,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(guid",{"_index":863,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":442,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.remove(guid",{"_index":867,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.update(data.guid",{"_index":441,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.update(guid",{"_index":865,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["throw",{"_index":549,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":622,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":620,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{}}}],["transform(value",{"_index":470,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":473,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["transport",{"_index":217,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.grpc",{"_index":234,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.tcp",{"_index":257,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["true",{"_index":110,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":664,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1064,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":872,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["undefined",{"_index":67,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["undefined})@apiresponse({status",{"_index":820,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["unique",{"_index":703,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":428,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["unlicensed",{"_index":1062,"title":{},"body":{"properties.html":{}}}],["unqiue",{"_index":708,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unused",{"_index":918,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["up",{"_index":799,"title":{},"body":{"injectables/UsersGrpcHealthCheck.html":{}}}],["update",{"_index":319,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(data",{"_index":404,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(guid",{"_index":350,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":385,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["updated.'})@apiresponse({status",{"_index":843,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["updateuserdto",{"_index":351,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["updating",{"_index":697,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":240,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["use",{"_index":678,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["use_swagger",{"_index":998,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":203,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":468,"title":{},"body":{"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{}}}],["useguards",{"_index":406,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useguards(apikeygrpcguard",{"_index":431,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeytcpguard",{"_index":917,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["useinterceptors",{"_index":407,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useinterceptors(new",{"_index":430,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["usepipes",{"_index":408,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user",{"_index":266,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":825,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.'})@apiresponse({status",{"_index":807,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.displayname",{"_index":737,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":358,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user.dto.ts",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":739,"title":{},"body":{"classes/User-1.html":{}}}],["user.name",{"_index":886,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":741,"title":{},"body":{"classes/User-1.html":{}}}],["usercontroller",{"_index":432,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["userdatabase",{"_index":721,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":743,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":714,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":756,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":768,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":367,"title":{"classes/UserListDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["userlistdto.users",{"_index":383,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["usermodel",{"_index":755,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":190,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersGrpcHealthCheck.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users.'})@apiresponse({status",{"_index":817,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["users.service",{"_index":879,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/api",{"_index":133,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["users/dto/create",{"_index":357,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/guid.dto",{"_index":360,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["users/dto/update",{"_index":361,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/user",{"_index":368,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/entities/user.entity",{"_index":362,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/interfaces/users",{"_index":363,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersGrpcHealthCheck.html":{}}}],["users/users.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["users_api_key",{"_index":997,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_database_service",{"_index":610,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_grpc_port",{"_index":1001,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_hash_rounds",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_project_name",{"_index":993,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_secrets_from_env",{"_index":995,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_service",{"_index":414,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_tcp_port",{"_index":1003,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_use_swagger",{"_index":999,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userschema",{"_index":716,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdatabaseservice",{"_index":749,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersgrpchealthcheck",{"_index":487,"title":{"injectables/UsersGrpcHealthCheck.html":{}},"body":{"modules/HealthChecksModule.html":{},"controllers/HealthController.html":{},"injectables/UsersGrpcHealthCheck.html":{},"coverage.html":{},"index.html":{}}}],["usershttpcontroller",{"_index":804,"title":{"controllers/UsersHttpController.html":{}},"body":{"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":152,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":433,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usersserviceconnectionstring",{"_index":658,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["userstcpcontroller",{"_index":878,"title":{"controllers/UsersTcpController.html":{}},"body":{"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user})@apiresponse({status",{"_index":809,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["using",{"_index":311,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["uuid",{"_index":456,"title":{},"body":{"classes/GuidDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuids",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":734,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":83,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validate",{"_index":106,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validated",{"_index":377,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["validating",{"_index":38,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validation",{"_index":1037,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validation/constants",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["validationpipe",{"_index":409,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"dependencies.html":{}}}],["value",{"_index":23,"title":{},"body":{"classes/ApiKeyDto.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["variable",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":989,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":919,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["version",{"_index":457,"title":{},"body":{"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version.payload.data.tostring",{"_index":666,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":575,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":427,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["whose",{"_index":332,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["x",{"_index":1006,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":1005,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":574,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthChecksModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiKeyDto.html":{"url":"classes/ApiKeyDto.html","title":"class - ApiKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/api-key.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes an api key parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/api-key.dto.ts:12\n                        \n                    \n\n            \n                \n                    The value of the api key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * Describes an api key parameter.\n */\nexport default class ApiKeyDto {\n  /**\n   * The value of the api key.\n   */\n  @IsString()\n  @IsUUID()\n  apiKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyGrpcGuard.html":{"url":"injectables/ApiKeyGrpcGuard.html","title":"injectable - ApiKeyGrpcGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyGrpcGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-grpc.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key in GRPC context.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-grpc.guard.ts:11\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:25\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key in GRPC context.\n */\n@Injectable()\nexport class ApiKeyGrpcGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const metadata: Metadata = context\n      .getArgs()\n      .find((arg) => arg instanceof Metadata);\n    if (!metadata) {\n      return;\n    }\n\n    const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n    if (!apiKeys || apiKeys.length !== 1) {\n      return;\n    }\n\n    return apiKeys[0].toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Base guard for validating api keys.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Protected\n                                    Abstract\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key.guard.ts:8\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:20\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Abstract\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:37\n                \n            \n\n\n            \n                \n                    Read the api key from requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Base guard for validating api keys.\n */\n@Injectable()\nexport abstract class ApiKeyGuard implements CanActivate {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(private readonly serviceApiKey: string) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected abstract readApiKey(context: ExecutionContext): string | undefined;\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyHttpGuard.html":{"url":"injectables/ApiKeyHttpGuard.html","title":"injectable - ApiKeyHttpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyHttpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-http.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for http services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-http.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { HeaderNames } from '../header-names';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for http services.\n */\n@Injectable()\nexport class ApiKeyHttpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const headers = request?.headers;\n\n    if (!headers) {\n      return;\n    }\n\n    return headers[HeaderNames.X_API_KEY];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyTcpGuard.html":{"url":"injectables/ApiKeyTcpGuard.html","title":"injectable - ApiKeyTcpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyTcpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-tcp.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for tcp services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-tcp.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport ApiKeyDto from '../users/dto/api-key.dto';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for tcp services.\n */\n@Injectable()\nexport class ApiKeyTcpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    console.log(context.getArgs());\n    const data = context.getArgs().find((args) => (args as ApiKeyDto).apiKey);\n    if (data) {\n      return (data as ApiKeyDto).apiKey;\n    }\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nHealthChecksModule\n\nHealthChecksModule\n\nAppModule -->\n\nHealthChecksModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                        \n                            HealthChecksModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            ServicesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ServicesModule } from './services/services.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { HealthModule } from './health/health.module';\nimport { HealthChecksModule } from './health-checks/health-checks.module';\nimport { ClientsModule } from './clients/clients.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { GuardsModule } from './guards/guards.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { InjectionNames } from './configuration/InjectionNames.enum';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      useFactory: (connectionString: string) => {\n        return { uri: connectionString };\n      },\n      inject: [InjectionNames.CONNECTION_STRING],\n      imports: [ConfigurationModule],\n    }),\n    ServicesModule,\n    UsersModule,\n    HealthModule,\n    HealthChecksModule,\n    ClientsModule,\n    ConfigurationModule,\n    GuardsModule,\n    PipesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientsModule.html":{"url":"modules/ClientsModule.html","title":"module - ClientsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_imports\n\n\n\ncluster_ClientsModule_exports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nClientsModule\n\nClientsModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/clients/clients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.CLIENT_GRPC_PROXY\n                        \n                        \n                            InjectionNames.CLIENT_TCP_PROXY\n                        \n                        \n                            InjectionNames.GRPC_USERS_CLIENT\n                        \n                        \n                            InjectionNames.TCP_USERS_CLIENT\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GrpcUsersClient } from './grpc-users-client';\nimport { ClientProxyFactory } from '@nestjs/microservices';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { TcpUsersClient } from './tcp-users-client';\n\n@Module({\n  exports: [\n    InjectionNames.GRPC_USERS_CLIENT,\n    InjectionNames.TCP_USERS_CLIENT,\n    InjectionNames.CLIENT_GRPC_PROXY,\n    InjectionNames.CLIENT_TCP_PROXY,\n  ],\n  imports: [ConfigurationModule],\n  providers: [\n    {\n      provide: InjectionNames.CLIENT_GRPC_PROXY,\n      useFactory: (grpcConfig: any) => ClientProxyFactory.create(grpcConfig),\n      inject: [InjectionNames.GRPC_CONFIG],\n    },\n    {\n      provide: InjectionNames.CLIENT_TCP_PROXY,\n      useFactory: (tcpConfig: any) => {\n        return ClientProxyFactory.create(tcpConfig);\n      },\n      inject: [InjectionNames.TCP_CONFIG],\n    },\n    {\n      provide: InjectionNames.GRPC_USERS_CLIENT,\n      useClass: GrpcUsersClient,\n    },\n    {\n      provide: InjectionNames.TCP_USERS_CLIENT,\n      useClass: TcpUsersClient,\n    },\n  ],\n})\nexport class ClientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_imports\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nServicesModule\n\nServicesModule\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationModule -->\n\nServicesModule->ConfigurationModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecretManagerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.API_KEY\n                        \n                        \n                            InjectionNames.CONNECTION_STRING\n                        \n                        \n                            InjectionNames.GRPC_CONFIG\n                        \n                        \n                            InjectionNames.HASH_ROUNDS\n                        \n                        \n                            InjectionNames.PROJECT_NAME\n                        \n                        \n                            InjectionNames.SECRETS_FROM_ENV\n                        \n                        \n                            InjectionNames.SWAGGER_CONFIG\n                        \n                        \n                            InjectionNames.TCP_CONFIG\n                        \n                        \n                            InjectionNames.USE_SWAGGER\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Transport } from '@nestjs/microservices';\nimport { join } from 'path';\nimport { EnvNames } from './env-names';\nimport { ServicesModule } from '../services/services.module';\nimport { InjectionNames } from './InjectionNames.enum';\nimport { SecretManagerService } from './secret-manager.service';\nimport { DocumentBuilder } from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\n\n@Module({\n  exports: [\n    InjectionNames.API_KEY,\n    InjectionNames.GRPC_CONFIG,\n    InjectionNames.TCP_CONFIG,\n    InjectionNames.USE_SWAGGER,\n    InjectionNames.HASH_ROUNDS,\n    InjectionNames.PROJECT_NAME,\n    InjectionNames.SECRETS_FROM_ENV,\n    InjectionNames.CONNECTION_STRING,\n    InjectionNames.SWAGGER_CONFIG,\n  ],\n  imports: [ConfigModule.forRoot({}), ServicesModule],\n  providers: [\n    SecretManagerService,\n    {\n      provide: InjectionNames.API_KEY,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(EnvNames.API_KEY);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.CONNECTION_STRING,\n      useFactory: async (\n        secretsFromEnv: boolean,\n        configService: ConfigService,\n        secretManagerService: SecretManagerService,\n      ): Promise => {\n        if (secretsFromEnv) {\n          return configService.getOrThrow(EnvNames.CONNECTION_STRING);\n        }\n\n        return secretManagerService.getConnectionString();\n      },\n      inject: [\n        InjectionNames.SECRETS_FROM_ENV,\n        ConfigService,\n        SecretManagerService,\n      ],\n    },\n    {\n      provide: InjectionNames.GRPC_CONFIG,\n      useFactory: (configService: ConfigService) => {\n        const port = configService.getOrThrow(EnvNames.GRPC_PORT);\n        return {\n          transport: Transport.GRPC,\n          options: {\n            package: ['users'],\n            protoPath: [join(__dirname, '../proto/users.proto')],\n            url: `localhost:${port}`,\n          },\n        };\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HASH_ROUNDS,\n      useFactory: (configService: ConfigService): number => {\n        const rounds = configService.getOrThrow(EnvNames.HASH_ROUNDS);\n        return parseInt(rounds);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.PROJECT_NAME,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(EnvNames.PROJECT_NAME);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SECRETS_FROM_ENV,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.getOrThrow(EnvNames.SECRETS_FROM_ENV);\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SWAGGER_CONFIG,\n      useFactory: () => {\n        return new DocumentBuilder()\n          .setTitle('UsersService')\n          .setDescription('The api of the users service.')\n          .setVersion('1.0')\n          .addTag('users')\n          .addApiKey(\n            { type: 'apiKey', name: HeaderNames.X_API_KEY, in: 'header' },\n            HeaderNames.X_API_KEY,\n          )\n          .build();\n      },\n    },\n    {\n      provide: InjectionNames.TCP_CONFIG,\n      useFactory: (configService: ConfigService): any => {\n        const port = configService.getOrThrow(EnvNames.TCP_PORT);\n        return {\n          transport: Transport.TCP,\n          options: {\n            host: '0.0.0.0',\n            port,\n          },\n        };\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.USE_SWAGGER,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.getOrThrow(EnvNames.USE_SWAGGER);\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../../validation/constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GrpcUsersClient.html":{"url":"injectables/GrpcUsersClient.html","title":"injectable - GrpcUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GrpcUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/grpc-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using grpc.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clientService\n                            \n                            \n                                    Private\n                                    Readonly\n                                metadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientGrpcProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/grpc-users-client.ts:28\n                            \n                        \n\n                \n                    \n                            Creates a new instance of GrpcUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientGrpcProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The grpc client proxy that is configured to access the server by grpc.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:118\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:51\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:71\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:110\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:98\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:84\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clientService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IGrpcUsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:23\n                        \n                    \n\n            \n                \n                    Service for accessing the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Metadata\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:28\n                        \n                    \n\n            \n                \n                    The default metadata that is sent to the server.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientGrpcProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport GuidDto from '../users/dto/guid.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport { User } from '../users/entities/user.entity';\nimport { IGrpcUsersService } from '../users/interfaces/users-grpc-controller.interface';\nimport IUsersClient from '../users/interfaces/users-client.interface';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * Client for the users service using grpc.\n */\n@Injectable()\nexport class GrpcUsersClient implements IUsersClient {\n  /**\n   * Service for accessing the server.\n   */\n  private readonly clientService: IGrpcUsersService;\n\n  /**\n   * The default metadata that is sent to the server.\n   */\n  private readonly metadata: Metadata;\n\n  /**\n   * Creates a new instance of GrpcUsersClient.\n   * @param client The grpc client proxy that is configured to access the server by grpc.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_GRPC_PROXY)\n    private readonly client: ClientGrpcProxy,\n    @Inject(InjectionNames.API_KEY) apiKey: string,\n  ) {\n    this.clientService =\n      client.getService('GrpcUsersService');\n    this.metadata = new Metadata();\n    this.metadata.add(HeaderNames.X_API_KEY, apiKey);\n  }\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const response = await this.clientService.create(data, this.metadata);\n    return await firstValueFrom(response);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await this.clientService.findAll({}, this.metadata);\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const dto: GuidDto = { guid };\n    const response = await this.clientService.findOne(dto, this.metadata);\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const dto: UpdateUserDto & GuidDto = {\n      guid,\n      ...data,\n    };\n    const response = await this.clientService.update(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const dto: GuidDto = {\n      guid,\n    };\n    const response = await this.clientService.remove(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await this.clientService.healthCheck({}, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:100\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyGrpcGuard } from '../../guards/api-key-grpc.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGrpcGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  healthCheck(): Promise {\n    return new Promise((resolve) => resolve());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuardsModule.html":{"url":"modules/GuardsModule.html","title":"module - GuardsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_imports\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guards/guards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { ApiKeyGrpcGuard } from './api-key-grpc.guard';\nimport { ApiKeyHttpGuard } from './api-key-http.guard';\nimport { ApiKeyTcpGuard } from './api-key-tcp.guard';\n\n@Module({\n  exports: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n  imports: [ConfigurationModule],\n  providers: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n})\nexport class GuardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID(Constants.UUID_VERSION)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:13\n                        \n                    \n\n            \n                \n                    An uuid in version 4.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { Constants } from '../../validation/constants';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  /**\n   * An uuid in version 4.\n   */\n  @IsString()\n  @IsUUID(Constants.UUID_VERSION)\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashRounds: number)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:9\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        hashRounds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of used hash rounds.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:23\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, Inject } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param hashRounds The number of used hash rounds.\n   */\n  constructor(\n    @Inject(InjectionNames.HASH_ROUNDS) private readonly hashRounds: number,\n  ) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    if (data.email) {\n      data.email = hashSync(data.email, this.hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, this.hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthChecksModule.html":{"url":"modules/HealthChecksModule.html","title":"module - HealthChecksModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthChecksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthChecksModule\n\n\n\ncluster_HealthChecksModule_exports\n\n\n\ncluster_HealthChecksModule_providers\n\n\n\ncluster_HealthChecksModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nHealthChecksModule\n\nHealthChecksModule\n\nHealthChecksModule -->\n\nClientsModule->HealthChecksModule\n\n\n\n\n\nUsersGrpcHealthCheck \n\nUsersGrpcHealthCheck \n\nUsersGrpcHealthCheck  -->\n\nHealthChecksModule->UsersGrpcHealthCheck \n\n\n\n\n\nUsersGrpcHealthCheck\n\nUsersGrpcHealthCheck\n\nHealthChecksModule -->\n\nUsersGrpcHealthCheck->HealthChecksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health-checks/health-checks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersGrpcHealthCheck\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersGrpcHealthCheck\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule } from '../clients/clients.module';\nimport { UsersGrpcHealthCheck } from './users-grpc-health-check';\n\n@Module({\n  exports: [UsersGrpcHealthCheck],\n  imports: [ClientsModule],\n  providers: [UsersGrpcHealthCheck],\n})\nexport class HealthChecksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                A controller for checking the application health.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:45\n                \n            \n\n\n            \n                \n                    Execute health checks for the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The health status of the server.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport {\n  MongooseHealthIndicator,\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  MicroserviceHealthIndicator,\n  HealthCheckResult,\n} from '@nestjs/terminus';\nimport { HeaderNames } from '../header-names';\nimport { UsersGrpcHealthCheck } from '../health-checks/users-grpc-health-check';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * A controller for checking the application health.\n */\n@Controller('health')\nexport class HealthController {\n  /**\n   * Creates a new instance of HealthController.\n   * @param healthCheckService Service for checking the application health.\n   * @param httpHealthIndicator Http-based health checks.\n   * @param microserviceHealthIndicator Check the health of microservices.\n   * @param mongooseHealthIndicator Check the health of the mongodb.\n   * @param usersGrpcHealthCheck Check the health of the user service using grpc.\n   * @param tcpConfig The tcp cofiguration of the users service.\n   * @param apiKey The api key that used for requests.\n   */\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private httpHealthIndicator: HttpHealthIndicator,\n    private microserviceHealthIndicator: MicroserviceHealthIndicator,\n    private mongooseHealthIndicator: MongooseHealthIndicator,\n    private usersGrpcHealthCheck: UsersGrpcHealthCheck,\n    @Inject(InjectionNames.TCP_CONFIG) private readonly tcpConfig: any,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n  ) {}\n\n  /**\n   * Execute health checks for the application.\n   * @returns The health status of the server.\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    const options = { headers: {} };\n    options.headers[HeaderNames.X_API_KEY] = this.apiKey;\n\n    return this.healthCheckService.check([\n      async () =>\n        this.microserviceHealthIndicator.pingCheck('tcp', this.tcpConfig),\n      () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service API Doc',\n          'https://michaeldiers.github.io/users-service',\n        ),\n      async () => this.mongooseHealthIndicator.pingCheck('mongoose'),\n      async () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service',\n          'http://localhost:3000/users/health/check',\n          options,\n        ),\n      async () => this.usersGrpcHealthCheck.isHealthy('Grpc Users'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\nHealthChecksModule\n\nHealthChecksModule\n\nHealthModule -->\n\nHealthChecksModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            HealthChecksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { HealthChecksModule } from '../health-checks/health-checks.module';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  imports: [\n    TerminusModule,\n    HttpModule,\n    HealthChecksModule,\n    ConfigurationModule,\n  ],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrpcUsersService.html":{"url":"interfaces/IGrpcUsersService.html","title":"interface - IGrpcUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-grpc-controller.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service interface for the GRPC service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:17\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:24\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:32\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:57\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data is not processed.\n\n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:49\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:41\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport GuidDto from '../dto/guid.dto';\nimport { Observable } from 'rxjs';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Service interface for the GRPC service.\n */\nexport interface IGrpcUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto, metadata: Metadata): Observable;\n\n  /**\n   * Find all users of the application.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(data: any, metadata: Metadata): Observable;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  update(data: UpdateUserDto & GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  remove(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Execute a simple health check.\n   * @param data The data is not processed.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(data: any, metadata: Metadata): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISecretManagerService.html":{"url":"interfaces/ISecretManagerService.html","title":"interface - ISecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/secret-manager.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \ngetConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.interface.ts:13\n                \n            \n\n\n            \n                \n                    Get the mongodb connection string.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const SECRET_MANAGER_SERVICE = 'SECRET_MANAGER_SERVICE';\n\n/**\n * Access for the google cloud secret manager.\n */\nexport interface ISecretManagerService {\n  /**\n   * Get the mongodb connection string.\n   */\n  getConnectionString(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersClient.html":{"url":"interfaces/IUsersClient.html","title":"interface - IUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-client.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface that describes operations on users for controller and client.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:53\n                \n            \n\n\n            \n                \n                    Close the client connection.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:14\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:20\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:27\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:48\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:42\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:35\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Interface that describes operations on users for controller and client.\n */\nexport default interface IUsersClient {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto): Promise;\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  update(guid: string, data: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  remove(guid: string): Promise;\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(): Promise;\n\n  /**\n   * Close the client connection.\n   */\n  close(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:47\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:50\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:43\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_imports\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/pipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HashPipe\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { HashPipe } from './hash-pipe';\n\n@Module({\n  exports: [HashPipe],\n  imports: [ConfigurationModule],\n  providers: [HashPipe],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, projectName: string)\n                    \n                \n                        \n                            \n                                Defined in src/configuration/secret-manager.service.ts:21\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        projectName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:40\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:49\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/configuration/secret-manager.service.ts:34\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ISecretManagerService } from '../services/secret-manager.interface';\nimport {\n  ILoggingService,\n  LOGGING_SERVICE,\n} from '../services/logging.interface';\nimport { InjectionNames } from './InjectionNames.enum';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService implements ISecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    @Inject(InjectionNames.PROJECT_NAME) private readonly projectName: string,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.projectName}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/services.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\n\n@Module({\n  exports: [LOGGING_SERVICE],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n  ],\n})\nexport class ServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TcpUsersClient.html":{"url":"injectables/TcpUsersClient.html","title":"injectable - TcpUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TcpUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/tcp-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using tcp.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isConnected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/tcp-users-client.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the TcpUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A client proxy that is configured to use tcp.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:127\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:135\n                \n            \n\n\n            \n                \n                    Establish a connection to the server.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The proxy client that is connected to the server.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:71\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:117\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:105\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:86\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/clients/tcp-users-client.ts:19\n                        \n                    \n\n            \n                \n                    Indicates if the client is connected.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { User } from '../users/entities/user.entity';\nimport IUsersClient from '../users/interfaces/users-client.interface';\n\n/**\n * Client for the users service using tcp.\n */\n@Injectable()\nexport class TcpUsersClient implements IUsersClient {\n  /**\n   * Indicates if the client is connected.\n   */\n  private isConnected = false;\n\n  /**\n   * Creates a new instance of the TcpUsersClient.\n   * @param client A client proxy that is configured to use tcp.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_TCP_PROXY)\n    private readonly client: ClientProxy,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const user = await firstValueFrom(\n      await (\n        await this.connect()\n      ).send(\n        { cmd: 'create' },\n        {\n          ...data,\n          apiKey: this.apiKey,\n        },\n      ),\n    );\n\n    return user;\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findAll' }, { apiKey: this.apiKey });\n\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findOne' }, { guid, apiKey: this.apiKey });\n\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const response = await (\n      await this.connect()\n    ).send(\n      { cmd: 'update' },\n      {\n        guid,\n        ...data,\n        apiKey: this.apiKey,\n      },\n    );\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'remove' }, { guid, apiKey: this.apiKey });\n\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'healthCheck' }, { apiKey: this.apiKey });\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n\n  /**\n   * Establish a connection to the server.\n   * @returns The proxy client that is connected to the server.\n   */\n  private async connect(): Promise {\n    if (!this.isConnected) {\n      await this.client.connect();\n    }\n\n    return this.client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the schema for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:36\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * The document type for users.\n */\nexport type UserDocument = User & Document;\n\n/**\n * Describes the schema for users.\n */\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\n/**\n * The mongodb schema for users.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:10\n                        \n                    \n\n            \n                \n                    All known users of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  /**\n   * All known users of the application.\n   */\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            Create a new instance of UsersDatabaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The model for database operations on users.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:28\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:46\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:57\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:88\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:70\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  /**\n   * Create a new instance of UsersDatabaseService.\n   * @param userModel The model for database operations on users.\n   */\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersGrpcHealthCheck.html":{"url":"injectables/UsersGrpcHealthCheck.html","title":"injectable - UsersGrpcHealthCheck","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersGrpcHealthCheck\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health-checks/users-grpc-health-check.ts\n        \n\n\n            \n                Description\n            \n            \n                A custom health indicator for the grpc users service.\n\n            \n\n            \n                Extends\n            \n            \n                    HealthIndicator\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isHealthy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(grpcUsersClient: IUsersClient)\n                    \n                \n                        \n                            \n                                Defined in src/health-checks/users-grpc-health-check.ts:14\n                            \n                        \n\n                \n                    \n                            Creates a new instance of UsersGrpcHealthCheck.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        grpcUsersClient\n                                                  \n                                                        \n                                                                        IUsersClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The grpc client for the users service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHealthy(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health-checks/users-grpc-health-check.ts:31\n                \n            \n\n\n            \n                \n                    Execute a health check for the grpc users service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key which will be used as key for the result object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The health status of the service.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport {\n  HealthCheckError,\n  HealthIndicator,\n  HealthIndicatorResult,\n} from '@nestjs/terminus';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport IUsersClient from '../users/interfaces/users-client.interface';\n\n/**\n * A custom health indicator for the grpc users service.\n */\n@Injectable()\nexport class UsersGrpcHealthCheck extends HealthIndicator {\n  /**\n   * Creates a new instance of UsersGrpcHealthCheck.\n   * @param grpcUsersClient The grpc client for the users service.\n   */\n  constructor(\n    @Inject(InjectionNames.GRPC_USERS_CLIENT)\n    private readonly grpcUsersClient: IUsersClient,\n  ) {\n    super();\n  }\n\n  /**\n   * Execute a health check for the grpc users service.\n   * @param key The key which will be used as key for the result object.\n   * @returns The health status of the service.\n   */\n  async isHealthy(key: string): Promise {\n    try {\n      await this.grpcUsersClient.healthCheck();\n      return this.getStatus(key, true, { info: 'Up and running' });\n    } catch (err) {\n      throw new HealthCheckError(\n        'Custom health check failed',\n        this.getStatus(key, false, {\n          info: 'service is down',\n          error: err.message,\n        }),\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersHttpController.html":{"url":"controllers/UsersHttpController.html","title":"controller - UsersHttpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersHttpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-http.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:59\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:99\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health/check')@ApiOperation({description: 'Execute a simple health check.'})@ApiResponse({status: 200, description: 'The service is healthy.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:162\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:149\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:126\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../../header-names';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersHttpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post()\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   */\n  @Get('health/check')\n  @ApiOperation({ description: 'Execute a simple health check.' })\n  @ApiResponse({ status: 200, description: 'The service is healthy.' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersHttpController\n                        \n                        \n                            GrpcUsersService\n                        \n                        \n                            UsersTcpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersHttpController } from './controllers/users-http.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './controllers/users-grpc.controller';\nimport { UsersTcpController } from './controllers/users-tcp.controller';\nimport { GuardsModule } from '../guards/guards.module';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  controllers: [UsersHttpController, GrpcUsersService, UsersTcpController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    GuardsModule,\n    ConfigurationModule,\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\nimport { IUsersService } from './interfaces/users.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService implements IUsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersTcpController.html":{"url":"controllers/UsersTcpController.html","title":"controller - UsersTcpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersTcpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-tcp.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                TCP CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'create'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:50\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(data: ApiKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findAll'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ApiKeyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findOne'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:72\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'healthCheck'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:103\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'remove'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:93\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'update'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyTcpGuard } from '../../guards/api-key-tcp.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\nimport ApiKeyDto from '../dto/api-key.dto';\n\n/**\n * TCP CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyTcpGuard)\n@Controller()\nexport class UsersTcpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'create' })\n  create(data: CreateUserDto & ApiKeyDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @MessagePattern({ cmd: 'findAll' })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findAll(data: ApiKeyDto): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'findOne' })\n  findOne(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'update' })\n  update(data: UpdateUserDto & GuidDto & ApiKeyDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'remove' })\n  remove(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'healthCheck' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            injectable\n            GrpcUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/clients/tcp-users-client.ts\n            \n            injectable\n            TcpUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/configuration/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/guards/api-key-grpc.guard.ts\n            \n            injectable\n            ApiKeyGrpcGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-http.guard.ts\n            \n            injectable\n            ApiKeyHttpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-tcp.guard.ts\n            \n            injectable\n            ApiKeyTcpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/health-checks/users-grpc-health-check.ts\n            \n            injectable\n            UsersGrpcHealthCheck\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/secret-manager.interface.ts\n            \n            interface\n            ISecretManagerService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/secret-manager.interface.ts\n            \n            variable\n            SECRET_MANAGER_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/controllers/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-http.controller.ts\n            \n            controller\n            UsersHttpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-tcp.controller.ts\n            \n            controller\n            UsersTcpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/api-key.dto.ts\n            \n            class\n            ApiKeyDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-client.interface.ts\n            \n            interface\n            IUsersClient\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-grpc-controller.interface.ts\n            \n            interface\n            IGrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/validation/constants.ts\n            \n            variable\n            Constants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/client.tester.ts\n            \n            function\n            clientTest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/axios : ^0.1.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvNames   (src/.../env-names.ts)\n                        \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            InjectionNames   (src/.../InjectionNames.enum.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                        \n                            ServiceNames   (src/.../service-names.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configuration/env-names.ts\n    \n        \n            \n                \n                    \n                        \n                        EnvNames\n                    \n                \n                    \n                        \n                            Names of environment variables.\n\n                        \n                    \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : USERS_HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : USERS_PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : USERS_SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : USERS_API_KEY\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USERS_USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_TCP_PORT\n                            \n                        \n            \n        \n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/configuration/InjectionNames.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        InjectionNames\n                    \n                \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : API_KEY\n                            \n                        \n                        \n                            \n                                 GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                 CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                 TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                Value : GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                 TCP_CONFIG\n                            \n                        \n                        \n                            \n                                Value : TCP_CONFIG\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                Value : SWAGGER_CONFIG\n                            \n                        \n            \n        \n\n    src/configuration/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n    src/service-names.ts\n    \n        \n            \n                \n                    \n                        \n                        ServiceNames\n                    \n                \n                    \n                        \n                            Names of services.\n\n                        \n                    \n                        \n                            \n                                 GRPC_USERS_SERVICE\n                            \n                        \n                        \n                            \n                                Value : GrpcUsersService\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            clientTest   (test/.../client.tester.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The application setup.\n\n\n                \n            \n        \n    \n    test/client.tester.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        clientTest\n                        \n                    \n                \n            \n            \n                \nclientTest(clientInjectionName: string, microserviceConfigName: string)\n                \n            \n\n\n\n\n            \n                \n                    A generic test for different clients and services: GRPC, TCP\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clientInjectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for the client.\n\n                                    \n                                \n                                \n                                    microserviceConfigName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for client configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_HealthChecksModule\n\n\n\ncluster_HealthChecksModule_exports\n\n\n\ncluster_HealthChecksModule_providers\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nHealthChecksModule\n\nHealthChecksModule\n\nHealthChecksModule -->\n\nClientsModule->HealthChecksModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\nHealthModule -->\n\nHealthChecksModule->HealthModule\n\n\n\nAppModule -->\n\nHealthChecksModule->AppModule\n\n\n\n\n\nUsersGrpcHealthCheck \n\nUsersGrpcHealthCheck \n\nUsersGrpcHealthCheck  -->\n\nHealthChecksModule->UsersGrpcHealthCheck \n\n\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nConfigurationModule -->\n\nServicesModule->ConfigurationModule\n\n\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\nUsersGrpcHealthCheck\n\nUsersGrpcHealthCheck\n\nHealthChecksModule -->\n\nUsersGrpcHealthCheck->HealthChecksModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthChecksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The document type for users.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            SECRET_MANAGER_SERVICE   (src/.../secret-manager.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The minimum length for display names.\n   */\n  DISPLAY_NAME_MIN_LENGTH: 3,\n\n  /**\n   * The maximum length for display names.\n   */\n  DISPLAY_NAME_MAX_LENGTH: 256,\n\n  /**\n   * The minimum length for emails.\n   */\n  EMAIL_MIN_LENGTH: 5,\n\n  /**\n   * The maximum length for emails.\n   */\n  EMAIL_MAX_LENGTH: 2048,\n\n  /**\n   * The minimum length for passwords.\n   */\n  PASSWORD_MIN_LENGTH: 8,\n\n  /**\n   * The maximum length for passwords.\n   */\n  PASSWORD_MAX_LENGTH: 4096,\n\n  /**\n   * The expected version for uuids.\n   */\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n            \n                \n                    Predefined validation constants.\n\n                \n            \n\n        \n    \n\n    src/services/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/services/secret-manager.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SECRET_MANAGER_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SECRET_MANAGER_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The mongodb schema for users.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
