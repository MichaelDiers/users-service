var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/ApiKeyGuard.html",[0,2.076,1,2.076]],["body/guards/ApiKeyGuard.html",[0,2.231,1,2.957,2,2.321,3,0.255,4,0.255,5,0.224,6,3.829,7,1.937,8,0.636,9,3.461,10,3.33,11,4.829,12,4.829,13,0.224,14,0.935,15,2.352,16,3.461,17,0.921,18,4.906,19,3.461,20,0.935,21,1.937,22,3.869,23,0.704,24,2.321,25,1.18,26,0.846,27,1.519,28,1.012,29,0.033,30,0.704,31,0.513,32,1.012,33,1.819,34,2.006,35,2.512,36,2.321,37,4.45,38,2.321,39,3.461,40,3.561,41,4.758,42,3.829,43,3.829,44,1.121,45,3.461,46,1.18,47,3.454,48,1.519,49,3.461,50,2.399,51,2.659,52,3.461,53,2.321,54,2.889,55,4.138,56,3.461,57,3.461,58,0.849,59,2.659,60,3.461,61,0.713,62,0.776,63,0.617,64,1.345,65,1.685,66,1.496,67,1.685,68,2.006,69,1.685,70,1.937,71,4.096,72,1.937,73,1.937,74,0.255,75,0.137,76,1.112,77,1.937,78,1.112,79,1.101,80,1.937,81,1.112,82,1.419,83,4.138,84,2.321,85,2.207,86,4.138,87,2.321,88,3.461,89,2.321,90,2.889,91,2.321,92,2.321,93,2.321,94,2.321,95,2.321,96,2.321,97,1.937,98,3.461,99,2.321,100,2.321,101,1.496,102,2.321,103,0.017,104,0.017]],["title/modules/AppModule.html",[105,1.693,106,2.076]],["body/modules/AppModule.html",[3,0.431,4,0.431,5,0.378,29,0.033,48,1.722,61,0.84,63,1.044,64,2.275,74,0.431,75,0.231,103,0.025,104,0.025,105,2.616,106,4.015,107,2.062,108,2.885,109,3.275,110,3.275,111,3.568,112,3.513,113,3.612,114,2.848,115,2.848,116,3.924,117,4.562,118,3.924,119,3.924,120,3.275,121,2.062,122,2.616,123,3.924,124,3.275,125,3.924,126,3.924,127,3.924,128,3.924,129,2.848]],["title/classes/CreateUserDto.html",[75,0.19,130,1.298]],["body/classes/CreateUserDto.html",[3,0.334,4,0.334,5,0.293,8,0.421,13,0.293,14,1.692,23,0.819,26,1.027,29,0.032,30,0.715,31,0.596,58,1.157,59,3.267,61,0.72,74,0.334,75,0.284,103,0.021,104,0.021,130,1.692,131,1.456,132,4.334,133,2.205,134,2.013,135,3.048,136,1.44,137,3.102,138,3.349,139,3.513,140,2.53,141,3.037,142,3.037,143,3.505,144,3.505,145,4.705,146,4.705,147,3.037,148,4.199,149,3.505,150,3.037,151,3.037,152,2.535,153,4.199,154,3.037,155,4.199,156,4.334,157,5.192,158,3.037,159,3.037,160,4.199,161,3.037,162,4.199,163,4.017,164,2.535,165,2.205,166,3.505,167,2.205,168,2.205,169,3.037,170,4.334,171,1.76,172,3.037,173,4.199,174,3.493,175,3.037,176,3.037,177,4.199,178,1.223,179,3.037,180,3.037,181,3.037,182,4.199,183,3.037]],["title/controllers/GrpcUsersService.html",[184,1.867,185,2.076]],["body/controllers/GrpcUsersService.html",[1,1.352,3,0.23,4,0.23,5,0.202,8,0.291,13,0.202,15,1.006,17,0.853,20,0.845,23,0.799,25,1.486,26,1.148,27,0.921,28,1.065,29,0.033,30,0.742,31,0.482,32,1.065,34,1.859,44,1.358,46,2.085,48,1.407,61,0.783,63,0.558,74,0.23,75,0.124,78,1.006,79,1.317,81,1.006,82,0.607,85,1.892,103,0.016,104,0.016,130,1.892,134,1.866,136,1.487,140,2.468,184,2.526,185,2.067,186,1.352,187,3.594,188,1.751,189,3.207,190,2.509,191,2.06,192,2.509,193,2.291,194,1.685,195,2.046,196,2.291,197,3.207,198,5.649,199,2.098,200,2.193,201,2.373,202,2.663,203,2.098,204,1.685,205,1.685,206,3.207,207,3.424,208,2.098,209,2.26,210,3.207,211,2.098,212,1.685,213,3.638,214,3.207,215,2.098,216,1.216,217,2.098,218,2.098,219,3.207,220,3.207,221,1.523,222,1.216,223,1.685,224,1.866,225,1.352,226,1.006,227,1.859,228,1.103,229,1.523,230,2.098,231,2.067,232,2.098,233,2.098,234,2.067,235,2.098,236,2.098,237,2.098,238,2.098,239,2.067,240,2.098,241,2.098,242,2.098,243,2.098,244,2.098,245,1.751,246,2.098,247,2.098,248,1.216,249,1.751,250,1.685,251,1.352,252,1.751,253,1.751,254,1.523,255,1.751,256,2.098,257,2.098,258,1.352,259,1.751,260,1.568,261,2.098,262,1.103,263,2.098,264,2.098]],["title/classes/GuidDto.html",[75,0.19,207,2.076]],["body/classes/GuidDto.html",[3,0.481,4,0.481,5,0.422,8,0.607,13,0.422,14,2.146,23,0.745,29,0.032,31,0.543,58,1.093,61,0.607,74,0.481,75,0.314,103,0.026,104,0.026,131,2.099,134,2.553,140,2.302,163,4.447,165,3.178,207,3.434,260,2.467,265,3.655,266,5.327,267,4.379,268,4.379,269,4.379,270,2.538,271,4.379]],["title/injectables/HashPipe.html",[62,0.722,239,2.076]],["body/injectables/HashPipe.html",[3,0.344,4,0.344,5,0.302,8,0.678,13,0.302,17,1.141,20,1.262,21,2.615,22,4.229,23,0.73,25,1.463,26,1.049,27,1.882,28,1.049,29,0.033,30,0.73,31,0.531,32,1.049,33,2.254,34,2.486,35,3.113,44,1.049,61,0.729,62,0.962,63,0.833,64,1.816,66,2.019,67,2.274,68,1.816,74,0.344,75,0.185,76,1.501,79,1.141,80,2.615,81,1.501,82,1.24,85,1.262,103,0.021,104,0.021,138,3.194,139,3.552,166,4.391,178,2.292,200,1.262,239,3.391,245,3.58,248,2.486,272,1.375,273,4.083,274,2.615,275,2.765,276,4.13,277,5.26,278,3.132,279,4.289,280,3.132,281,2.056,282,4.391,283,4.289,284,3.132,285,2.615,286,4.891,287,3.132,288,4.289,289,3.132,290,4.289,291,3.132]],["title/injectables/HttpExceptionInterceptor.html",[62,0.722,234,2.076]],["body/injectables/HttpExceptionInterceptor.html",[3,0.38,4,0.38,5,0.333,8,0.635,13,0.333,17,1.22,23,0.589,26,0.845,28,0.845,29,0.033,30,0.589,31,0.428,32,0.845,37,4.572,41,4.572,42,3.827,43,3.827,44,1.121,47,4.757,61,0.713,62,1.028,63,0.92,65,2.51,74,0.38,75,0.204,76,1.657,79,1.22,85,1.393,97,2.886,103,0.023,104,0.023,221,2.51,234,2.955,272,1.517,292,3.827,293,2.886,294,4.585,295,4.585,296,5.477,297,5.699,298,5.477,299,4.585,300,5.857,301,5.477,302,3.458,303,4.585,304,4.585,305,4.585,306,4.585,307,4.585,308,3.458,309,3.458,310,3.458,311,2.658,312,3.328,313,3.458]],["title/interfaces/ILoggingService.html",[314,1.298,315,1.867]],["body/interfaces/ILoggingService.html",[3,0.438,4,0.438,5,0.385,8,0.697,13,0.385,17,1.338,23,0.679,28,0.976,29,0.032,30,0.679,31,0.495,32,0.976,44,0.976,58,1.249,74,0.552,78,2.411,79,1.338,82,1.154,103,0.025,104,0.025,311,3.528,314,1.608,315,2.916,316,2.314,317,2.897,318,3.651,319,3.651,320,4.199,321,4.199,322,5.08,323,3.991,324,4.199,325,4.827,326,2.573,327,3.651,328,2.916]],["title/interfaces/ISecretManagerService.html",[314,1.298,329,1.867]],["body/interfaces/ISecretManagerService.html",[3,0.469,4,0.469,5,0.412,8,0.592,13,0.412,17,1.396,23,0.727,29,0.032,33,2.758,44,1.044,46,1.79,58,1.077,74,0.576,82,1.235,103,0.026,104,0.026,314,1.721,316,2.476,329,3.042,330,3.042,331,3.101,332,3.382,333,4.38,334,3.382,335,3.382,336,4.3,337,4.272,338,3.382,339,4.38,340,3.042]],["title/interfaces/IUsersDatabaseService.html",[314,1.298,341,1.867]],["body/interfaces/IUsersDatabaseService.html",[3,0.262,4,0.262,5,0.23,8,0.688,13,0.23,17,0.941,23,0.845,25,1.586,26,0.864,28,1.137,29,0.032,30,0.792,31,0.576,32,1.137,44,1.403,46,2.123,48,2.041,50,2.697,51,3.327,58,1.158,59,3.014,61,0.331,74,0.388,79,1.321,82,0.691,103,0.017,104,0.017,136,1.581,191,2.041,193,2.445,194,1.858,195,1.858,196,2.445,200,2.095,201,2.751,202,2.751,204,1.858,205,1.858,209,2.424,212,1.858,226,1.145,260,2.312,262,2.445,281,1.694,314,0.962,316,1.384,341,2.049,342,3.774,343,1.734,344,3.774,345,2.951,346,2.388,347,3.605,348,2.388,349,2.279,350,2.049,351,2.388,352,2.049,353,2.388,354,2.566,355,2.049,356,2.388,357,2.566,358,1.734,359,1.994,360,1.734,361,2.049]],["title/interfaces/IUsersService.html",[227,1.867,314,1.298]],["body/interfaces/IUsersService.html",[3,0.267,4,0.267,5,0.234,8,0.693,10,1.764,13,0.234,17,0.953,23,0.851,25,1.6,26,1.147,28,1.147,29,0.033,30,0.851,31,0.581,32,1.147,44,1.357,46,2.085,58,1.163,61,0.589,74,0.393,78,1.716,79,1.331,82,0.703,103,0.018,104,0.018,130,2.108,136,1.565,190,2.308,191,2.059,193,2.466,194,1.882,195,1.882,196,2.629,200,2.015,201,2.508,202,2.508,204,2.466,205,1.882,209,2.529,212,1.882,222,1.408,223,1.882,224,2.661,225,1.566,226,1.165,227,2.075,228,1.882,251,2.308,260,2.237,262,1.882,275,2.235,281,2.248,314,0.979,316,1.408,350,2.075,352,2.075,355,2.075,358,1.764,360,1.764,362,1.764,363,2.989,364,2.599,365,2.43,366,2.43,367,2.43,368,2.43,369,2.43,370,2.028,371,4.175,372,1.764,373,4.175,374,1.764,375,3.549,376,2.028]],["title/injectables/LoggingService.html",[62,0.722,377,1.867]],["body/injectables/LoggingService.html",[3,0.423,4,0.423,5,0.371,8,0.681,13,0.371,17,1.308,23,0.655,28,0.941,29,0.032,30,0.655,31,0.477,32,0.941,44,0.941,58,1.237,61,0.681,62,1.102,63,1.024,74,0.423,75,0.227,76,1.845,78,2.356,79,1.308,103,0.024,104,0.024,270,2.231,272,1.689,311,3.495,315,2.849,318,3.568,319,3.568,320,4.103,321,4.103,322,5.033,324,4.103,325,4.763,326,2.481,327,3.568,377,2.849,378,3.212,379,3.848,380,2.793,381,3.848,382,3.848]],["title/injectables/MongodbConfigService.html",[62,0.722,122,1.693]],["body/injectables/MongodbConfigService.html",[3,0.354,4,0.354,5,0.31,8,0.606,13,0.31,15,1.543,17,1.163,20,1.76,23,0.744,25,1.814,26,1.213,27,1.917,28,0.787,29,0.033,30,0.548,31,0.399,32,0.787,33,2.297,44,1.068,46,1.814,58,0.661,61,0.688,62,0.98,63,0.856,74,0.354,75,0.19,76,1.543,79,0.856,81,1.543,82,0.931,85,1.297,103,0.022,104,0.022,121,1.692,122,2.797,135,3.172,201,2.094,202,2.094,216,1.866,272,1.413,329,3.084,332,2.817,334,3.198,335,2.817,336,2.337,338,3.429,340,1.866,383,4.141,384,2.687,385,5.32,386,5.563,387,5.32,388,4.961,389,5.32,390,3.219,391,3.219,392,2.875,393,4.37,394,3.219,395,4.961,396,2.337,397,3.219,398,3.219,399,3.219,400,3.219,401,3.219,402,3.219,403,3.219,404,3.219,405,3.219,406,3.219]],["title/injectables/SecretManagerService.html",[62,0.722,392,1.867]],["body/injectables/SecretManagerService.html",[3,0.255,4,0.255,5,0.224,8,0.574,13,0.224,14,1.396,15,2.627,17,0.922,20,1.396,22,3.979,23,0.781,26,1.013,27,1.521,28,0.847,29,0.033,30,0.876,31,0.513,32,0.847,33,2.706,34,2.009,35,2.515,44,1.122,46,1.566,51,2.661,58,1.094,59,2.661,61,0.714,62,0.777,63,0.618,64,1.348,66,1.499,67,2.515,68,2.009,74,0.255,75,0.137,76,1.114,79,1.102,81,1.114,82,1.198,85,1.849,103,0.017,104,0.017,149,1.941,178,1.396,192,3.319,216,1.348,248,2.009,258,1.499,272,1.02,281,2.2,311,2.009,315,2.661,319,2.515,328,1.348,329,2.009,330,2.846,332,3.438,333,3.832,334,3.937,335,3.438,336,3.332,338,2.959,339,3.832,377,2.401,380,1.688,392,2.661,396,1.688,407,1.688,408,4.91,409,4.142,410,2.325,411,2.325,412,2.325,413,3.465,414,2.325,415,2.325,416,4.591,417,3.564,418,4.142,419,4.591,420,2.325,421,2.892,422,1.941,423,1.941,424,2.325,425,1.941,426,1.941,427,1.941,428,2.325,429,2.325,430,3.465,431,2.325,432,2.325,433,3.465,434,2.325,435,2.325,436,2.325,437,1.941,438,2.325,439,2.325,440,1.941,441,1.941,442,2.325,443,2.325]],["title/modules/ServicesModule.html",[105,1.693,111,1.867]],["body/modules/ServicesModule.html",[3,0.423,4,0.423,5,0.371,29,0.032,61,0.836,63,1.024,74,0.423,75,0.227,103,0.024,104,0.024,105,2.583,107,2.023,108,2.849,111,3.553,113,3.568,114,2.793,115,2.793,122,3.36,124,3.212,129,3.568,328,3.139,334,3.168,338,2.481,340,3.139,377,2.849,380,2.793,392,2.849,396,2.793,444,3.212,445,3.212,446,3.212,447,3.848,448,4.103,449,4.915,450,3.848,451,3.848,452,4.103]],["title/classes/UpdateUserDto.html",[75,0.19,224,1.544]],["body/classes/UpdateUserDto.html",[3,0.5,4,0.5,5,0.438,8,0.631,25,1.552,29,0.032,61,0.756,74,0.5,75,0.268,103,0.027,104,0.027,130,1.833,131,2.181,133,3.303,134,2.613,136,1.333,171,2.637,223,2.391,224,2.613,453,3.798,454,5.452,455,4.55,456,4.55,457,4.55]],["title/classes/User.html",[75,0.19,136,0.787]],["body/classes/User.html",[3,0.359,4,0.359,5,0.315,13,0.315,14,1.777,23,0.911,29,0.033,30,0.751,31,0.693,48,2.737,58,1.229,61,0.611,74,0.549,75,0.193,82,0.944,103,0.022,104,0.022,121,1.716,131,1.565,136,1.513,137,3.22,138,3.24,139,3.603,140,2.813,178,2.156,209,1.936,260,2.013,458,2.104,459,5.351,460,4.467,461,3.264,462,3.682,463,3.264,464,4.467,465,3.264,466,3.682,467,3.264,468,5.589,469,3.682,470,3.264,471,3.682,472,2.369,473,2.369,474,5.351,475,2.104,476,2.725]],["title/classes/User-1.html",[75,0.159,101,1.742,136,0.661]],["body/classes/User-1.html",[3,0.295,4,0.295,5,0.258,8,0.75,13,0.258,14,1.55,20,1.08,23,0.885,26,0.94,27,1.688,28,0.656,29,0.033,30,0.885,31,0.645,32,0.656,58,1.171,61,0.721,74,0.295,75,0.227,79,0.713,82,0.775,103,0.019,104,0.019,130,1.979,131,1.285,136,1.558,137,2.899,138,3.016,139,3.353,140,2.583,143,3.211,144,3.211,152,3.211,167,1.947,170,3.754,171,1.554,174,2.792,178,1.979,200,1.979,209,2.156,222,1.554,223,1.41,248,2.23,260,1.812,275,2.022,318,2.792,326,1.729,460,4.102,462,4.102,464,4.102,466,3.211,477,2.238,478,3.846,479,3.846,480,4.52,481,2.682,482,3.846,483,2.682,484,5.202,485,2.682,486,3.846,487,3.846,488,3.846,489,3.846,490,3.846,491,2.682,492,2.682,493,3.846,494,2.238,495,1.947,496,2.682,497,2.682,498,2.682,499,2.682,500,2.682,501,2.682,502,2.682,503,2.682]],["title/classes/UserListDto.html",[75,0.19,231,2.076]],["body/classes/UserListDto.html",[3,0.486,4,0.486,5,0.426,8,0.613,13,0.426,14,2.158,23,0.752,29,0.032,31,0.548,61,0.613,74,0.486,75,0.261,103,0.026,104,0.026,131,2.119,134,2.568,136,1.501,191,2.53,226,2.119,231,3.454,270,2.562,349,3.454,504,4.472,505,3.69,506,5.358,507,4.42]],["title/controllers/UsersController.html",[184,1.867,508,2.076]],["body/controllers/UsersController.html",[3,0.147,4,0.147,5,0.129,8,0.877,13,0.129,15,0.643,17,0.596,20,0.54,23,0.638,25,1.382,26,1.181,27,0.588,28,0.824,29,0.032,30,0.732,31,0.599,32,0.824,33,2.54,34,1.299,40,3.271,44,1.181,46,1.927,54,1.87,58,0.961,61,0.596,63,0.357,68,0.777,69,0.973,70,1.119,74,0.147,75,0.079,78,0.643,79,1.144,81,0.643,85,1.51,103,0.011,104,0.011,130,1.732,134,1.074,136,1.54,137,2.172,138,1.954,140,1.97,171,0.777,174,2.941,184,1.672,186,0.864,190,1.86,191,2.055,193,1.771,194,1.517,195,1.517,196,2.26,200,2.046,201,1.942,202,2.317,204,1.178,205,1.178,209,2.518,212,1.97,213,2.813,216,0.777,222,0.777,223,1.178,224,2.244,225,0.864,226,0.643,227,1.299,228,0.705,229,0.973,248,0.777,249,1.119,250,1.178,251,0.864,252,1.119,253,1.119,254,1.626,255,1.87,259,1.119,260,2.155,262,1.97,275,2.369,281,1.615,347,1.626,349,1.444,350,0.777,352,0.777,354,0.973,355,0.777,357,1.626,364,0.973,374,2.446,417,2.094,508,1.444,509,1.119,510,1.341,511,1.341,512,3.37,513,2.24,514,2.24,515,4.833,516,3.37,517,4.507,518,3.37,519,3.37,520,1.341,521,1.341,522,1.341,523,4.507,524,2.24,525,1.341,526,4.051,527,1.341,528,1.341,529,4.051,530,2.885,531,4.051,532,4.051,533,4.051,534,4.051,535,4.051,536,4.3,537,2.24,538,4.051,539,1.341,540,1.341,541,1.341,542,1.341,543,1.341,544,1.341,545,1.341,546,1.341,547,2.24,548,2.24,549,1.341,550,3.37,551,1.341,552,4.051,553,3.37,554,5.65,555,1.341,556,1.341,557,1.341,558,1.341,559,5.6,560,3.37,561,1.341,562,1.341,563,1.341,564,2.885,565,2.094,566,1.341,567,1.341,568,1.341,569,1.341,570,1.341]],["title/injectables/UsersDatabaseService.html",[62,0.722,571,2.076]],["body/injectables/UsersDatabaseService.html",[3,0.204,4,0.204,5,0.179,8,0.615,13,0.179,15,0.891,17,0.776,20,1.176,23,0.802,25,1.393,26,1.205,28,1.085,29,0.033,30,0.756,31,0.55,32,1.085,44,1.313,46,2.047,48,1.792,50,2.368,51,3.114,58,1.077,59,2.731,61,0.653,62,0.654,63,0.494,74,0.204,75,0.11,76,0.891,79,1.181,82,1.284,85,1.898,101,1.881,103,0.014,104,0.014,121,0.977,136,1.542,187,3.577,191,1.792,192,3.723,193,2.147,194,1.534,195,1.534,196,2.147,200,1.898,201,2.575,202,2.668,204,1.534,205,1.534,209,2.24,212,1.534,226,0.891,258,2.861,260,2.274,262,2.147,272,0.815,281,1.399,312,2.616,341,1.692,344,3.42,345,2.436,347,3.222,349,1.881,350,1.692,352,1.692,354,2.119,355,1.692,357,2.119,372,2.119,437,2.436,440,2.436,441,3.409,471,3.009,472,1.349,473,1.349,480,1.551,495,1.349,571,1.881,572,1.551,573,1.858,574,4.084,575,1.858,576,2.919,577,4.084,578,1.858,579,1.858,580,1.858,581,1.858,582,1.858,583,1.858,584,1.349,585,1.349,586,1.858,587,1.858,588,1.858,589,3.604,590,2.919,591,2.919,592,2.919,593,2.919,594,1.858,595,1.858,596,1.858,597,1.858,598,2.919,599,1.858,600,1.858,601,2.919,602,1.858,603,1.858,604,1.858]],["title/modules/UsersModule.html",[105,1.693,112,1.867]],["body/modules/UsersModule.html",[3,0.422,4,0.422,5,0.37,29,0.033,30,0.653,61,0.868,63,1.021,74,0.422,75,0.226,103,0.024,104,0.024,105,2.579,107,2.017,112,2.844,117,3.203,120,3.203,121,2.017,129,3.562,136,0.938,185,3.486,186,3.163,191,2.153,228,2.579,229,2.786,250,2.579,361,2.844,448,3.203,452,4.096,469,3.203,475,3.163,495,2.786,508,3.486,571,3.163,584,2.786,585,2.786,605,3.838,606,3.838,607,3.838,608,3.838,609,3.838,610,3.838,611,3.838]],["title/injectables/UsersService.html",[62,0.722,250,1.693]],["body/injectables/UsersService.html",[3,0.21,4,0.21,5,0.184,8,0.661,10,1.389,13,0.184,15,0.917,17,0.795,20,1.203,23,0.812,25,1.416,26,1.371,27,1.311,28,1.101,29,0.033,30,0.766,31,0.558,32,1.101,44,1.26,46,2,48,0.84,50,1.732,58,1.087,61,0.624,62,0.67,63,0.509,74,0.21,75,0.113,78,1.99,79,1.269,81,0.917,82,1.379,85,1.48,103,0.015,104,0.015,130,1.922,136,1.532,178,1.672,190,1.926,191,1.822,192,3.614,193,2.182,194,1.57,195,1.57,196,2.366,200,2.007,201,2.287,202,2.811,204,2.182,205,1.57,209,2.377,212,1.57,216,1.11,222,1.11,223,1.57,224,2.471,225,1.234,226,0.917,250,2.182,251,1.926,258,2.676,260,2.077,262,1.57,272,0.84,275,1.931,281,1.99,312,3.268,341,2.406,344,2.168,350,1.732,352,1.732,355,1.732,361,1.11,363,2.494,364,2.168,371,3.758,372,2.667,373,3.758,374,1.389,375,4.16,376,3.067,421,2.494,584,1.389,585,1.389,612,1.598,613,1.914,614,1.914,615,2.987,616,3.674,617,1.914,618,1.914,619,1.914,620,1.914,621,1.914,622,1.914,623,1.914,624,1.914,625,1.914,626,1.914,627,3.674,628,1.914,629,1.914,630,1.914,631,1.914]],["title/coverage.html",[632,3.649]],["body/coverage.html",[0,1.853,1,1.853,5,0.277,6,2.4,7,2.4,26,0.703,29,0.032,31,0.356,62,1.276,75,0.327,103,0.02,104,0.02,122,1.511,130,1.158,132,2.4,133,2.933,136,0.988,168,2.087,184,2.342,185,1.853,187,2.933,188,2.4,207,1.853,224,1.378,227,1.666,228,1.511,231,1.853,234,1.853,239,1.853,250,1.511,265,2.4,273,2.4,274,2.4,292,2.4,293,2.4,314,2.042,315,1.666,317,2.933,328,1.666,329,1.666,330,2.709,331,2.933,340,1.666,341,1.666,342,2.933,343,2.933,361,1.666,362,2.933,377,1.666,378,2.4,383,2.4,384,2.4,392,1.666,407,2.087,453,2.4,458,2.605,475,1.853,477,2.4,504,2.4,505,2.4,508,1.853,509,2.4,571,1.853,572,2.4,612,2.4,632,2.4,633,2.875,634,2.875,635,2.875,636,6.434,637,4.041,638,5.07,639,2.4,640,4.459,641,2.4,642,4.673,643,4.673,644,4.041,645,5.54,646,5.904,647,2.875,648,2.875,649,2.875,650,4.041,651,4.041,652,5.341,653,2.875,654,2.875,655,2.875,656,2.4,657,4.232,658,4.232,659,2.4,660,2.4,661,2.4,662,2.4,663,2.875,664,2.875]],["title/dependencies.html",[108,2.242,665,2.255]],["body/dependencies.html",[29,0.033,63,1.074,64,2.34,65,2.931,71,3.37,72,3.37,73,3.37,75,0.299,103,0.025,104,0.025,108,2.34,121,2.122,165,2.931,167,2.931,171,2.34,221,2.931,285,3.37,332,2.602,335,2.602,422,3.37,472,2.931,494,3.37,666,4.037,667,4.037,668,4.037,669,4.037,670,4.037,671,5.807,672,4.037,673,4.037,674,4.037,675,4.037,676,4.037,677,4.037,678,4.037,679,4.037,680,4.037,681,4.037,682,4.037,683,4.037,684,4.037,685,4.037,686,4.037,687,4.037,688,4.037,689,4.037,690,4.037,691,4.037,692,4.037,693,4.037]],["title/miscellaneous/enumerations.html",[694,1.186,695,3.228]],["body/miscellaneous/enumerations.html",[11,3.512,12,3.512,13,0.405,29,0.031,40,3.054,66,3.351,68,3.27,69,3.773,90,3.512,103,0.026,104,0.026,178,2.518,330,2.439,407,3.773,423,3.512,425,4.339,426,3.512,427,3.512,694,1.846,695,3.512,696,4.207,697,5.892,698,4.207,699,3.512,700,4.207,701,4.207,702,3.054,703,4.207,704,4.207,705,4.207,706,4.207,707,4.207,708,4.207,709,4.207,710,4.207,711,4.207,712,4.207,713,4.207,714,4.207,715,4.207]],["title/miscellaneous/functions.html",[694,1.186,716,3.228]],["body/miscellaneous/functions.html",[8,0.683,13,0.306,25,1.083,26,0.776,28,1.293,29,0.03,30,0.972,31,0.708,32,1.293,44,1.293,46,1.083,48,1.393,50,2.509,51,1.84,58,1.274,77,3.614,103,0.021,104,0.021,134,2.738,135,2.305,145,3.614,146,3.614,156,4.112,164,4.621,178,1.744,200,1.279,254,2.305,270,2.509,275,2.275,276,3.142,282,2.65,311,3.067,326,2.047,327,3.142,639,2.65,640,3.614,641,4.112,657,2.65,658,4.621,659,3.614,660,3.614,661,3.614,662,3.614,694,1.393,716,2.65,717,3.175,718,5.29,719,3.175,720,5.713,721,4.926,722,3.175,723,3.175,724,3.175,725,5.713,726,4.329,727,4.926,728,4.926,729,5.29,730,3.175,731,3.175,732,5.536,733,4.329,734,3.175,735,3.175,736,3.175,737,3.175,738,3.175]],["title/index.html",[13,0.31,739,2.689]],["body/index.html",[0,2.788,29,0.031,101,2.788,103,0.026,104,0.026,106,4.002,107,2.273,108,3.065,109,3.61,110,3.61,111,3.599,112,3.31,113,3.838,114,3.139,115,3.139,122,3.304,131,2.073,186,2.788,272,1.898,316,2.507,444,3.61,445,3.61,446,3.61,565,3.139,739,3.61,740,3.61,741,4.325,742,4.325,743,4.325]],["title/modules.html",[107,2.298]],["body/modules.html",[29,0.028,103,0.028,104,0.028,106,3.126,107,2.549,111,2.811,112,2.811,744,5.662,745,5.662,746,5.662,747,5.996,748,4.85,749,4.85]],["title/properties.html",[14,1.558,665,2.255]],["body/properties.html",[8,0.682,14,1.981,29,0.032,103,0.028,104,0.028,417,3.57,750,4.918,751,4.918,752,4.918,753,4.918]],["title/miscellaneous/typealiases.html",[694,1.186,754,3.867]],["body/miscellaneous/typealiases.html",[13,0.479,29,0.028,31,0.616,103,0.028,104,0.028,458,3.204,473,4.169,694,2.181,755,4.971,756,4.149]],["title/miscellaneous/variables.html",[694,1.186,702,2.807]],["body/miscellaneous/variables.html",[13,0.362,29,0.032,30,0.639,31,0.725,58,1.16,103,0.024,104,0.024,168,3.512,178,2.413,228,2.814,270,3.473,276,2.726,317,2.726,328,3.103,330,2.177,331,3.512,340,3.103,342,2.726,343,3.512,358,4.104,359,4.469,360,4.104,361,3.103,362,2.726,370,3.135,458,2.421,475,3.119,476,3.135,565,2.726,656,3.135,694,1.648,699,3.135,702,2.726,740,3.135,756,3.135,757,3.755,758,3.755,759,3.755,760,3.755,761,3.755,762,3.755,763,3.755,764,3.755,765,3.755,766,3.755,767,3.755,768,3.755,769,3.755,770,3.755,771,3.755,772,3.755,773,3.755]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":750,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":101,"title":{"classes/User-1.html":{}},"body":{"guards/ApiKeyGuard.html":{},"injectables/UsersDatabaseService.html":{},"index.html":{}}}],["1.7.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":593,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["2",{"_index":741,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["2048",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":740,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":487,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["4",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["4.1.2",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["4027",{"_index":488,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["404",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["409",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["4096",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["5",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":743,"title":{},"body":{"index.html":{}}}],["6.1.2",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":742,"title":{},"body":{"index.html":{}}}],["7.2.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["ab9d",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["access",{"_index":33,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{}}}],["accessing",{"_index":421,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["address",{"_index":155,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["aliases",{"_index":755,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":374,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":11,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":83,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["apikeyguard",{"_index":1,"title":{"guards/ApiKeyGuard.html":{}},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["apikeys",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["apikeys.length",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["apikeys[0].tostring",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["apioperation",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":170,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":152,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["apisecurity",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["application",{"_index":34,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":96,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["array",{"_index":205,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":192,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":753,"title":{},"body":{"properties.html":{}}}],["available",{"_index":749,"title":{},"body":{"modules.html":{}}}],["await",{"_index":258,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["ba47",{"_index":489,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":376,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["bcrypt",{"_index":285,"title":{},"body":{"injectables/HashPipe.html":{},"dependencies.html":{}}}],["body",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":45,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["bootstrap",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":747,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":744,"title":{},"body":{"modules.html":{}}}],["call",{"_index":305,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":301,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":18,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["canactivate(context",{"_index":36,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["catch",{"_index":440,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["catch((err",{"_index":405,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["catcherror",{"_index":308,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":310,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":486,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["class",{"_index":75,"title":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":131,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":408,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["cloud",{"_index":333,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":422,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["clouds",{"_index":393,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["cls",{"_index":729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_servicesmodule",{"_index":444,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_exports",{"_index":445,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_providers",{"_index":446,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["config.service",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{}}}],["config.service.ts",{"_index":384,"title":{},"body":{"injectables/MongodbConfigService.html":{},"coverage.html":{}}}],["config.service.ts:15",{"_index":391,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["config.service.ts:29",{"_index":394,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["configmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":22,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{}}}],["configuration",{"_index":35,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{}}}],["conflictexception",{"_index":372,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connecting",{"_index":387,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["connection",{"_index":339,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{}}}],["connection_string",{"_index":426,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":403,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["console.log(message",{"_index":381,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":382,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":82,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":168,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":142,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":151,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_min_length",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":159,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_min_length",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":20,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":21,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{}}}],["constructor(databaseservice",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(loggingservice",{"_index":410,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":80,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{}}}],["constructor(secretmanagerservice",{"_index":390,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["constructor(user",{"_index":479,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":573,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":254,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":41,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.gettype",{"_index":88,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":89,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["controller",{"_index":184,"title":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('users",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":186,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["coverage",{"_index":632,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":25,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["create(@body",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":364,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":197,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["create(user",{"_index":345,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":347,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["createmongooseoptions",{"_index":389,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["creates",{"_index":248,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":130,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":135,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MongodbConfigService.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":190,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":42,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["data",{"_index":200,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":600,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":288,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":290,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":344,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":585,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":343,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":346,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":348,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":351,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":356,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:47",{"_index":353,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":608,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":572,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:12",{"_index":575,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:24",{"_index":578,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:42",{"_index":579,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:53",{"_index":580,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:66",{"_index":582,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:84",{"_index":581,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":495,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":140,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":270,"title":{},"body":{"classes/GuidDto.html":{},"injectables/LoggingService.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":212,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["delete(':guid",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":354,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["deleted.'})@apiresponse({status",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["depedency",{"_index":370,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":359,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":318,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["display",{"_index":462,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["display_name_max_length",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":148,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":137,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["document",{"_index":471,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{}}}],["document.save",{"_index":588,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":594,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":596,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":144,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["dto",{"_index":134,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":257,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["dto/create",{"_index":222,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/guid.dto",{"_index":230,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["dto/update",{"_index":225,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":232,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["ef3aa7fd1bc5",{"_index":490,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["email",{"_index":138,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["email_max_length",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":213,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}}}],["entities/user.entity",{"_index":226,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":478,"title":{},"body":{"classes/User-1.html":{}}}],["enum",{"_index":424,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":695,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":67,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{}}}],["environment",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["envnames",{"_index":66,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["envnames.project_name",{"_index":435,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["err",{"_index":441,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["err.code",{"_index":592,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.name",{"_index":590,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":443,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":311,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["example",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["exception.interceptor",{"_index":236,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["exception.interceptor.ts",{"_index":293,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":302,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":484,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":598,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execution",{"_index":43,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":37,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":357,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["exists",{"_index":281,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":77,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["export",{"_index":74,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":449,"title":{},"body":{"modules/ServicesModule.html":{}}}],["express",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":456,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["factory",{"_index":732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fails",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":50,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":245,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":204,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["find((arg",{"_index":95,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["findall",{"_index":193,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":194,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["findone(data",{"_index":206,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["findone(guid",{"_index":350,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["forbidden",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["found",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["found.'})@apiresponse({status",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["function",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":716,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':guid')@apioperation({description",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({description",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["getargs",{"_index":94,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["getconnectionstring",{"_index":336,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{}}}],["gets",{"_index":413,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":409,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":414,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["given",{"_index":275,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":332,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":748,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":189,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller",{"_index":609,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":188,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:49",{"_index":199,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":203,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":208,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":215,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":211,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc/grpc",{"_index":72,"title":{},"body":{"guards/ApiKeyGuard.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["grpcmethod",{"_index":198,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersservice",{"_index":185,"title":{"controllers/GrpcUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["guard",{"_index":0,"title":{"guards/ApiKeyGuard.html":{}},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["guards/api",{"_index":237,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["guid",{"_index":260,"title":{},"body":{"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["guiddto",{"_index":207,"title":{"classes/GuidDto.html":{}},"body":{"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"coverage.html":{}}}],["handler",{"_index":306,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":464,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":277,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":239,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"coverage.html":{}}}],["hashrounds",{"_index":286,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":284,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":289,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":291,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":70,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/UsersController.html":{}}}],["headernames",{"_index":69,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["headers",{"_index":90,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":92,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["helper.ts",{"_index":658,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":160,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["http",{"_index":55,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["httpcode",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(201",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception",{"_index":296,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":234,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":303,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["id",{"_index":209,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["iloggingservice",{"_index":315,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":76,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["import",{"_index":61,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":60,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["initialized",{"_index":482,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":216,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(logging_service",{"_index":428,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(secret_manager_service",{"_index":397,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["inject(users_database_service",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":253,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":62,"title":{"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":272,"title":{},"body":{"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":360,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["injectmodel",{"_index":583,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":586,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":27,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["instanceof",{"_index":97,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":149,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SecretManagerService.html":{}}}],["intercept",{"_index":298,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":299,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":294,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":235,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["interface",{"_index":314,"title":{"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":316,"title":{},"body":{"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":584,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":229,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["invalid",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["isecretmanagerservice",{"_index":329,"title":{"interfaces/ISecretManagerService.html":{}},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["isemail",{"_index":162,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":150,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":163,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["isstring()@isuuid('4",{"_index":267,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":141,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":158,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":269,"title":{},"body":{"classes/GuidDto.html":{}}}],["isuuid('4",{"_index":271,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersdatabaseservice",{"_index":341,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":227,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jane",{"_index":143,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":153,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["js",{"_index":73,"title":{},"body":{"guards/ApiKeyGuard.html":{},"dependencies.html":{}}}],["key",{"_index":12,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/enumerations.html":{}}}],["key.guard",{"_index":238,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["key.guard.ts",{"_index":7,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:16",{"_index":24,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:29",{"_index":38,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:50",{"_index":53,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["latest",{"_index":416,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":164,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["length(constants.display_name_min_length",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.password_min_length",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":751,"title":{},"body":{"properties.html":{}}}],["list",{"_index":349,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{}}}],["list.dto",{"_index":233,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["list.dto.ts",{"_index":505,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:7",{"_index":507,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["loader",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":324,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":320,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":321,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":319,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":380,"title":{},"body":{"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["logging.service",{"_index":450,"title":{},"body":{"modules/ServicesModule.html":{}}}],["logging_service",{"_index":328,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingservice",{"_index":377,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["logic",{"_index":363,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":335,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.interface",{"_index":396,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["manager.interface.ts",{"_index":331,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.interface.ts:13",{"_index":337,"title":{},"body":{"interfaces/ISecretManagerService.html":{}}}],["manager.service",{"_index":451,"title":{},"body":{"modules/ServicesModule.html":{}}}],["manager.service.ts",{"_index":407,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:19",{"_index":411,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:33",{"_index":420,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:39",{"_index":412,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:48",{"_index":415,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["matching",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":146,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":325,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["metadata",{"_index":71,"title":{},"body":{"guards/ApiKeyGuard.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["method",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":17,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":145,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":694,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["model",{"_index":574,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":338,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["mongodbconfigservice",{"_index":122,"title":{"injectables/MongodbConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/MongodbConfigService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["mongoose",{"_index":472,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":610,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemoduleoptions",{"_index":395,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["mongooseoptionsfactory",{"_index":385,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["mongoservererror",{"_index":591,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":30,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":68,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["names.ts",{"_index":697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":307,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/common",{"_index":63,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":64,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":221,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongodbConfigService.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":26,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":300,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":309,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["notfoundexception",{"_index":375,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":276,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":47,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["operations",{"_index":252,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}}}],["optional",{"_index":32,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":386,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["otherwise",{"_index":51,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{}}}],["output",{"_index":722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":739,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":665,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":79,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["param('guid",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseint(this.configservice.get(envnames.hash_rounds",{"_index":287,"title":{},"body":{"injectables/HashPipe.html":{}}}],["parseuuidpipe",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":455,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":457,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":139,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["password_max_length",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':guid",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["pipe",{"_index":241,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["pipe.ts",{"_index":274,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:10",{"_index":278,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:22",{"_index":280,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":240,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["pipetransform",{"_index":283,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":156,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["post",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@httpcode(201)@apioperation({description",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["private",{"_index":15,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["project_name",{"_index":705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/${this.configservice.get",{"_index":434,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":46,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":398,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["prop",{"_index":468,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":459,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["provide",{"_index":452,"title":{},"body":{"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":10,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":448,"title":{},"body":{"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":251,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["providing",{"_index":506,"title":{},"body":{"classes/UserListDto.html":{}}}],["public",{"_index":388,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["rcp",{"_index":56,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["read",{"_index":54,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/UsersController.html":{}}}],["readapikey",{"_index":19,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["readapikey(context",{"_index":52,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":399,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["reject(err",{"_index":406,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["remove",{"_index":195,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["remove(data",{"_index":210,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["remove(guid",{"_index":352,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":40,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":91,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["requests",{"_index":57,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["required",{"_index":474,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{}}}],["resolve(options",{"_index":404,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["result",{"_index":202,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["result.acknowledged",{"_index":601,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":604,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.matchedcount",{"_index":602,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":304,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":295,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":85,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":44,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["rpc",{"_index":93,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["rpcexception",{"_index":297,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":313,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rxjs",{"_index":65,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"dependencies.html":{}}}],["schema",{"_index":469,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":470,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":476,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":334,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{}}}],["secret_manager_service",{"_index":340,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/MongodbConfigService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretmanagerservice",{"_index":392,"title":{"injectables/SecretManagerService.html":{}},"body":{"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["secretmanagerserviceclient",{"_index":419,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":418,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":425,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":423,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets/${secretname}/versions/latest",{"_index":436,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secrets_from_env",{"_index":707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["service",{"_index":78,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/GrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["serviceapikey",{"_index":16,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["services/mongodb",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["services/services.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["servicesmodule",{"_index":111,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["single",{"_index":266,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"modules/ServicesModule.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../constants.ts",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env",{"_index":696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../header",{"_index":698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":756,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["src/env",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":6,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["src/header",{"_index":713,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/interceptors/http",{"_index":292,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":273,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/services/logging.interface.ts",{"_index":317,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/logging.interface.ts:15",{"_index":323,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/services/logging.service.ts",{"_index":378,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/services/logging.service.ts:14",{"_index":379,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/services/mongodb",{"_index":383,"title":{},"body":{"injectables/MongodbConfigService.html":{},"coverage.html":{}}}],["src/services/secret",{"_index":330,"title":{},"body":{"interfaces/ISecretManagerService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/services/services.module.ts",{"_index":447,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/users/database/user.schema.ts",{"_index":458,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:12",{"_index":461,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":463,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":465,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":467,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/create",{"_index":132,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":265,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:9",{"_index":268,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/update",{"_index":453,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":504,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":477,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":481,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":483,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":485,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":491,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":492,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":342,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":362,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":365,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":366,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":367,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:43",{"_index":369,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:50",{"_index":368,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":187,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:126",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:149",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:99",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":605,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:103",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:76",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/validation/constants.ts",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":322,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["stopatfirsterror",{"_index":242,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["string",{"_index":58,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/ISecretManagerService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":659,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["support",{"_index":745,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":746,"title":{},"body":{"modules.html":{}}}],["table",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/test",{"_index":657,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":661,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":731,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":662,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":735,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":157,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["then((connectionstring",{"_index":401,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["this.client",{"_index":433,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.accesssecretversion",{"_index":438,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.configservice.get(envnames.api_key",{"_index":87,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.configservice.get(envnames.secrets_from_env",{"_index":431,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.configservice.get(secretname",{"_index":432,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.databaseservice.create(user",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":496,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":498,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":429,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.guid",{"_index":502,"title":{},"body":{"classes/User-1.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":442,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.password",{"_index":500,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":84,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.secretmanagerservice",{"_index":400,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["this.serviceapikey",{"_index":86,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.usermodel(user",{"_index":587,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":603,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":595,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":597,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":599,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(data",{"_index":256,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["this.usersservice.findall",{"_index":259,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":261,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["this.usersservice.findone(guid",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":264,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["this.usersservice.remove(guid",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(data.guid",{"_index":263,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["this.usersservice.update(guid",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":312,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":373,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":371,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":166,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{}}}],["transform(value",{"_index":279,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":282,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":167,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["true",{"_index":48,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":437,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["type",{"_index":31,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/MongodbConfigService.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":754,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":59,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["undefined})@apiresponse({status",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":460,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":244,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["unlicensed",{"_index":752,"title":{},"body":{"properties.html":{}}}],["unqiue",{"_index":466,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["update",{"_index":196,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["update(data",{"_index":214,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["update(guid",{"_index":355,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":262,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["updated.'})@apiresponse({status",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":224,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":454,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":402,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["use",{"_index":430,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["use_swagger",{"_index":711,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":358,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":217,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeyguard",{"_index":247,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useinterceptors",{"_index":218,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useinterceptors(new",{"_index":246,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["usepipes",{"_index":219,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["user",{"_index":136,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.'})@apiresponse({status",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.displayname",{"_index":497,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":223,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":133,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":147,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":154,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":161,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":499,"title":{},"body":{"classes/User-1.html":{}}}],["user.name",{"_index":611,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":501,"title":{},"body":{"classes/User-1.html":{}}}],["usercontroller",{"_index":249,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}}}],["userdatabase",{"_index":480,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":503,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":473,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":577,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":589,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":231,"title":{"classes/UserListDto.html":{}},"body":{"controllers/GrpcUsersService.html":{},"classes/UserListDto.html":{},"coverage.html":{}}}],["usermodel",{"_index":576,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":191,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.'})@apiresponse({status",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":607,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":606,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["users_api_key",{"_index":710,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_database_service",{"_index":361,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_hash_rounds",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_project_name",{"_index":706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_secrets_from_env",{"_index":708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_service",{"_index":228,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_use_swagger",{"_index":712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userschema",{"_index":475,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":508,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersdatabaseservice",{"_index":571,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":112,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":250,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersserviceconnectionstring",{"_index":427,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["user})@apiresponse({status",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid",{"_index":494,"title":{},"body":{"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":493,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":49,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validate",{"_index":39,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validated",{"_index":255,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersController.html":{}}}],["validating",{"_index":9,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validation",{"_index":728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation/constants",{"_index":169,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validationpipe",{"_index":220,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["validator",{"_index":165,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"dependencies.html":{}}}],["value",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["variable",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":702,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":417,"title":{},"body":{"injectables/SecretManagerService.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["version.payload.data.tostring",{"_index":439,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":327,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":243,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["whose",{"_index":201,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/MongodbConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["x",{"_index":715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":714,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":326,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard for validating the provided api key.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                serviceApiKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key.guard.ts:16\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access to the application configuration.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:29\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:50\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { EnvNames } from '../env-names';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Guard for validating the provided api key.\n */\n@Injectable()\nexport class ApiKeyGuard implements CanActivate {\n  /**\n   * The expected api key for the service.\n   */\n  private serviceApiKey: string;\n\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param configService Access to the application configuration.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    if (!this.serviceApiKey) {\n      this.serviceApiKey = this.configService.get(EnvNames.API_KEY);\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  private readApiKey(context: ExecutionContext): string | undefined {\n    if (context.getType() === 'http') {\n      const request = context.switchToHttp().getRequest();\n      const headers = request?.headers;\n\n      if (!headers) {\n        return;\n      }\n\n      return headers[HeaderNames.X_API_KEY];\n    } else if (context.getType() === 'rpc') {\n      const metadata: Metadata = context\n        .getArgs()\n        .find((arg) => arg instanceof Metadata);\n      if (!metadata) {\n        return;\n      }\n\n      const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n      if (!apiKeys || apiKeys.length !== 1) {\n        return;\n      }\n\n      return apiKeys[0].toString();\n    }\n\n    return;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nServicesModule\n\nServicesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ServicesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ServicesModule } from './services/services.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { MongodbConfigService } from './services/mongodb-config.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      imports: [ServicesModule],\n      useClass: MongodbConfigService,\n    }),\n    ServicesModule,\n    UsersModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../../validation/constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from './interfaces/users.interface';\nimport GuidDto from './dto/guid.dto';\nimport UserListDto from './dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../interceptors/http-exception.interceptor';\nimport { ApiKeyGuard } from '../guards/api-key.guard';\nimport { HashPipe } from '../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID('4')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  @IsString()\n  @IsUUID('4')\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access the application configuration.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:22\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { PipeTransform, Injectable } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { EnvNames } from '../env-names';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param configService Access the application configuration.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    const hashRounds = parseInt(this.configService.get(EnvNames.HASH_ROUNDS));\n    if (data.email) {\n      data.email = hashSync(data.email, hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISecretManagerService.html":{"url":"interfaces/ISecretManagerService.html","title":"interface - ISecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/secret-manager.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \ngetConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.interface.ts:13\n                \n            \n\n\n            \n                \n                    Get the mongodb connection string.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const SECRET_MANAGER_SERVICE = 'SECRET_MANAGER_SERVICE';\n\n/**\n * Access for the google cloud secret manager.\n */\nexport interface ISecretManagerService {\n  /**\n   * Get the mongodb connection string.\n   */\n  getConnectionString(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:47\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:50\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:43\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongodbConfigService.html":{"url":"injectables/MongodbConfigService.html","title":"injectable - MongodbConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongodbConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/mongodb-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A MongooseOptionsFactory for creating the options for connecting to mongodb.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createMongooseOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(secretManagerService: ISecretManagerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/mongodb-config.service.ts:15\n                            \n                        \n\n                \n                    \n                            Create a new instance of MongodbConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        secretManagerService\n                                                  \n                                                        \n                                                                        ISecretManagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access google clouds secret manager.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createMongooseOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMongooseOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/services/mongodb-config.service.ts:29\n                \n            \n\n\n            \n                \n                    Create the options for connecting to mongodb.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result are the MongooseModuleOptions.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport {\n  MongooseModuleOptions,\n  MongooseOptionsFactory,\n} from '@nestjs/mongoose';\nimport {\n  ISecretManagerService,\n  SECRET_MANAGER_SERVICE,\n} from './secret-manager.interface';\n\n/**\n * A MongooseOptionsFactory for creating the options for connecting to mongodb.\n */\n@Injectable()\nexport class MongodbConfigService implements MongooseOptionsFactory {\n  /**\n   * Create a new instance of MongodbConfigService.\n   * @param secretManagerService Access google clouds secret manager.\n   */\n  constructor(\n    @Inject(SECRET_MANAGER_SERVICE)\n    private readonly secretManagerService: ISecretManagerService,\n  ) {}\n\n  /**\n   * Create the options for connecting to mongodb.\n   * @returns A Promise whose result are the MongooseModuleOptions.\n   */\n  public createMongooseOptions(): Promise {\n    return new Promise((resolve, reject) => {\n      this.secretManagerService\n        .getConnectionString()\n        .then((connectionString: string) => {\n          const options = {\n            uri: connectionString,\n          };\n\n          resolve(options);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/secret-manager.service.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Access the configuration of the application.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/secret-manager.service.ts:48\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/services/secret-manager.service.ts:33\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ISecretManagerService } from './secret-manager.interface';\nimport { ILoggingService, LOGGING_SERVICE } from './logging.interface';\nimport { EnvNames } from '../env-names';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService implements ISecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   * @param configService Access the configuration of the application.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    // use .env instead of google cloud secret manager\n    if (this.configService.get(EnvNames.SECRETS_FROM_ENV)) {\n      return this.configService.get(secretName);\n    }\n\n    // use google cloud secret manager\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.configService.get(\n      EnvNames.PROJECT_NAME,\n    )}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nMongodbConfigService \n\nMongodbConfigService \n\n\n\nServicesModule\n\nServicesModule\n\nMongodbConfigService  -->\n\nServicesModule->MongodbConfigService \n\n\n\n\n\nMongodbConfigService\n\nMongodbConfigService\n\nServicesModule -->\n\nMongodbConfigService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MongodbConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MongodbConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\nimport { MongodbConfigService } from './mongodb-config.service';\nimport { SECRET_MANAGER_SERVICE } from './secret-manager.interface';\nimport { SecretManagerService } from './secret-manager.service';\n\n@Module({\n  exports: [LOGGING_SERVICE, SECRET_MANAGER_SERVICE, MongodbConfigService],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n    {\n      provide: SECRET_MANAGER_SERVICE,\n      useClass: SecretManagerService,\n    },\n    MongodbConfigService,\n  ],\n})\nexport class ServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:12\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:59\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:99\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:149\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:126\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from './interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post()\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:24\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:42\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:53\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:84\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:66\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            GrpcUsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './users-grpc.controller';\n\n@Module({\n  controllers: [UsersController, GrpcUsersService],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:103\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/mongodb-config.service.ts\n            \n            injectable\n            MongodbConfigService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/secret-manager.interface.ts\n            \n            interface\n            ISecretManagerService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/secret-manager.interface.ts\n            \n            variable\n            SECRET_MANAGER_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/users/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/validation/constants.ts\n            \n            variable\n            Constants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvNames   (src/.../env-names.ts)\n                        \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/env-names.ts\n    \n        \n            \n                \n                    \n                        \n                        EnvNames\n                    \n                \n                    \n                        \n                            Names of environment variables.\n\n                        \n                    \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : USERS_HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : USERS_PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : USERS_SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : USERS_API_KEY\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USERS_USE_SWAGGER\n                            \n                        \n            \n        \n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/services/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nServicesModule\n\nServicesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nMongodbConfigService \n\nMongodbConfigService \n\nMongodbConfigService  -->\n\nServicesModule->MongodbConfigService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nMongodbConfigService\n\nMongodbConfigService\n\nServicesModule -->\n\nMongodbConfigService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            SECRET_MANAGER_SERVICE   (src/.../secret-manager.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/validation/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  DISPLAY_NAME_MIN_LENGTH: 3,\n  DISPLAY_NAME_MAX_LENGTH: 256,\n  EMAIL_MIN_LENGTH: 5,\n  EMAIL_MAX_LENGTH: 2048,\n  PASSWORD_MIN_LENGTH: 8,\n  PASSWORD_MAX_LENGTH: 4096,\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n\n        \n    \n\n    src/services/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/services/secret-manager.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SECRET_MANAGER_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SECRET_MANAGER_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
