var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiKeyDto.html",[0,0.104,1,2.209]],["body/classes/ApiKeyDto.html",[0,0.175,1,3.722,2,2.29,3,0.323,4,0.323,5,0.286,6,5.09,7,4.202,8,0.573,9,3.432,10,2.42,11,2.152,12,5.976,13,0.485,14,2.298,15,2.984,16,0.528,17,0.023,18,0.994,19,2.147,20,4.933,21,0.716,22,4.933,23,2.164,24,0.362,25,4.07,26,5.09,27,3.073,28,0.323,29,2.29,30,0.019,31,0.019]],["title/injectables/ApiKeyGrpcGuard.html",[32,0.671,33,2.037]],["body/injectables/ApiKeyGrpcGuard.html",[0,0.107,3,0.241,4,0.241,5,0.213,8,0.575,10,2.423,11,2.206,13,0.361,15,1.705,16,0.53,17,0.023,18,1.04,21,0.719,24,0.459,28,0.241,30,0.015,31,0.015,32,0.936,33,2.842,34,1.412,35,3.485,36,3.129,37,2.636,38,3.37,39,2.842,40,2.457,41,4.098,42,3.37,43,3.589,44,1.124,45,3.811,46,3.37,47,1.183,48,2.502,49,3.674,50,1.339,51,0.936,52,1.594,53,1.058,54,0.77,55,1.058,56,3.37,57,3.37,58,3.729,59,3.674,60,3.082,61,3.37,62,3.731,63,3.082,64,3.082,65,3.082,66,1.058,67,2.447,68,3.37,69,2.636,70,2.457,71,1.183,72,0.652,73,1.957,74,2.11,75,1.705,76,4.257,77,2.502,78,2.502,79,1.412,80,1.705,81,2.77,82,1.058,83,2.502,84,2.77,85,2.77,86,1.264,87,3.674,88,3.674,89,3.674,90,3.129,91,1.515,92,4.949,93,3.674,94,3.674,95,2.502,96,3.674]],["title/guards/ApiKeyGuard.html",[37,1.89,43,2.037]],["body/guards/ApiKeyGuard.html",[0,0.103,3,0.231,4,0.231,5,0.204,8,0.637,10,2.485,11,2.165,13,0.347,15,2.734,16,0.587,17,0.023,18,1.025,21,0.796,24,0.354,28,0.231,30,0.015,31,0.015,32,0.911,35,3.669,37,2.566,38,3.281,39,2.767,41,4.187,43,3.383,44,1.094,45,3.734,46,3.281,47,1.137,48,2.405,50,1.304,51,0.911,52,1.551,53,1.173,54,0.853,55,1.173,56,3.281,57,3.281,58,4.056,60,3,63,3,64,3.669,65,3.669,66,1.26,67,2.407,68,3.281,69,3.138,70,2.924,72,0.627,82,1.173,83,3.734,86,0.902,91,1.304,97,3.531,98,3.007,99,4.817,100,4.817,101,6.165,102,5.89,103,3.531,104,3.531,105,3.531,106,4.817,107,4.103,108,1.464,109,4.134,110,1.969,111,2.921,112,3.531,113,2.028,114,1.753,115,3.531,116,1.536,117,3.531,118,3.531]],["title/injectables/ApiKeyHttpGuard.html",[32,0.671,119,2.209]],["body/injectables/ApiKeyHttpGuard.html",[0,0.111,3,0.25,4,0.25,5,0.221,8,0.59,10,2.443,11,2.221,13,0.375,15,1.771,16,0.544,17,0.023,18,1.053,21,0.737,24,0.446,28,0.25,30,0.016,31,0.016,32,0.96,34,1.467,35,3.552,37,2.704,38,3.456,39,2.915,41,3.786,42,3.456,43,3.635,44,1.152,45,3.884,46,3.456,47,1.229,48,2.598,50,1.374,51,0.96,52,1.634,53,1.085,54,0.79,55,1.085,56,3.456,57,3.456,58,3.786,60,3.161,61,4.14,62,3.827,63,3.161,64,3.161,65,3.161,66,1.085,67,2.484,68,3.456,69,3.038,70,2.519,71,1.229,72,0.677,73,2.032,74,2.191,75,1.771,79,1.467,80,1.771,81,2.876,82,1.085,83,2.598,84,2.876,85,2.876,86,1.296,91,1.374,119,3.161,120,3.249,121,3.827,122,3.815,123,3.815,124,3.815,125,3.827,126,3.815,127,3.815]],["title/injectables/ApiKeyTcpGuard.html",[32,0.671,128,2.037]],["body/injectables/ApiKeyTcpGuard.html",[0,0.112,1,2.385,3,0.251,4,0.251,5,0.222,8,0.591,10,2.445,11,2.223,13,0.376,15,1.777,16,0.545,17,0.023,18,1.054,21,0.739,24,0.447,28,0.251,30,0.016,31,0.016,32,0.962,34,1.472,35,3.558,37,2.71,38,3.465,39,2.922,41,3.792,42,3.465,43,3.64,44,1.155,45,3.891,46,3.465,47,1.233,48,2.608,50,1.377,51,0.962,52,1.638,53,1.088,54,0.792,55,1.088,56,3.465,57,3.465,58,3.792,60,3.168,61,3.465,62,3.836,63,3.168,64,3.168,65,3.168,66,1.088,67,2.488,68,3.465,69,2.71,70,2.526,71,1.233,72,0.68,79,1.472,80,1.777,81,2.887,82,1.088,83,2.608,84,2.887,85,2.887,86,0.978,91,1.377,121,3.836,128,2.922,129,3.261,130,3.168,131,3.829,132,3.829,133,3.829,134,3.261,135,1.84,136,3.829,137,3.829,138,5.087]],["title/modules/AppModule.html",[139,1.078,140,2.416]],["body/modules/AppModule.html",[0,0.118,3,0.266,4,0.266,5,0.235,17,0.023,18,0.674,24,0.515,28,0.266,30,0.016,31,0.016,71,1.305,72,0.719,79,1.558,80,1.881,91,1.097,110,1.656,139,1.605,140,4.895,141,1.656,142,2.298,143,3.451,144,3.451,145,4.122,146,2.933,147,3.801,148,4.122,149,3.801,150,4.122,151,2.621,152,2.012,153,2.012,154,4.052,155,3.13,156,4.052,157,3.451,158,3.451,159,2.524,160,3.451,161,3.055,162,4.052,163,4.052,164,2.327,165,3.451,166,3.289,167,4.052,168,3.451,169,4.052,170,4.052,171,3.055,172,5.28,173,4.052,174,3.055]],["title/modules/ClientsModule.html",[139,1.078,145,2.209]],["body/modules/ClientsModule.html",[0,0.121,3,0.271,4,0.271,5,0.239,17,0.023,24,0.488,28,0.271,30,0.017,31,0.017,40,2.051,71,1.722,72,0.734,79,1.589,80,1.918,91,1.118,130,2.574,139,1.625,141,1.689,142,2.327,145,4.357,146,2.895,151,2.655,152,2.051,153,2.051,155,2.849,164,2.373,171,4.033,175,3.519,176,4.132,177,3.519,178,5.767,179,5.767,180,5.767,181,5.767,182,4.132,183,3.331,184,3.642,185,1.144,186,3.072,187,4.132,188,2.051,189,3.642,190,2.373,191,4.271,192,4.132,193,4.132,194,3.116,195,4.132,196,4.132,197,3.116,198,4.033]],["title/modules/ConfigurationModule.html",[139,1.078,146,1.543]],["body/modules/ConfigurationModule.html",[0,0.066,3,0.149,4,0.149,5,0.131,10,0.821,15,1.053,16,0.243,17,0.023,18,0.708,23,1.731,24,0.441,28,0.149,30,0.011,31,0.011,51,0.429,54,0.353,71,2.068,72,0.403,73,1.208,74,2.005,75,1.053,79,0.872,86,1.392,91,1.774,107,3.625,108,1.061,110,1.427,111,1.86,139,1.061,141,0.927,142,1.519,146,2.98,149,3.131,151,1.733,152,1.126,153,1.126,155,1.86,157,1.932,160,1.932,161,1.71,168,1.932,171,4.895,174,4.282,183,2.174,185,0.747,188,1.126,190,2.005,191,4.422,194,4.282,197,4.282,199,1.932,200,2.268,201,1.932,202,1.932,203,4.837,204,4.993,205,4.837,206,4.837,207,4.837,208,4.837,209,4.993,210,4.993,211,4.837,212,4.993,213,4.837,214,3.745,215,1.71,216,7.159,217,4.256,218,2.268,219,2.268,220,1.932,221,1.932,222,2.268,223,3.491,224,1.208,225,1.545,226,1.932,227,1.71,228,1.71,229,1.932,230,1.62,231,6.141,232,2.268,233,3.491,234,2.268,235,2.268,236,4.282,237,1.932,238,2.268,239,2.268,240,2.268,241,3.491,242,2.268,243,4.256,244,2.268,245,2.268,246,2.268,247,2.268,248,2.268,249,2.268,250,1.932,251,2.268,252,2.268,253,2.268,254,2.268,255,2.268,256,2.268,257,2.268,258,4.256,259,2.268,260,2.973,261,1.71,262,2.268,263,2.268,264,2.268,265,2.268,266,2.268,267,2.268,268,2.268,269,0.73,270,2.268,271,2.268,272,2.268,273,3.491,274,2.268,275,2.268,276,2.268,277,2.268]],["title/classes/CreateUserDto.html",[0,0.104,278,1.211]],["body/classes/CreateUserDto.html",[0,0.166,2,1.758,3,0.248,4,0.248,5,0.219,8,0.44,13,0.372,14,1.942,16,0.609,17,0.023,18,1.08,19,2.472,21,0.825,23,1.371,24,0.445,25,3.87,27,2.359,28,0.248,30,0.016,31,0.016,51,0.955,54,0.786,67,2.654,224,2.018,278,1.724,279,5.162,280,2.579,281,1.829,282,4.301,283,1.529,284,3.87,285,3.291,286,3.135,287,3.787,288,3.787,289,4.301,290,4.301,291,4.897,292,4.897,293,3.787,294,5.05,295,5.05,296,3.226,297,3.226,298,2.856,299,4.301,300,3.226,301,3.808,302,4.57,303,5.162,304,3.226,305,3.226,306,4.301,307,3.787,308,4.301,309,2.579,310,3.808,311,2.579,312,3.145,313,4.57,314,3.787,315,5.05,316,3.87,317,3.787,318,3.226,319,4.301,320,3.226,321,3.226,322,3.226,323,4.301,324,3.226]],["title/injectables/GrpcUsersClient.html",[32,0.671,184,2.416]],["body/injectables/GrpcUsersClient.html",[0,0.06,3,0.135,4,0.135,5,0.119,8,0.573,10,1.174,11,1.044,13,0.203,14,1.246,15,2.291,16,0.587,17,0.023,18,1.031,21,0.868,24,0.461,28,0.135,29,1.505,30,0.01,31,0.01,32,0.613,34,0.793,40,2.819,44,0.736,47,1.044,50,1.229,51,0.934,52,1.044,53,1.056,54,0.815,55,1.056,66,1.344,71,0.664,72,0.366,73,1.098,74,1.184,75,0.957,76,3.979,77,1.404,78,1.404,79,0.793,80,0.957,82,1.172,86,1.583,91,1.084,108,2.088,113,1.184,114,1.024,116,2.385,135,1.881,184,3.093,185,1.388,186,3.355,188,1.024,230,3.12,269,1.59,278,1.685,281,1.644,283,1.548,325,4.596,326,1.404,327,2.761,328,2.385,329,4.006,330,3.952,331,1.856,332,1.325,333,2.254,334,1.325,335,1.856,336,1.756,337,4.541,338,3.242,339,1.505,340,2.761,341,2.761,342,2.444,343,4.282,344,3.867,345,2.062,346,1.862,347,1.756,348,2.142,349,2.532,350,2.062,351,1.325,352,1.41,353,1.325,354,1.609,355,2.062,356,2.165,357,1.994,358,2.062,359,1.609,360,1.727,361,1.609,362,1.609,363,2.792,364,1.609,365,2.062,366,1.325,367,1.609,368,2.015,369,2.062,370,2.728,371,2.062,372,2.444,373,1.756,374,1.756,375,1.325,376,2.419,377,2.062,378,1.756,379,1.756,380,2.761,381,2.062,382,2.019,383,1.756,384,1.727,385,1.756,386,1.404,387,2.444,388,1.184,389,2.062,390,1.555,391,2.062,392,2.062,393,5.483,394,2.062,395,1.024,396,1.098,397,4.464,398,3.301,399,2.062,400,4.464,401,2.062,402,1.756,403,2.062,404,0.843,405,2.062,406,2.062,407,2.062,408,1.756]],["title/controllers/GrpcUsersService.html",[388,2.037,409,1.543]],["body/controllers/GrpcUsersService.html",[0,0.076,3,0.171,4,0.171,5,0.151,8,0.303,11,0.841,13,0.257,16,0.497,17,0.023,19,2.504,21,0.836,24,0.474,28,0.171,30,0.012,31,0.012,33,1.5,40,1.928,44,0.882,47,0.841,50,1.39,51,1.088,52,0.841,53,1.098,54,0.799,55,1.098,66,1.399,71,0.841,72,0.464,82,1.231,86,0.667,91,1.558,108,2.134,110,1.587,116,1.136,135,2.015,185,1.174,188,1.296,230,2.153,269,0.841,278,1.874,281,1.68,283,1.564,328,1.136,331,2.099,332,1.587,333,2.55,334,1.895,335,2.099,339,1.212,346,2.231,348,2.352,349,2.673,351,1.587,352,1.69,353,1.587,356,2.158,357,1.583,359,1.928,360,2.069,361,1.928,362,1.928,363,3.066,366,1.587,368,1.783,375,1.587,376,3.262,384,2.069,386,1.779,388,2.231,395,1.296,396,1.391,398,1.391,404,1.067,409,2.235,410,1.391,411,4.059,412,2.224,413,2.664,414,6.611,415,2.611,416,2.611,417,2.929,418,2.611,419,2.611,420,2.929,421,2.611,422,2.929,423,2.611,424,2.224,425,2.224,426,3.308,427,3.308,428,1.296,429,1.391,430,1.212,431,2.069,432,1.391,433,1.626,434,1.969,435,2.224,436,2.419,437,2.224,438,2.224,439,2.224,440,2.224,441,1.928,442,1.969,443,1.779,444,2.224,445,2.224,446,2.224,447,1.969,448,2.224,449,2.611,450,1.969,451,2.069,452,1.5,453,1.5,454,1.969,455,2.224,456,2.224,457,1.969,458,2.224,459,2.224,460,2.224,461,2.611,462,2.611]],["title/modules/GuardsModule.html",[139,1.078,147,2.037]],["body/modules/GuardsModule.html",[0,0.127,3,0.284,4,0.284,5,0.251,10,2.197,11,1.954,17,0.023,24,0.484,28,0.284,30,0.017,31,0.017,33,4.097,72,0.77,119,4.443,128,4.097,139,1.677,141,1.773,142,2.401,146,2.932,147,4.146,151,2.739,152,2.154,153,2.154,155,2.94,164,2.492,183,3.437,190,3.169,440,3.695,463,3.695,464,3.695,465,3.695,466,4.338,467,4.338,468,4.338,469,3.695]],["title/classes/GuidDto.html",[0,0.104,376,1.89]],["body/classes/GuidDto.html",[0,0.174,2,2.284,3,0.323,4,0.323,5,0.285,8,0.572,13,0.484,14,2.294,16,0.527,17,0.023,18,0.993,19,2.141,21,0.715,24,0.438,25,4.064,26,4.192,27,3.065,28,0.323,29,2.284,30,0.019,31,0.019,281,2.161,312,3.717,357,2.335,376,3.179,470,4.192,471,5.968,472,4.922,473,4.922,474,4.5,475,3.717,476,4.064,477,4.922]],["title/injectables/HashPipe.html",[32,0.671,441,1.761]],["body/injectables/HashPipe.html",[0,0.114,3,0.257,4,0.257,5,0.227,8,0.671,13,0.385,16,0.553,17,0.023,21,0.75,23,2.374,24,0.424,28,0.257,30,0.016,31,0.016,32,0.976,34,1.505,44,1.172,47,1.663,50,1.397,51,0.976,52,1.663,53,1.104,54,0.803,55,1.104,66,1.104,71,1.261,72,0.695,79,1.505,80,1.817,82,1.104,86,1,91,1.06,114,1.944,116,1.703,135,1.261,236,4.813,237,4.397,285,3.169,286,3.169,310,4.631,328,1.703,339,2.396,441,3.049,447,3.893,478,4.92,479,3.334,480,3.049,481,4.943,482,6.142,483,3.915,484,3.915,485,5.777,486,3.216,487,3.516,488,5.163,489,3.915,490,2.751,491,5.231,492,5.163,493,3.915,494,2.952,495,3.915,496,5.163,497,3.915,498,5.163,499,5.163,500,3.915]],["title/controllers/HealthController.html",[409,1.543,501,2.416]],["body/controllers/HealthController.html",[0,0.108,3,0.242,4,0.242,5,0.214,8,0.428,10,1.335,11,1.187,13,0.362,15,2.302,17,0.023,18,0.933,19,1.604,21,0.535,24,0.44,28,0.242,30,0.015,31,0.015,44,1.126,47,1.187,51,0.697,52,1.187,61,2.511,63,2.296,66,1.061,71,1.187,72,0.654,73,1.964,74,2.117,75,1.711,79,1.417,80,1.711,82,1.378,86,0.942,91,0.998,108,1.507,116,2.439,125,2.78,185,1.199,225,2.511,230,2.302,260,4.225,269,2.015,301,3.74,328,2.804,333,2.463,339,1.711,343,3.74,352,2.723,359,2.463,361,3.433,362,3.199,390,2.78,409,2.439,410,1.964,486,2.296,501,3.818,502,3.14,503,5.606,504,3.687,505,3.687,506,4.227,507,4.225,508,5.996,509,5.996,510,5.996,511,3.687,512,2.78,513,3.687,514,3.687,515,2.511,516,4.96,517,4.96,518,4.96,519,3.14,520,3.687,521,3.687,522,3.687,523,3.14,524,3.687,525,4.96,526,3.687,527,3.687,528,2.511,529,3.687,530,3.687]],["title/modules/HealthModule.html",[139,1.078,148,2.209]],["body/modules/HealthModule.html",[0,0.143,3,0.32,4,0.32,5,0.283,17,0.023,24,0.501,28,0.32,30,0.018,31,0.018,72,0.868,139,1.806,141,1.997,142,2.585,146,3.02,148,4.323,151,2.95,152,2.426,153,2.426,155,3.166,164,2.807,410,3.166,501,4.361,512,3.685,531,4.887,532,4.887,533,4.887,534,5.942,535,4.162,536,5.942,537,4.887]],["title/injectables/HttpExceptionInterceptor.html",[32,0.671,436,2.209]],["body/injectables/HttpExceptionInterceptor.html",[0,0.123,3,0.276,4,0.276,5,0.244,8,0.629,13,0.414,16,0.451,17,0.023,21,0.612,24,0.439,28,0.276,30,0.017,31,0.017,32,1.025,34,1.621,41,3.935,44,1.23,51,0.797,53,0.902,54,0.656,55,0.902,58,3.935,64,3.374,65,3.374,66,1.159,72,0.748,82,1.159,90,3.59,91,1.141,109,4.928,113,2.421,114,2.093,188,2.093,436,3.374,538,4.614,539,3.59,540,5.418,541,5.418,542,6.318,543,6.536,544,6.318,545,5.418,546,5.044,547,6.318,548,4.216,549,5.418,550,5.418,551,5.418,552,5.418,553,5.418,554,4.216,555,4.216,556,4.216,557,3.374,558,4.085,559,4.216]],["title/interfaces/IGrpcUsersService.html",[370,2.416,560,1.45]],["body/interfaces/IGrpcUsersService.html",[3,0.17,4,0.17,5,0.15,8,0.691,10,2.366,11,2.104,13,0.255,16,0.615,17,0.023,21,0.834,24,0.402,28,0.17,30,0.012,31,0.012,40,3.102,44,0.879,50,1.387,51,0.732,53,1.228,54,0.894,55,1.228,66,1.397,69,3.482,76,4.988,77,1.77,78,1.77,82,1.397,108,1.986,109,4.98,113,1.492,135,2.127,185,0.828,269,1.65,278,1.87,281,0.941,283,1.555,331,1.582,332,1.582,333,1.921,334,1.582,335,2.094,346,2.223,348,2.347,349,2.671,351,1.582,352,1.684,353,1.582,356,2.155,357,1.579,359,1.921,360,2.062,361,1.921,362,1.921,363,3.06,366,1.582,368,1.778,370,2.636,375,1.582,376,3.257,395,1.29,396,1.384,404,1.062,417,2.918,420,2.918,422,2.918,428,1.29,429,1.384,434,1.959,560,1.89,561,1.492,562,3.705,563,2.213,564,2.598,565,6.535,566,3.296,567,2.598,568,2.598,569,3.87,570,2.598,571,3.87,572,2.598,573,2.598]],["title/interfaces/ILoggingService.html",[560,1.45,574,2.209]],["body/interfaces/ILoggingService.html",[3,0.31,4,0.31,5,0.274,8,0.677,9,3.346,13,0.465,16,0.507,17,0.023,18,1.146,21,0.687,28,0.382,30,0.018,31,0.018,44,1.323,53,1.012,54,0.736,55,1.012,66,1.012,82,1.246,86,1.208,269,1.876,557,4.29,560,1.934,561,2.718,574,3.629,575,3.568,576,4.393,577,4.962,578,4.962,579,5.866,580,4.732,581,4.962,582,5.611,583,3.223,584,3.104,585,3.629]],["title/interfaces/IUsersClient.html",[382,2.209,560,1.45]],["body/interfaces/IUsersClient.html",[3,0.199,4,0.199,5,0.176,8,0.64,9,2.488,13,0.298,16,0.59,17,0.023,18,1.081,21,0.906,24,0.371,28,0.199,29,1.408,30,0.013,31,0.013,44,0.984,50,1.492,51,0.819,53,1.179,54,0.858,55,1.179,66,1.453,82,1.247,108,2.177,135,2.055,185,1.179,186,3.166,278,1.991,281,1.098,283,1.611,330,4.572,331,2.253,332,1.77,333,2.737,334,1.77,335,2.253,346,2.488,348,2.478,349,2.753,351,1.77,352,1.885,353,1.77,354,2.151,356,2.387,357,2.07,359,2.151,360,2.308,361,2.151,362,2.151,363,3.231,364,2.151,366,1.77,367,2.151,368,2.242,375,1.77,382,2.698,395,1.506,396,1.616,404,1.239,409,1.885,428,1.506,429,1.616,430,1.408,453,2.488,560,2.065,561,1.742,562,3.975,586,2.583,587,3.033,588,3.266,589,3.033,590,3.033,591,3.033,592,3.033,593,3.033,594,3.033]],["title/interfaces/IUsersDatabaseService.html",[560,1.45,595,2.209]],["body/interfaces/IUsersDatabaseService.html",[3,0.182,4,0.182,5,0.161,8,0.684,13,0.273,16,0.604,17,0.023,18,1.058,21,0.855,24,0.204,28,0.267,30,0.013,31,0.018,44,0.924,50,1.433,51,0.77,53,1.205,54,0.877,55,1.205,66,1.417,67,2.548,70,3.209,82,1.259,86,0.711,108,2.154,110,2.164,111,2.822,135,1.896,185,1.132,283,1.658,331,2.164,332,1.663,334,1.663,335,2.164,348,2.708,349,2.708,351,2.164,353,1.663,354,2.021,356,2.258,357,2.207,364,2.021,366,1.663,367,2.021,404,2.164,430,1.291,480,2.021,486,1.733,490,2.168,506,3.069,528,4.009,560,1.137,561,1.598,562,3.787,584,1.482,595,2.535,596,2.098,597,4.099,598,3.466,599,2.782,600,4.249,601,2.782,602,2.772,603,2.782,604,2.37,605,2.782,606,2.772,607,4.249,608,4.099,609,3.629,610,2.764,611,2.782,612,3.069,613,2.782,614,3.069,615,2.37,616,1.895,617,2.535]],["title/interfaces/IUsersService.html",[431,1.89,560,1.45]],["body/interfaces/IUsersService.html",[3,0.186,4,0.186,5,0.164,8,0.688,13,0.278,16,0.608,17,0.023,18,1.134,21,0.86,24,0.357,28,0.27,30,0.013,31,0.017,39,1.626,44,0.936,50,1.445,51,1.01,53,1.214,54,0.922,55,1.214,66,1.388,67,1.685,82,1.307,86,0.723,108,2.125,135,1.828,185,1.142,269,1.328,278,2.022,283,1.65,285,3.035,286,3.11,331,2.182,332,1.685,334,1.685,335,2.319,348,2.561,349,2.561,351,2.421,353,1.685,354,2.046,356,2.35,357,2.139,364,2.046,366,1.685,367,2.046,368,2.409,375,1.685,404,1.685,413,2.368,428,1.406,429,1.508,430,1.314,431,2.196,432,2.196,452,2.368,480,2.413,486,1.763,490,2.845,560,1.157,561,1.626,606,2.808,616,1.928,618,2.135,619,3.511,620,3.666,621,3.108,622,2.831,623,2.831,624,2.831,625,2.411,626,2.831,627,2.831,628,2.831,629,2.411,630,4.834,631,2.135,632,4.834,633,2.135,634,4.14,635,2.411]],["title/modules/LoggingModule.html",[139,1.078,149,2.037]],["body/modules/LoggingModule.html",[0,0.152,3,0.342,4,0.342,5,0.302,17,0.023,24,0.483,28,0.342,30,0.019,31,0.019,72,0.926,139,1.878,141,2.132,149,3.549,183,3.249,190,2.996,191,3.553,198,3.934,585,4.101,636,5.217,637,4.444,638,3.849,639,5.217]],["title/injectables/LoggingService.html",[32,0.671,638,2.209]],["body/injectables/LoggingService.html",[0,0.134,3,0.301,4,0.301,5,0.266,8,0.665,9,3.286,13,0.452,16,0.492,17,0.023,18,1.138,21,0.668,24,0.42,28,0.301,29,2.133,30,0.018,31,0.018,32,1.082,34,1.767,44,1.299,53,0.983,54,0.715,55,0.983,66,0.983,72,0.816,82,1.224,114,2.282,269,1.843,557,4.259,574,3.564,576,4.315,577,4.874,578,4.874,579,5.825,581,4.874,582,5.554,583,3.131,584,3.049,637,3.915,638,3.564,640,3.915,641,4.596,642,4.596,643,4.596]],["title/modules/PipesModule.html",[139,1.078,166,2.209]],["body/modules/PipesModule.html",[0,0.143,3,0.322,4,0.322,5,0.284,17,0.023,24,0.471,28,0.322,30,0.019,31,0.019,72,0.872,139,1.811,141,2.007,142,2.593,146,3.023,151,2.958,152,2.438,153,2.438,155,3.175,164,2.82,166,4.42,183,3.058,190,3.423,441,3.491,443,3.344,487,3.344,644,4.182,645,4.91,646,4.182,647,4.91]],["title/classes/ReadUserDto.html",[0,0.104,648,2.416]],["body/classes/ReadUserDto.html",[0,0.173,2,1.907,3,0.269,4,0.269,5,0.238,8,0.477,13,0.404,14,2.048,16,0.571,17,0.023,18,1.041,19,2.318,21,0.774,23,1.488,24,0.459,25,3.629,27,2.558,28,0.269,30,0.017,31,0.017,67,2.557,224,2.189,280,2.798,281,1.929,283,1.508,285,3.357,286,3.357,291,4.718,292,4.718,296,3.499,297,3.499,298,3.097,299,4.538,300,3.499,301,4.017,302,4.718,303,5.329,304,3.499,305,3.499,306,4.538,308,4.538,309,2.798,310,4.017,311,2.798,312,3.318,313,4.459,316,3.629,318,3.499,319,4.538,320,3.499,321,3.499,322,3.499,323,4.538,324,3.499,648,3.629,649,5.036,650,5.328,651,4.108]],["title/injectables/SecretManagerService.html",[32,0.671,214,2.209]],["body/injectables/SecretManagerService.html",[0,0.088,3,0.198,4,0.198,5,0.175,8,0.586,10,1.994,11,1.773,13,0.297,14,1.662,16,0.54,17,0.023,18,1.096,21,0.846,23,1.566,24,0.404,28,0.198,30,0.013,31,0.013,32,0.818,34,1.163,44,0.982,47,1.392,51,0.954,52,1.392,53,0.924,54,0.943,55,0.924,66,1.295,67,2.25,70,2.733,71,0.974,72,0.537,75,1.404,79,1.163,82,0.924,86,1.289,91,1.49,108,1.841,116,1.881,185,0.924,186,3.345,214,3.429,220,2.576,221,5.828,230,3.013,269,1.392,328,2.775,339,2.007,342,4.151,372,3.26,398,1.611,475,3.627,490,2.933,515,3.75,557,2.692,574,3.429,576,3.26,585,1.883,588,4.151,638,3.142,652,4.568,653,2.28,654,4.96,655,4.323,656,4.96,657,5.505,658,5.505,659,5.045,660,3.024,661,5.045,662,3.024,663,3.024,664,5.505,665,3.024,666,3.024,667,3.024,668,5.505,669,5.045,670,5.505,671,3.024,672,2.576,673,3.024,674,2.576,675,3.024,676,2.576,677,2.576,678,2.576,679,2.576,680,2.576,681,3.024,682,3.024,683,3.024,684,3.024,685,3.682,686,3.024,687,2.28,688,3.024,689,3.024,690,2.28,691,2.576,692,3.024,693,3.024]],["title/injectables/TcpUsersClient.html",[32,0.671,189,2.416]],["body/injectables/TcpUsersClient.html",[0,0.059,3,0.132,4,0.132,5,0.117,8,0.567,10,1.153,11,1.026,13,0.198,14,1.224,15,2.757,16,0.523,17,0.023,18,1.025,21,0.863,23,0.73,24,0.426,28,0.132,29,0.936,30,0.01,31,0.01,32,0.602,34,0.775,44,0.723,47,1.026,50,1.322,51,0.848,52,1.026,53,1.044,54,0.76,55,1.044,66,1.369,71,0.649,72,0.358,79,0.775,80,0.936,82,1.162,86,1.439,91,1.214,108,2.096,110,1.613,111,1.697,113,1.158,114,1.001,116,1.386,130,2.793,135,1.913,185,1.369,186,3.59,188,1.001,189,3.054,230,3.155,269,1.026,278,1.667,281,0.73,283,1.556,326,1.373,327,2.712,328,2.452,330,3.914,331,1.996,332,1.613,333,2.424,334,1.613,335,1.996,336,1.717,339,1.478,340,3.82,341,2.712,343,3.914,344,2.712,346,1.829,347,1.717,348,2.122,349,2.518,351,1.302,352,1.386,353,1.302,354,1.581,356,2.151,357,1.98,359,1.581,360,1.697,361,1.581,362,1.581,363,2.766,364,1.581,366,1.302,367,1.581,368,1.878,373,2.712,374,1.717,375,1.302,378,1.717,379,1.717,380,1.717,382,1.983,383,1.717,384,1.697,385,1.717,386,1.373,390,1.52,395,1.001,396,1.074,397,4.159,398,3.526,400,4.159,402,1.717,404,0.824,408,1.717,523,4.421,588,2.401,685,1.717,694,5.16,695,3.948,696,4.485,697,4.485,698,3.185,699,3.185,700,2.016,701,2.016,702,3.185,703,4.485,704,2.016,705,2.016,706,2.016,707,2.016,708,2.016,709,3.185,710,2.016,711,5.191,712,5.191,713,4.421,714,3.948,715,2.016,716,2.016]],["title/classes/UpdateUserDto.html",[0,0.104,368,1.364]],["body/classes/UpdateUserDto.html",[0,0.153,2,2.434,3,0.344,4,0.344,5,0.304,8,0.609,17,0.023,24,0.455,28,0.344,30,0.019,31,0.019,42,3.571,50,1.419,224,2.794,278,1.79,280,3.571,281,2.245,283,1.407,368,2.383,375,2.143,717,4.466,718,6.198,719,5.243,720,5.243]],["title/classes/User.html",[0,0.104,283,0.805]],["body/classes/User.html",[0,0.113,2,1.79,3,0.253,4,0.253,5,0.223,8,0.448,9,2.936,13,0.379,14,1.966,16,0.699,17,0.023,18,1.125,19,2.657,21,0.887,23,2.211,24,0.375,28,0.376,30,0.016,31,0.016,54,0.795,86,0.985,110,2.867,159,2.402,185,1.306,283,1.582,284,3.905,285,3.154,286,3.154,356,1.851,357,1.958,487,4.158,515,2.627,721,2.627,722,4.79,723,6.106,724,5.2,725,3.857,726,3.855,727,3.857,728,3.857,729,4.354,730,3.857,731,6.353,732,3.857,733,4.324,734,2.908,735,2.908,736,6.106,737,2.627,738,3.285]],["title/classes/User-1.html",[0,0.087,95,2.02,283,0.674]],["body/classes/User-1.html",[0,0.137,2,1.583,3,0.224,4,0.224,5,0.197,8,0.731,9,2.701,13,0.335,14,1.808,16,0.652,17,0.023,18,1.093,19,2.525,21,0.884,23,2.102,24,0.447,28,0.224,30,0.015,31,0.015,47,1.098,51,0.889,52,1.515,53,0.729,54,0.947,55,0.729,82,0.729,86,0.871,135,1.869,224,1.817,278,1.982,283,1.634,284,3.667,285,3.023,286,3.023,289,4.006,290,4.006,298,3.546,311,2.322,313,4.06,316,3.203,339,2.183,356,2.102,357,1.838,375,1.393,428,1.693,474,2.571,480,2.335,487,3.953,583,2.322,724,4.943,726,4.376,729,4.006,739,2.904,740,4.006,741,4.703,742,5.362,743,3.41,744,4.703,745,3.41,746,6.089,747,3.41,748,4.703,749,4.703,750,4.703,751,4.703,752,4.703,753,3.41,754,3.41,755,4.703,756,2.571,757,3.41,758,3.41,759,3.41,760,2.904,761,3.41,762,2.904,763,3.41,764,3.41]],["title/classes/UserListDto.html",[0,0.104,384,1.89]],["body/classes/UserListDto.html",[0,0.147,2,2.328,3,0.329,4,0.329,5,0.291,8,0.583,13,0.493,14,2.321,16,0.537,17,0.023,21,0.729,24,0.368,28,0.329,29,2.328,30,0.019,31,0.019,185,1.47,281,2.186,283,1.561,352,2.627,384,3.216,430,2.328,602,4.112,765,5.142,766,4.273,767,6.037,768,5.016,769,6.037]],["title/injectables/UsersDatabaseService.html",[32,0.671,770,2.416]],["body/injectables/UsersDatabaseService.html",[0,0.063,3,0.141,4,0.141,5,0.124,8,0.647,13,0.211,16,0.571,17,0.023,18,0.984,21,0.808,24,0.391,28,0.141,30,0.01,31,0.017,32,0.633,34,0.825,44,0.76,47,1.077,50,1.443,51,1.144,52,1.077,53,1.14,54,0.829,55,1.14,66,1.338,67,2.353,70,3.002,72,0.381,82,1.19,86,1.422,91,1.507,95,2.279,108,2.091,110,1.897,111,2.473,114,1.066,135,1.717,159,1.337,185,1.14,230,3.084,283,1.623,328,0.934,331,1.897,332,1.367,334,1.367,335,1.897,348,2.558,349,2.623,351,1.897,353,1.367,354,1.661,356,2.085,357,2.166,364,1.661,366,1.367,367,1.661,398,3.067,404,1.897,430,0.996,453,1.921,480,1.661,490,1.782,506,2.523,528,3.921,558,3.1,584,1.144,595,2.084,597,3.501,598,2.849,600,3.794,602,2.279,604,1.828,606,2.279,607,3.794,608,3.501,609,3.1,610,2.361,612,2.523,614,2.523,631,2.523,687,2.523,690,2.523,691,3.954,733,4.019,734,1.619,735,1.619,740,2.849,742,1.828,756,1.619,770,3.161,771,4.904,772,1.828,773,2.147,774,5.33,775,2.147,776,4.111,777,5.33,778,2.147,779,2.147,780,2.147,781,2.147,782,2.147,783,2.147,784,2.147,785,1.619,786,1.619,787,2.147,788,2.147,789,2.147,790,4.642,791,3.346,792,3.346,793,3.346,794,3.346,795,2.147,796,2.147,797,2.147,798,2.147,799,3.346,800,2.147,801,2.147,802,3.346,803,2.147,804,2.147,805,2.147,806,2.147,807,3.346,808,2.147,809,2.147,810,2.147]],["title/controllers/UsersHttpController.html",[409,1.543,811,2.416]],["body/controllers/UsersHttpController.html",[0,0.046,3,0.103,4,0.103,5,0.091,8,0.832,13,0.154,16,0.626,17,0.023,18,0.883,19,2.128,21,0.71,24,0.39,28,0.103,30,0.008,31,0.008,44,0.589,47,0.504,50,1.25,51,1.035,52,0.504,53,0.916,54,0.796,55,0.916,60,2.406,66,1.251,69,2.916,71,0.504,72,0.278,73,0.833,74,0.898,75,0.726,82,1.046,91,1.25,108,1.985,116,0.681,135,1.968,185,1.135,224,0.833,225,1.065,250,1.332,269,1.07,278,1.67,281,0.939,283,1.62,284,2.632,285,2.717,286,2.127,316,3.145,328,0.681,331,1.579,332,1.357,333,1.918,334,1.357,335,1.999,339,0.726,342,4.328,348,2.092,349,2.346,351,1.06,352,1.128,353,1.06,354,0.776,356,2.336,357,2.059,359,1.918,360,2.059,361,1.918,362,1.649,363,2.282,364,0.776,366,1.751,367,0.776,368,2.041,375,1.357,395,1.287,396,1.381,404,1.751,409,1.445,410,0.833,411,3.486,413,1.907,428,0.776,429,0.833,430,0.726,431,1.381,432,0.833,433,0.974,441,0.776,442,1.179,443,1.065,450,1.179,451,1.381,452,0.898,453,0.898,454,1.179,457,1.179,475,2.069,476,2.262,480,2.717,490,2.059,507,5.563,546,1.179,584,1.381,600,1.955,602,1.766,609,4.127,610,0.898,612,1.179,614,1.955,620,1.955,621,1.179,633,2.913,648,3.145,811,1.766,812,1.332,813,1.564,814,3.864,815,2.593,816,3.321,817,5.739,818,4.284,819,5.474,820,4.284,821,3.864,822,1.564,823,1.564,824,1.564,825,5.739,826,2.593,827,1.564,828,4.891,829,1.564,830,1.564,831,5.118,832,3.321,833,4.618,834,4.618,835,4.618,836,4.618,837,4.618,838,3.864,839,5.118,840,1.564,841,1.564,842,1.564,843,1.564,844,1.564,845,1.564,846,1.564,847,1.564,848,2.593,849,1.564,850,1.564,851,1.564,852,1.564,853,1.564,854,1.564,855,1.564,856,1.564,857,1.564,858,1.564,859,3.864,860,1.564,861,5.118,862,3.864,863,6.568,864,1.564,865,1.564,866,1.564,867,1.564,868,1.564,869,1.564,870,4.284,871,1.564,872,1.564,873,1.564,874,3.321,875,1.564,876,1.564,877,1.564,878,1.564,879,1.564,880,1.564,881,1.564,882,1.564,883,1.564,884,1.564,885,1.564,886,1.564,887,1.564,888,1.332,889,1.332,890,1.332,891,1.332,892,1.332]],["title/modules/UsersModule.html",[139,1.078,150,2.209]],["body/modules/UsersModule.html",[0,0.122,3,0.273,4,0.273,5,0.241,17,0.023,24,0.521,28,0.273,30,0.017,31,0.017,54,0.648,72,0.739,139,1.634,141,1.702,142,2.339,146,2.901,147,3.829,150,4.281,151,2.669,152,2.068,153,2.068,155,2.864,158,3.547,159,2.594,164,2.392,165,3.547,185,0.891,190,2.392,191,3.661,198,4.053,283,0.946,388,3.419,410,2.864,432,2.864,433,2.594,451,2.864,617,3.348,722,3.141,737,3.661,756,3.141,770,3.661,785,3.141,786,3.141,811,4.054,893,4.165,894,4.165,895,4.165,896,4.054,897,4.165,898,5.952,899,4.165,900,4.165,901,4.165,902,4.165,903,4.165,904,4.165]],["title/injectables/UsersService.html",[32,0.671,451,1.89]],["body/injectables/UsersService.html",[0,0.064,3,0.144,4,0.144,5,0.127,8,0.651,13,0.215,16,0.576,17,0.023,18,1.083,21,0.814,23,1.839,24,0.412,28,0.144,30,0.011,31,0.015,32,0.643,34,0.842,39,1.257,44,0.771,47,1.094,50,1.27,51,1.205,52,1.094,53,1.149,54,0.836,55,1.149,66,1.3,67,1.388,71,0.705,72,0.389,82,1.239,86,1.52,91,1.455,108,2.051,110,0.895,111,2.218,114,1.087,116,0.953,135,1.806,185,1.003,230,3.049,269,1.511,278,1.835,283,1.631,285,2.783,286,2.877,328,0.953,331,1.917,332,1.388,334,1.388,335,2.075,348,2.368,349,2.742,351,2.196,353,1.388,354,1.687,356,2.202,357,1.978,364,1.687,366,1.388,367,1.687,368,2.228,372,2.562,375,1.388,398,2.863,404,1.388,413,1.951,428,1.087,429,1.166,430,1.016,431,1.81,433,1.364,451,2.499,452,1.951,480,2.067,490,2.499,494,1.651,528,2.314,558,4.052,595,2.922,606,2.314,607,1.651,617,1.364,619,2.894,620,3.139,621,2.562,625,1.865,630,4.325,631,3.139,632,4.325,633,1.651,634,4.936,635,3.546,687,1.651,690,1.651,760,1.865,762,1.865,785,1.651,786,1.651,905,1.865,906,2.189,907,2.189,908,3.397,909,4.163,910,2.189,911,2.189,912,2.189,913,2.189,914,2.189,915,2.189,916,2.189,917,2.189,918,2.189,919,2.189,920,2.189,921,2.189,922,2.189,923,2.189,924,2.189,925,2.189,926,2.189,927,4.163,928,2.189,929,2.189,930,2.189,931,2.189]],["title/controllers/UsersTcpController.html",[409,1.543,896,2.416]],["body/controllers/UsersTcpController.html",[0,0.072,1,3.747,3,0.161,4,0.161,5,0.143,8,0.286,11,0.793,13,0.242,16,0.264,17,0.023,19,2.45,21,0.818,24,0.474,28,0.161,30,0.012,31,0.012,44,0.844,47,0.793,50,1.524,51,1.013,52,0.793,53,1.145,54,0.833,55,1.145,66,1.382,71,0.793,72,0.437,82,1.204,86,0.629,91,1.449,108,2.104,110,1.52,116,1.072,128,1.415,130,2.316,134,2.098,135,2.021,185,1.145,188,1.223,230,2.079,269,0.793,278,1.529,281,1.622,283,1.551,328,1.072,331,2.039,332,2.039,333,2.795,334,2.188,335,2.301,339,1.143,346,2.135,348,2.301,349,2.64,351,1.52,352,1.618,353,1.52,356,2.117,357,1.529,359,1.846,360,1.981,361,1.846,362,1.846,363,3.114,366,1.52,368,1.722,375,1.52,376,2.658,384,1.981,386,1.678,395,1.223,396,1.312,398,1.312,404,1.007,409,2.171,410,1.312,411,3.981,413,2.572,417,2.804,420,2.804,422,2.804,424,2.098,425,2.098,426,3.167,427,3.167,428,1.223,429,1.312,430,1.143,431,1.981,432,1.312,433,1.534,434,1.858,435,2.098,436,2.316,437,2.098,438,2.098,439,2.098,441,1.846,442,1.858,443,1.678,444,2.098,445,2.098,446,2.098,447,1.858,448,2.098,450,1.858,451,1.981,452,1.415,453,1.415,454,1.858,455,2.098,456,2.098,457,1.858,458,2.098,459,2.098,460,2.098,469,2.098,546,2.804,566,3.167,584,1.981,610,1.415,713,4.795,888,3.167,889,3.167,890,3.167,891,3.167,892,3.167,896,2.532,932,2.098,933,5.63,934,2.463,935,2.463,936,2.463,937,2.463,938,2.463,939,2.463,940,5.845,941,2.463,942,2.463,943,2.463,944,2.463]],["title/coverage.html",[945,4.116]],["body/coverage.html",[0,0.189,1,1.972,5,0.183,6,2.697,7,2.697,11,1.666,16,0.339,17,0.023,30,0.014,31,0.014,32,1.272,33,1.818,35,3.5,36,2.697,37,1.687,40,1.572,43,1.818,51,0.599,98,2.697,119,1.972,120,2.697,128,1.818,129,2.697,184,2.157,185,1.107,189,2.157,214,1.972,215,2.388,228,2.388,278,1.081,279,2.697,280,3.524,283,1.014,312,1.972,325,3.368,326,3.524,368,1.217,370,2.157,376,1.687,382,1.972,384,1.687,387,2.388,388,1.818,409,2.445,411,3.524,412,2.697,431,1.687,432,1.687,436,1.972,441,1.572,451,1.687,470,2.697,478,2.697,479,2.697,501,2.157,502,2.697,519,2.697,538,2.697,539,2.697,560,2.422,562,3.5,563,2.697,574,1.972,575,3.368,585,1.972,586,2.697,595,1.972,596,3.368,610,3.532,617,1.972,618,3.368,638,1.972,640,2.697,648,2.157,649,2.697,652,2.388,653,2.388,694,2.697,717,2.697,721,3.042,737,2.157,739,2.697,765,2.697,766,2.697,770,2.157,771,2.697,772,2.697,811,2.157,812,2.697,896,2.157,905,2.697,932,2.697,945,2.697,946,3.166,947,3.166,948,7.335,949,4.467,950,6.32,951,6.892,952,4.467,953,5.927,954,4.467,955,6.32,956,2.697,957,2.697,958,2.697,959,5.927,960,5.62,961,3.166,962,2.697,963,2.697,964,4.787,965,4.787,966,2.697,967,2.697,968,2.697,969,2.697,970,3.166,971,3.166]],["title/dependencies.html",[142,1.855,261,2.237]],["body/dependencies.html",[0,0.168,17,0.023,27,2.888,30,0.018,31,0.018,72,0.823,76,3.158,77,3.158,78,3.158,113,2.663,142,2.018,159,2.888,161,3.497,188,2.302,224,2.471,311,3.158,474,3.497,494,3.497,512,3.497,535,3.95,654,3.95,656,3.95,672,3.95,734,3.497,972,4.637,973,4.637,974,4.637,975,4.637,976,4.637,977,4.637,978,4.637,979,4.637,980,6.541,981,4.637,982,4.637,983,4.637,984,4.637,985,4.637,986,4.637,987,4.637,988,4.637,989,4.637,990,4.637,991,4.637,992,4.637,993,4.637,994,4.637,995,4.637,996,4.637,997,4.637,998,4.637,999,4.637,1000,4.637,1001,4.637,1002,4.637,1003,4.637,1004,4.637,1005,4.637,1006,4.637]],["title/miscellaneous/enumerations.html",[1007,1.473,1008,3.632]],["body/miscellaneous/enumerations.html",[10,1.594,11,1.418,13,0.433,17,0.023,23,2.653,30,0.017,31,0.017,69,2.346,73,2.967,75,2.585,79,2.141,125,3.32,652,3.32,653,4.2,674,3.75,676,4.744,677,5.203,678,3.75,679,5.203,680,3.75,1007,2.186,1008,3.75,1009,4.402,1010,5.569,1011,4.402,1012,4.402,1013,4.402,1014,4.402,1015,4.402,1016,4.402,1017,5.569,1018,5.569,1019,5.569,1020,5.569,1021,5.569,1022,5.569,1023,5.569,1024,5.569,1025,5.569,1026,5.569,1027,5.569,1028,5.569,1029,5.569,1030,5.569,1031,5.569,1032,5.569]],["title/miscellaneous/functions.html",[1007,1.473,1033,3.632]],["body/miscellaneous/functions.html",[8,0.697,13,0.363,16,0.706,17,0.022,18,1.183,23,1.798,29,2.305,30,0.015,31,0.015,40,1.833,50,1,51,0.698,53,1.339,54,1.056,55,1.339,66,1.283,70,1.833,108,1.122,110,1.509,111,2.646,121,2.785,130,2.3,135,1.189,186,2.852,236,4.862,281,2.335,282,3.146,291,3.745,292,3.745,302,4.231,309,4.264,352,1.607,395,1.833,480,2.465,481,3.745,491,3.146,557,3.737,583,2.515,584,2.646,610,2.852,616,3.382,956,3.146,957,4.779,962,3.146,963,4.23,964,3.146,965,5.333,966,4.23,967,4.23,968,4.23,969,4.23,1007,1.833,1033,3.146,1034,3.693,1035,3.693,1036,6,1037,3.693,1038,3.693,1039,4.966,1040,3.693,1041,6,1042,3.693,1043,3.693,1044,3.693,1045,3.693,1046,3.693,1047,5.611,1048,3.693,1049,3.693,1050,3.693,1051,6.448,1052,4.966,1053,4.779,1054,6,1055,4.23,1056,3.693,1057,3.693,1058,6.261,1059,4.966,1060,3.693,1061,3.693,1062,3.693,1063,3.693,1064,3.693]],["title/index.html",[13,0.349,1065,3.021]],["body/index.html",[2,1.565,17,0.023,30,0.014,31,0.014,33,3.694,34,1.296,37,1.796,95,2.296,119,4.006,128,3.694,140,4.739,141,1.378,142,2.03,143,2.871,144,2.871,145,4.145,146,3.146,147,4.018,148,3.777,149,3.317,150,4.006,151,2.317,152,1.673,153,1.673,166,3.907,174,4.355,175,2.871,177,2.871,178,4.919,179,4.919,180,4.919,181,4.919,194,4.355,197,4.355,199,2.871,201,2.871,202,2.871,203,4.919,204,4.919,205,4.919,206,4.919,207,4.919,208,4.919,209,4.919,210,4.919,211,4.919,212,4.919,213,4.919,214,3.333,410,1.796,441,2.657,463,2.871,464,2.871,465,2.871,476,2.296,561,1.936,644,2.871,646,2.871,1065,2.871,1066,3.974,1067,3.371,1068,2.871]],["title/modules.html",[141,1.975]],["body/modules.html",[17,0.019,30,0.019,31,0.019,140,3.518,141,2.111,145,3.217,146,2.247,147,2.967,148,3.217,149,2.967,150,3.217,166,3.217,1069,7.104,1070,7.104,1071,7.104,1072,7.16,1073,5.166,1074,5.166]],["title/properties.html",[14,1.639,261,2.237]],["body/properties.html",[8,0.635,14,2.1,17,0.022,30,0.02,31,0.02,185,1.168,269,1.759,413,3.138,452,3.138,453,3.138,475,3.402,1075,5.463,1076,5.463,1077,5.463,1078,5.463,1079,5.463,1080,5.463]],["title/miscellaneous/typealiases.html",[1007,1.473,1081,4.264]],["body/miscellaneous/typealiases.html",[13,0.547,16,0.687,17,0.02,30,0.02,31,0.02,185,1.19,721,3.79,733,4.196,735,4.839,1007,2.763,1082,5.565,1083,4.74]],["title/miscellaneous/variables.html",[227,3.215,1007,1.473]],["body/miscellaneous/variables.html",[13,0.387,16,0.703,17,0.023,18,1.064,23,2.424,29,3.107,30,0.016,31,0.016,40,1.955,54,0.806,75,2.405,185,1.316,215,2.969,225,2.682,226,3.353,227,3.907,228,3.907,229,3.353,269,1.268,309,4.472,312,3.608,325,2.969,326,3.529,387,3.907,388,2.261,432,3.086,475,2.452,476,2.682,481,2.969,486,3.608,515,2.682,562,2.452,575,2.969,585,3.608,596,3.907,615,4.414,616,3.945,617,3.608,618,2.969,629,3.353,721,2.682,722,2.969,726,3.907,737,3.529,738,3.353,958,3.353,1007,1.955,1053,3.353,1055,3.353,1066,3.353,1068,3.353,1083,3.353,1084,3.937,1085,3.937,1086,3.937,1087,3.937,1088,3.937,1089,3.937,1090,5.793,1091,3.937,1092,3.937,1093,5.793,1094,3.937,1095,3.937,1096,5.182,1097,3.937,1098,3.937,1099,3.937,1100,5.182,1101,3.937,1102,3.937,1103,3.937,1104,3.937,1105,3.937,1106,3.937,1107,3.937]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0.0.0.0",{"_index":277,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.0.0.0:${port",{"_index":266,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.1.0",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":95,"title":{"classes/User-1.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/UsersDatabaseService.html":{},"index.html":{}}}],["1.0.0",{"_index":1075,"title":{},"body":{"properties.html":{}}}],["1.1.19",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1067,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":794,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["2.2.0",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":825,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["201",{"_index":815,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["2048",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":749,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":837,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4",{"_index":476,"title":{},"body":{"classes/GuidDto.html":{},"controllers/UsersHttpController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":819,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4027",{"_index":750,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":817,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["404",{"_index":839,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["409",{"_index":821,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4096",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":835,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["5",{"_index":1068,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["6.1.2",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1066,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":834,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["ab9d",{"_index":836,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["abstract",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["access",{"_index":342,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{}}}],["accessing",{"_index":372,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["addapikey",{"_index":272,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["address",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/ReadUserDto.html":{}}}],["addtag('users",{"_index":271,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["aliases",{"_index":1082,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":633,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":10,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":677,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["apikeydto",{"_index":1,"title":{"classes/ApiKeyDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apikeydto).apikey",{"_index":138,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["apikeygrpcguard",{"_index":33,"title":{"injectables/ApiKeyGrpcGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeyguard",{"_index":43,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["apikeyhttpguard",{"_index":119,"title":{"injectables/ApiKeyHttpGuard.html":{}},"body":{"injectables/ApiKeyHttpGuard.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeys",{"_index":92,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys.length",{"_index":94,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys[0].tostring",{"_index":96,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeytcpguard",{"_index":128,"title":{"injectables/ApiKeyTcpGuard.html":{}},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["apioperation",{"_index":861,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiparam",{"_index":862,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiproperty",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":863,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity",{"_index":864,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":866,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["application",{"_index":352,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":140,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":89,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["args",{"_index":137,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["array",{"_index":353,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["async",{"_index":230,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["author",{"_index":1078,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1074,"title":{},"body":{"modules.html":{}}}],["await",{"_index":398,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ba47",{"_index":751,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":635,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["based",{"_index":514,"title":{},"body":{"controllers/HealthController.html":{}}}],["bcrypt",{"_index":494,"title":{},"body":{"injectables/HashPipe.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["body",{"_index":857,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["body(hashpipe",{"_index":883,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{}}}],["bootstrap",{"_index":957,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1072,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1069,"title":{},"body":{"modules.html":{}}}],["build",{"_index":274,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["call",{"_index":551,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":547,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":101,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["canactivate(context",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["catch",{"_index":690,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["catcherror",{"_index":554,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":556,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":748,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":908,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":831,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["check",{"_index":362,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["check.'})@apiresponse({status",{"_index":847,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["checking",{"_index":503,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks",{"_index":506,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["class",{"_index":0,"title":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/ReadUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":1051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/ReadUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":186,"title":{},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/functions.html":{}}}],["client.getservice",{"_index":392,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.interface",{"_index":383,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.interface.ts",{"_index":586,"title":{},"body":{"interfaces/IUsersClient.html":{},"coverage.html":{}}}],["client.interface.ts:14",{"_index":589,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:20",{"_index":590,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:27",{"_index":591,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:35",{"_index":594,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:42",{"_index":593,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:48",{"_index":592,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:53",{"_index":587,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.ts",{"_index":326,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.ts:104",{"_index":365,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:105",{"_index":707,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:116",{"_index":358,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:117",{"_index":706,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:124",{"_index":345,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:127",{"_index":700,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:135",{"_index":701,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:19",{"_index":698,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:28",{"_index":371,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:33",{"_index":338,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:37",{"_index":704,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:57",{"_index":347,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.ts:66",{"_index":350,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:71",{"_index":705,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:77",{"_index":355,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:86",{"_index":708,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:90",{"_index":369,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client_grpc_proxy",{"_index":1024,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["client_tcp_proxy",{"_index":1025,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clientgrpcproxy",{"_index":337,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientinjectionname",{"_index":1044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clientproxy",{"_index":697,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["clientproxyfactory",{"_index":187,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(grpcconfig",{"_index":193,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(tcpconfig",{"_index":196,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clients",{"_index":1043,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clients/clients.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["clientservice",{"_index":329,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientsmodule",{"_index":145,"title":{"modules/ClientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"index.html":{},"modules.html":{}}}],["clienttest",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["clienttest(clientinjectionname",{"_index":1038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":330,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["cloud",{"_index":655,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":672,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["cls",{"_index":1054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_clientsmodule",{"_index":175,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_exports",{"_index":177,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_imports",{"_index":176,"title":{},"body":{"modules/ClientsModule.html":{}}}],["cluster_configurationmodule",{"_index":199,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_exports",{"_index":201,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_imports",{"_index":200,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["cluster_configurationmodule_providers",{"_index":202,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_guardsmodule",{"_index":463,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_exports",{"_index":464,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_imports",{"_index":466,"title":{},"body":{"modules/GuardsModule.html":{}}}],["cluster_guardsmodule_providers",{"_index":465,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_healthmodule",{"_index":531,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_imports",{"_index":532,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_pipesmodule",{"_index":644,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_pipesmodule_imports",{"_index":645,"title":{},"body":{"modules/PipesModule.html":{}}}],["cluster_pipesmodule_providers",{"_index":646,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":893,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":894,"title":{},"body":{"modules/UsersModule.html":{}}}],["cmd",{"_index":713,"title":{},"body":{"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["compare",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["compare(email",{"_index":923,"title":{},"body":{"injectables/UsersService.html":{}}}],["compare(password",{"_index":924,"title":{},"body":{"injectables/UsersService.html":{}}}],["compodoc/compodoc",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":216,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.get",{"_index":241,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow",{"_index":231,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configuration",{"_index":1045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration/configuration.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["configuration/injectionnames.enum",{"_index":80,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["configurationmodule",{"_index":146,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["configured",{"_index":341,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["conflictexception",{"_index":631,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":696,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connected",{"_index":703,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connection",{"_index":588,"title":{},"body":{"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["connection_string",{"_index":679,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(message",{"_index":642,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":643,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":86,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constants",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/ReadUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["constants.email_min_length",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["constants.password_max_length",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["constants.password_min_length",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["constructor",{"_index":47,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constructor(@inject(injectionnames.api_key",{"_index":84,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(client",{"_index":336,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["constructor(databaseservice",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(hashrounds",{"_index":483,"title":{},"body":{"injectables/HashPipe.html":{}}}],["constructor(loggingservice",{"_index":660,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["constructor(serviceapikey",{"_index":48,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(user",{"_index":741,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":773,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":395,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":41,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.getargs().find((args",{"_index":136,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["controller",{"_index":409,"title":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["controller('health",{"_index":513,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('users",{"_index":867,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["controller.interface",{"_index":381,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["controller.interface.ts",{"_index":563,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["controller.interface.ts:17",{"_index":564,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:24",{"_index":567,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:32",{"_index":568,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:41",{"_index":573,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:49",{"_index":572,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:57",{"_index":570,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controllers",{"_index":410,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"index.html":{}}}],["controllers/users",{"_index":898,"title":{},"body":{"modules/UsersModule.html":{}}}],["coverage",{"_index":945,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":50,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["create(@body(hashpipe",{"_index":871,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["create(createuserdto",{"_index":621,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":346,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["create(user",{"_index":598,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":600,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["creates",{"_index":339,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["createuserdto",{"_index":278,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["creating",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":413,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["current",{"_index":64,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["cursor",{"_index":800,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["cursor.close",{"_index":804,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["cursor.next",{"_index":802,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data",{"_index":135,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":806,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":496,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":499,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":528,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":786,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":596,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":599,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":601,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":603,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":605,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:50",{"_index":613,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:57",{"_index":611,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":900,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":772,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:110",{"_index":782,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:12",{"_index":775,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:28",{"_index":778,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:46",{"_index":779,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:57",{"_index":780,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:70",{"_index":781,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:92",{"_index":783,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":756,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"classes/ReadUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":1047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaultvalue",{"_index":714,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete",{"_index":366,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete(':guid",{"_index":885,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":850,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["deleted",{"_index":612,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["deleted.'})@apiresponse({status",{"_index":851,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["depedency",{"_index":629,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":142,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":615,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":9,"title":{},"body":{"classes/ApiKeyDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["diers",{"_index":1080,"title":{},"body":{"properties.html":{}}}],["different",{"_index":1042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":889,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["display",{"_index":726,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["display_name_max_length",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["documenation",{"_index":529,"title":{},"body":{"controllers/HealthController.html":{}}}],["document",{"_index":733,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["document.save",{"_index":789,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":519,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["documentbuilder",{"_index":223,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["documents",{"_index":795,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":797,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["dto",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"classes/ReadUserDto.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":456,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/api",{"_index":941,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["dto/create",{"_index":428,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/guid.dto",{"_index":434,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/read",{"_index":865,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["dto/update",{"_index":429,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/user",{"_index":435,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ef3aa7fd1bc5",{"_index":752,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":833,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["email",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/ReadUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["email_max_length",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emails",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":363,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["entities/user.entity",{"_index":430,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["entity",{"_index":740,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["enum",{"_index":675,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":1008,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":256,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["environment",{"_index":226,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":691,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["err.code",{"_index":793,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.name",{"_index":791,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":693,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":557,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":888,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["eslint/no",{"_index":892,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["establish",{"_index":702,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["exception.interceptor",{"_index":438,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exception.interceptor.ts",{"_index":539,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":548,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":746,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":799,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execute",{"_index":359,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["execution",{"_index":65,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":58,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":614,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["exists",{"_index":490,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":1055,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exports",{"_index":183,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{}}}],["express",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/UpdateUserDto.html":{}}}],["factory",{"_index":1058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fails",{"_index":1062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":111,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":1059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":447,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["find",{"_index":351,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["find((arg",{"_index":88,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["findall",{"_index":331,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findall(data",{"_index":566,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone",{"_index":332,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(data",{"_index":417,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(guid",{"_index":354,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["findonebyemailandpassword",{"_index":620,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["findonebyemailandpassword(@body",{"_index":878,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["findonebyemailandpassword(email",{"_index":625,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["findonebyemailandpassword(readuserdto",{"_index":841,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["findonebypredicate",{"_index":597,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["findonebypredicate(predicate",{"_index":604,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["firstvaluefrom",{"_index":373,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["firstvaluefrom(response",{"_index":400,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["forbidden",{"_index":828,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":818,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found",{"_index":609,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["found.'})@apiresponse({status",{"_index":855,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found.'})@httpcode(200",{"_index":844,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["function",{"_index":610,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1033,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":1040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":873,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get(':guid')@apioperation({description",{"_index":830,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check",{"_index":887,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check')@apioperation({description",{"_index":846,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@apioperation({description",{"_index":823,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@healthcheck",{"_index":504,"title":{},"body":{"controllers/HealthController.html":{}}}],["getapikey",{"_index":657,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getargs",{"_index":87,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["getconnectionstring",{"_index":658,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gets",{"_index":664,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":659,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":666,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gh",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":480,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":654,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":1073,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":40,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["grpc.controller",{"_index":901,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":412,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:100",{"_index":419,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:49",{"_index":415,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":416,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":418,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":423,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":421,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard",{"_index":440,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{}}}],["grpc.guard.ts",{"_index":36,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"coverage.html":{}}}],["grpc.guard.ts:11",{"_index":49,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:25",{"_index":59,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc/grpc",{"_index":77,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["grpc_config",{"_index":1027,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_port",{"_index":1021,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_client",{"_index":1023,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_service_name",{"_index":387,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grpcconfig",{"_index":192,"title":{},"body":{"modules/ClientsModule.html":{}}}],["grpcmethod",{"_index":414,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersclient",{"_index":184,"title":{"injectables/GrpcUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"coverage.html":{}}}],["grpcusersservice",{"_index":388,"title":{"controllers/GrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guard",{"_index":37,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":97,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["guards/api",{"_index":439,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guards/guards.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["guardsmodule",{"_index":147,"title":{"modules/GuardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuardsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["guid",{"_index":357,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guiddto",{"_index":376,"title":{"classes/GuidDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["handler",{"_index":552,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":1052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":487,"title":{},"body":{"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":1017,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":482,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":441,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["hashrounds",{"_index":485,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":493,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":497,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":500,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":74,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["headernames",{"_index":73,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["headernames.x_api_key",{"_index":273,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["headers",{"_index":125,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"controllers/HealthController.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":127,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["health",{"_index":361,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["health.controller",{"_index":537,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["health_check_documentation_address",{"_index":1032,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["health_check_rest_address",{"_index":1031,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["healthcheck",{"_index":333,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["healthcheck(data",{"_index":569,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["healthcheckdocumentationaddress",{"_index":518,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckrestaddress",{"_index":516,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":511,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":509,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":501,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":148,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["healthy",{"_index":848,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["helper.ts",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["host",{"_index":276,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["http",{"_index":61,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["http.controller",{"_index":899,"title":{},"body":{"modules/UsersModule.html":{}}}],["http.controller.ts",{"_index":812,"title":{},"body":{"controllers/UsersHttpController.html":{},"coverage.html":{}}}],["http.controller.ts:101",{"_index":840,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:127",{"_index":845,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:155",{"_index":856,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:178",{"_index":852,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:191",{"_index":849,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:61",{"_index":822,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:77",{"_index":829,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.guard",{"_index":468,"title":{},"body":{"modules/GuardsModule.html":{}}}],["http.guard.ts",{"_index":120,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["http.guard.ts:10",{"_index":122,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:24",{"_index":123,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["httpcode",{"_index":860,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpcode(200",{"_index":877,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpcode(201",{"_index":869,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpexception",{"_index":542,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":436,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":549,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httphealthindicator",{"_index":510,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":534,"title":{},"body":{"modules/HealthModule.html":{}}}],["id",{"_index":356,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["identifier",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["igrpcusersservice",{"_index":370,"title":{"interfaces/IGrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["iloggingservice",{"_index":574,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":114,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["imports",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":68,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["includes",{"_index":565,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":709,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["initialized",{"_index":744,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":71,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["inject(injectionnames.api_key",{"_index":390,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.client_grpc_proxy",{"_index":389,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["inject(injectionnames.client_tcp_proxy",{"_index":710,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.hash_rounds",{"_index":495,"title":{},"body":{"injectables/HashPipe.html":{}}}],["inject(injectionnames.health_check_documentation_address",{"_index":521,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.health_check_rest_address",{"_index":520,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.project_name",{"_index":682,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(logging_service",{"_index":681,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(users_database_service",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":454,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["injectable",{"_index":32,"title":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":34,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":616,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectionnames",{"_index":79,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["injectionnames.api_key",{"_index":203,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.client_grpc_proxy",{"_index":178,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.client_tcp_proxy",{"_index":179,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.connection_string",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.enum",{"_index":220,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["injectionnames.grpc_config",{"_index":194,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_port",{"_index":204,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_users_client",{"_index":180,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.hash_rounds",{"_index":205,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_documentation_address",{"_index":206,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_rest_address",{"_index":207,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.project_name",{"_index":208,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.rest_port",{"_index":209,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.secrets_from_env",{"_index":210,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.swagger_config",{"_index":211,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_config",{"_index":197,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_port",{"_index":212,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_users_client",{"_index":181,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.use_swagger",{"_index":213,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectmodel",{"_index":784,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":787,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":52,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["instanceof",{"_index":90,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["intercept",{"_index":544,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":545,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":540,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":437,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["interface",{"_index":560,"title":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":561,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":785,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":433,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["invalid",{"_index":870,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":820,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["isconnected",{"_index":695,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["isemail",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/ReadUserDto.html":{}}}],["isstring()@isuuid",{"_index":20,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["isstring()@isuuid(constants.uuid_version",{"_index":472,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["isuuid",{"_index":26,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{}}}],["isuuid(constants.uuid_version",{"_index":477,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersclient",{"_index":382,"title":{"interfaces/IUsersClient.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["iusersdatabaseservice",{"_index":595,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":431,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["jane",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["join",{"_index":218,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["join(__dirname",{"_index":263,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["js",{"_index":78,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["key",{"_index":11,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["key.dto",{"_index":134,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{}}}],["key.dto.ts",{"_index":7,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["key.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["key.guard",{"_index":81,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["key.guard.ts",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:20",{"_index":105,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:37",{"_index":112,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:8",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["known",{"_index":769,"title":{},"body":{"classes/UserListDto.html":{}}}],["latest",{"_index":668,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["length(constants.display_name_min_length",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["length(constants.password_min_length",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["license",{"_index":1076,"title":{},"body":{"properties.html":{}}}],["line",{"_index":890,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["list",{"_index":602,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["list.dto",{"_index":386,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["list.dto.ts",{"_index":766,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:10",{"_index":768,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":826,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["loader",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":581,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":577,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":578,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":576,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":637,"title":{},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{}}}],["logging.service",{"_index":639,"title":{},"body":{"modules/LoggingModule.html":{}}}],["logging/logging.interface",{"_index":673,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["logging/logging.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["logging_service",{"_index":585,"title":{},"body":{"interfaces/ILoggingService.html":{},"modules/LoggingModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingmodule",{"_index":149,"title":{"modules/LoggingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"index.html":{},"modules.html":{}}}],["loggingservice",{"_index":638,"title":{"injectables/LoggingService.html":{}},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["logic",{"_index":619,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":656,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.service",{"_index":222,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["manager.service.ts",{"_index":653,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:18",{"_index":662,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:31",{"_index":671,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:37",{"_index":663,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:45",{"_index":665,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:54",{"_index":667,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["match",{"_index":608,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["matches",{"_index":606,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":582,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["messagepattern",{"_index":940,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["messagepattern({cmd",{"_index":933,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":93,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["method",{"_index":1064,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":44,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["michael",{"_index":1079,"title":{},"body":{"properties.html":{}}}],["microserviceconfigname",{"_index":1039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minimum",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":1007,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1077,"title":{},"body":{"properties.html":{}}}],["model",{"_index":774,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":139,"title":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":141,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":515,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":734,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosehealthindicator",{"_index":508,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":903,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":792,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":75,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["names.ts",{"_index":1010,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":553,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/axios",{"_index":535,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":72,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":188,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":224,"title":{},"body":{"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":512,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["new",{"_index":51,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":546,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["next.handle().pipe",{"_index":555,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["non",{"_index":255,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["notfoundexception",{"_index":634,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":236,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":481,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":109,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{}}}],["operations",{"_index":453,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["optional",{"_index":55,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":260,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{}}}],["options.headers[headernames.x_api_key",{"_index":522,"title":{},"body":{"controllers/HealthController.html":{}}}],["otherwise",{"_index":70,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["output",{"_index":1048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1065,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":261,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/ConfigurationModule.html":{}}}],["pages",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":82,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["param('guid",{"_index":874,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["parameter",{"_index":12,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["parseint",{"_index":243,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseint(rounds",{"_index":239,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseuuidpipe",{"_index":859,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["part",{"_index":1056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":719,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":720,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/ReadUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["password.'})@apiresponse({status",{"_index":843,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["password_max_length",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":858,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid",{"_index":882,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":853,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["path",{"_index":219,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["pipe",{"_index":443,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/PipesModule.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["pipe.ts",{"_index":479,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:23",{"_index":489,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:9",{"_index":484,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":442,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["pipes/pipes.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["pipesmodule",{"_index":166,"title":{"modules/PipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PipesModule.html":{},"index.html":{},"modules.html":{}}}],["pipetransform",{"_index":492,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":258,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["post",{"_index":250,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/UsersHttpController.html":{}}}],["post('/create",{"_index":868,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["post('/create')@httpcode(201)@apioperation({description",{"_index":813,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["post('/read",{"_index":876,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["post('/read')@apioperation({description",{"_index":842,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["pre",{"_index":248,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["predefined",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["predicate",{"_index":607,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["predicate(entity",{"_index":803,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["prefix",{"_index":225,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/variables.html":{}}}],["pre}${restport}${post",{"_index":252,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["private",{"_index":328,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["processed",{"_index":571,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["project_name",{"_index":1018,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projectname",{"_index":661,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["projects/${this.projectname}/secrets/${secretname}/versions/latest",{"_index":686,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":108,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":461,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["promise.all",{"_index":922,"title":{},"body":{"injectables/UsersService.html":{}}}],["prop",{"_index":731,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":723,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["protected",{"_index":45,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["proto/users.proto",{"_index":264,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["protopath",{"_index":262,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":39,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":190,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":452,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["providing",{"_index":767,"title":{},"body":{"classes/UserListDto.html":{}}}],["proxy",{"_index":340,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rcp",{"_index":62,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["read",{"_index":60,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersHttpController.html":{}}}],["readapikey",{"_index":46,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readapikey(context",{"_index":57,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["reading",{"_index":650,"title":{},"body":{"classes/ReadUserDto.html":{}}}],["readonly",{"_index":116,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["readuserdto",{"_index":648,"title":{"classes/ReadUserDto.html":{}},"body":{"classes/ReadUserDto.html":{},"controllers/UsersHttpController.html":{},"coverage.html":{}}}],["readuserdto.email",{"_index":880,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["readuserdto.password",{"_index":881,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["reflect",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":334,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(data",{"_index":420,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(guid",{"_index":364,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":69,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":126,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["requests",{"_index":63,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["required",{"_index":736,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resolve",{"_index":462,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["response",{"_index":397,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rest",{"_index":517,"title":{},"body":{"controllers/HealthController.html":{}}}],["rest_port",{"_index":1020,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["restport",{"_index":247,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["result",{"_index":349,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["result.acknowledged",{"_index":807,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":810,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.every((value",{"_index":925,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.matchedcount",{"_index":808,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":1049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":30,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":550,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":541,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":91,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["returned",{"_index":838,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["rounds",{"_index":237,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{}}}],["rpcexception",{"_index":543,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":559,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rxjs",{"_index":113,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"dependencies.html":{}}}],["schema",{"_index":722,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":732,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":738,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":221,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["secretmanagerservice",{"_index":214,"title":{"injectables/SecretManagerService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"index.html":{}}}],["secretmanagerservice.getconnectionstring",{"_index":235,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["secretmanagerserviceclient",{"_index":670,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":669,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":676,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":674,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets_from_env",{"_index":1019,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secretsfromenv",{"_index":233,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["send",{"_index":712,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["sent",{"_index":344,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["server",{"_index":343,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["service",{"_index":269,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["serviceapikey",{"_index":56,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["services",{"_index":121,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"miscellaneous/functions.html":{}}}],["setdescription('the",{"_index":268,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["settitle('usersservice",{"_index":267,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["setup",{"_index":1037,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.0",{"_index":270,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["simple",{"_index":360,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["single",{"_index":471,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["src/.../configuration.module.ts",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grpc",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../header",{"_index":1009,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../injectionnames.enum.ts",{"_index":1011,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":1012,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1083,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["src/clients/clients.module.ts",{"_index":182,"title":{},"body":{"modules/ClientsModule.html":{}}}],["src/clients/grpc",{"_index":325,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/clients/tcp",{"_index":694,"title":{},"body":{"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["src/configuration/configuration.module.ts",{"_index":215,"title":{},"body":{"modules/ConfigurationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/injectionnames.enum.ts",{"_index":1016,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/secret",{"_index":652,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":35,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/guards/guards.module.ts",{"_index":467,"title":{},"body":{"modules/GuardsModule.html":{}}}],["src/header",{"_index":1013,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/health/health.controller.ts",{"_index":502,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:43",{"_index":505,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":533,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/interceptors/http",{"_index":538,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/logging/logging.interface.ts",{"_index":575,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logging/logging.interface.ts:15",{"_index":580,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/logging/logging.module.ts",{"_index":636,"title":{},"body":{"modules/LoggingModule.html":{}}}],["src/logging/logging.service.ts",{"_index":640,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/logging/logging.service.ts:14",{"_index":641,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/main.ts",{"_index":956,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":478,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/pipes/pipes.module.ts",{"_index":647,"title":{},"body":{"modules/PipesModule.html":{}}}],["src/users/constants.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/controllers/users",{"_index":411,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["src/users/database/user.schema.ts",{"_index":721,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":725,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":727,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":728,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:36",{"_index":730,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/api",{"_index":6,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":470,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:13",{"_index":473,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/read",{"_index":649,"title":{},"body":{"classes/ReadUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":717,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":765,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":739,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":743,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":745,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":747,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":753,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":754,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":562,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":618,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":622,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":623,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":624,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:42",{"_index":626,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:54",{"_index":628,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:61",{"_index":627,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":771,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["src/users/users.module.ts",{"_index":895,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:108",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:135",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":907,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:52",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":579,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":507,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["stopatfirsterror",{"_index":444,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":966,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":1046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super(serviceapikey",{"_index":85,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["support",{"_index":1070,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1071,"title":{},"body":{"modules.html":{}}}],["swagger_config",{"_index":1030,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["tcp",{"_index":130,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["tcp.controller",{"_index":902,"title":{},"body":{"modules/UsersModule.html":{}}}],["tcp.controller.ts",{"_index":932,"title":{},"body":{"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["tcp.controller.ts:103",{"_index":937,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:50",{"_index":934,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:60",{"_index":935,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:72",{"_index":936,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:83",{"_index":939,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:93",{"_index":938,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard",{"_index":469,"title":{},"body":{"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{}}}],["tcp.guard.ts",{"_index":129,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["tcp.guard.ts:10",{"_index":131,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:24",{"_index":132,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp_config",{"_index":1028,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_port",{"_index":1022,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_users_client",{"_index":1026,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcpconfig",{"_index":195,"title":{},"body":{"modules/ClientsModule.html":{}}}],["tcpusersclient",{"_index":189,"title":{"injectables/TcpUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":536,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../client.tester.ts",{"_index":1035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":1036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/client.tester.ts",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/test",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":1050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":1057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":1060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":1061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["this.apikey",{"_index":523,"title":{},"body":{"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client",{"_index":685,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.accesssecretversion",{"_index":688,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.close",{"_index":408,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.connect",{"_index":716,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.clientservice",{"_index":391,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.create(data",{"_index":399,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findall",{"_index":401,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findone(dto",{"_index":403,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.healthcheck",{"_index":407,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.remove(dto",{"_index":406,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.update(dto",{"_index":405,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.connect",{"_index":711,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.databaseservice.create(user",{"_index":919,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":920,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":921,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findonebypredicate(predicate",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":757,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":759,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.api_key",{"_index":683,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":684,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.guid",{"_index":763,"title":{},"body":{"classes/User-1.html":{}}}],["this.hashrounds",{"_index":498,"title":{},"body":{"injectables/HashPipe.html":{}}}],["this.healthcheckdocumentationaddress",{"_index":530,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckrestaddress",{"_index":526,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckservice.check",{"_index":524,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httphealthindicator.pingcheck",{"_index":525,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isconnected",{"_index":715,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":692,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.metadata",{"_index":393,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.metadata.add(headernames.x_api_key",{"_index":394,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.mongoosehealthindicator.pingcheck('users",{"_index":527,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.password",{"_index":761,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":117,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.serviceapikey",{"_index":118,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.usermodel(user",{"_index":788,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":809,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().cursor",{"_index":801,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":796,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":798,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":805,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":872,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.create(data",{"_index":455,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findall",{"_index":457,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":458,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(guid",{"_index":875,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.findonebyemailandpassword",{"_index":879,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":460,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.remove(guid",{"_index":886,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.update(data.guid",{"_index":459,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.update(guid",{"_index":884,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["throw",{"_index":558,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":632,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":630,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/ReadUserDto.html":{}}}],["transform(value",{"_index":488,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":491,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["transport",{"_index":217,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.grpc",{"_index":259,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.tcp",{"_index":275,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["true",{"_index":110,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":687,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1081,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":891,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["undefined",{"_index":67,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiresponse({status",{"_index":827,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["unique",{"_index":724,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":446,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["unqiue",{"_index":729,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unused",{"_index":943,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["update",{"_index":335,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(data",{"_index":422,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(guid",{"_index":367,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":404,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["updated.'})@apiresponse({status",{"_index":854,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["updateuserdto",{"_index":368,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["updating",{"_index":718,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":265,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["use",{"_index":699,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["use_swagger",{"_index":1029,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":198,"title":{},"body":{"modules/ClientsModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":486,"title":{},"body":{"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{}}}],["useguards",{"_index":424,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useguards(apikeygrpcguard",{"_index":449,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeytcpguard",{"_index":942,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["useinterceptors",{"_index":425,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useinterceptors(new",{"_index":448,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["usepipes",{"_index":426,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user",{"_index":283,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/ReadUserDto.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":832,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.'})@apiresponse({status",{"_index":814,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.displayname",{"_index":758,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":375,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user.dto.ts",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":651,"title":{},"body":{"classes/ReadUserDto.html":{}}}],["user.dto.ts:33",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["user.dto.ts:45",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":760,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":904,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":762,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["usercontroller",{"_index":450,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["userdatabase",{"_index":742,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":764,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":735,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":777,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":790,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":384,"title":{"classes/UserListDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["userlistdto.users",{"_index":402,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["usermodel",{"_index":776,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":185,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users.'})@apiresponse({status",{"_index":824,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["users.service",{"_index":897,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/api",{"_index":133,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["users/dto/create",{"_index":374,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/guid.dto",{"_index":377,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["users/dto/update",{"_index":378,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/user",{"_index":385,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/entities/user.entity",{"_index":379,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/interfaces/users",{"_index":380,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/users.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["users_database_service",{"_index":617,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service",{"_index":432,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service_",{"_index":229,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["users_service_prefix",{"_index":228,"title":{},"body":{"modules/ConfigurationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service_prefix}${injectionnames.api_key",{"_index":232,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.connection_string",{"_index":234,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.grpc_port",{"_index":245,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.hash_rounds",{"_index":238,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.health_check_documentation_address",{"_index":253,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.health_check_rest_address}_post",{"_index":251,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.health_check_rest_address}_pre",{"_index":249,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.project_name",{"_index":240,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.rest_port",{"_index":244,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.secrets_from_env",{"_index":242,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.tcp_port",{"_index":246,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.use_swagger",{"_index":254,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["userschema",{"_index":737,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdatabaseservice",{"_index":770,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usershttpcontroller",{"_index":811,"title":{"controllers/UsersHttpController.html":{}},"body":{"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":150,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":451,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usersserviceapikey",{"_index":678,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["usersserviceconnectionstring",{"_index":680,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["userstcpcontroller",{"_index":896,"title":{"controllers/UsersTcpController.html":{}},"body":{"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user})@apiresponse({status",{"_index":816,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["using",{"_index":327,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["uuid",{"_index":474,"title":{},"body":{"classes/GuidDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuids",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":755,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":83,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validate",{"_index":106,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validated",{"_index":396,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["validating",{"_index":38,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validation",{"_index":1053,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":427,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/ReadUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":23,"title":{},"body":{"classes/ApiKeyDto.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/ReadUserDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ReadUserDto.html":{}}}],["values",{"_index":257,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["variable",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":227,"title":{"miscellaneous/variables.html":{}},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":944,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["version",{"_index":475,"title":{},"body":{"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version.payload.data.tostring",{"_index":689,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":584,"title":{},"body":{"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/LoggingService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":445,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["whose",{"_index":348,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["x",{"_index":1015,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":1014,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":583,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiKeyDto.html":{"url":"classes/ApiKeyDto.html","title":"class - ApiKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/api-key.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes an api key parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/api-key.dto.ts:12\n                        \n                    \n\n            \n                \n                    The value of the api key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * Describes an api key parameter.\n */\nexport default class ApiKeyDto {\n  /**\n   * The value of the api key.\n   */\n  @IsString()\n  @IsUUID()\n  apiKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyGrpcGuard.html":{"url":"injectables/ApiKeyGrpcGuard.html","title":"injectable - ApiKeyGrpcGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyGrpcGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-grpc.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key in GRPC context.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-grpc.guard.ts:11\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:25\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key in GRPC context.\n */\n@Injectable()\nexport class ApiKeyGrpcGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const metadata: Metadata = context\n      .getArgs()\n      .find((arg) => arg instanceof Metadata);\n    if (!metadata) {\n      return;\n    }\n\n    const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n    if (!apiKeys || apiKeys.length !== 1) {\n      return;\n    }\n\n    return apiKeys[0].toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Base guard for validating api keys.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Protected\n                                    Abstract\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key.guard.ts:8\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:20\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Abstract\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:37\n                \n            \n\n\n            \n                \n                    Read the api key from requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Base guard for validating api keys.\n */\n@Injectable()\nexport abstract class ApiKeyGuard implements CanActivate {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(private readonly serviceApiKey: string) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected abstract readApiKey(context: ExecutionContext): string | undefined;\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyHttpGuard.html":{"url":"injectables/ApiKeyHttpGuard.html","title":"injectable - ApiKeyHttpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyHttpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-http.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for http services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-http.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { HeaderNames } from '../header-names';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for http services.\n */\n@Injectable()\nexport class ApiKeyHttpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const headers = request?.headers;\n\n    if (!headers) {\n      return;\n    }\n\n    return headers[HeaderNames.X_API_KEY];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyTcpGuard.html":{"url":"injectables/ApiKeyTcpGuard.html","title":"injectable - ApiKeyTcpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyTcpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-tcp.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for tcp services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-tcp.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport ApiKeyDto from '../users/dto/api-key.dto';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for tcp services.\n */\n@Injectable()\nexport class ApiKeyTcpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const data = context.getArgs().find((args) => (args as ApiKeyDto).apiKey);\n    if (data) {\n      return (data as ApiKeyDto).apiKey;\n    }\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggingModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { LoggingModule } from './logging/logging.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { HealthModule } from './health/health.module';\nimport { ClientsModule } from './clients/clients.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { GuardsModule } from './guards/guards.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { InjectionNames } from './configuration/InjectionNames.enum';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      useFactory: (connectionString: string) => {\n        return { uri: connectionString };\n      },\n      inject: [InjectionNames.CONNECTION_STRING],\n      imports: [ConfigurationModule],\n    }),\n    LoggingModule,\n    UsersModule,\n    HealthModule,\n    ClientsModule,\n    ConfigurationModule,\n    GuardsModule,\n    PipesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientsModule.html":{"url":"modules/ClientsModule.html","title":"module - ClientsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_imports\n\n\n\ncluster_ClientsModule_exports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nClientsModule\n\nClientsModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/clients/clients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.CLIENT_GRPC_PROXY\n                        \n                        \n                            InjectionNames.CLIENT_TCP_PROXY\n                        \n                        \n                            InjectionNames.GRPC_USERS_CLIENT\n                        \n                        \n                            InjectionNames.TCP_USERS_CLIENT\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GrpcUsersClient } from './grpc-users-client';\nimport { ClientProxyFactory } from '@nestjs/microservices';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { TcpUsersClient } from './tcp-users-client';\n\n@Module({\n  exports: [\n    InjectionNames.GRPC_USERS_CLIENT,\n    InjectionNames.TCP_USERS_CLIENT,\n    InjectionNames.CLIENT_GRPC_PROXY,\n    InjectionNames.CLIENT_TCP_PROXY,\n  ],\n  imports: [ConfigurationModule],\n  providers: [\n    {\n      provide: InjectionNames.CLIENT_GRPC_PROXY,\n      useFactory: (grpcConfig: any) => ClientProxyFactory.create(grpcConfig),\n      inject: [InjectionNames.GRPC_CONFIG],\n    },\n    {\n      provide: InjectionNames.CLIENT_TCP_PROXY,\n      useFactory: (tcpConfig: any) => {\n        return ClientProxyFactory.create(tcpConfig);\n      },\n      inject: [InjectionNames.TCP_CONFIG],\n    },\n    {\n      provide: InjectionNames.GRPC_USERS_CLIENT,\n      useClass: GrpcUsersClient,\n    },\n    {\n      provide: InjectionNames.TCP_USERS_CLIENT,\n      useClass: TcpUsersClient,\n    },\n  ],\n})\nexport class ClientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_imports\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nLoggingModule\n\nLoggingModule\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT  -->\n\nConfigurationModule->InjectionNames.GRPC_PORT \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT  -->\n\nConfigurationModule->InjectionNames.REST_PORT \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT  -->\n\nConfigurationModule->InjectionNames.TCP_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecretManagerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.API_KEY\n                        \n                        \n                            InjectionNames.CONNECTION_STRING\n                        \n                        \n                            InjectionNames.GRPC_CONFIG\n                        \n                        \n                            InjectionNames.GRPC_PORT\n                        \n                        \n                            InjectionNames.HASH_ROUNDS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_REST_ADDRESS\n                        \n                        \n                            InjectionNames.PROJECT_NAME\n                        \n                        \n                            InjectionNames.REST_PORT\n                        \n                        \n                            InjectionNames.SECRETS_FROM_ENV\n                        \n                        \n                            InjectionNames.SWAGGER_CONFIG\n                        \n                        \n                            InjectionNames.TCP_CONFIG\n                        \n                        \n                            InjectionNames.TCP_PORT\n                        \n                        \n                            InjectionNames.USE_SWAGGER\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Transport } from '@nestjs/microservices';\nimport { join } from 'path';\nimport { LoggingModule } from '../logging/logging.module';\nimport { InjectionNames } from './InjectionNames.enum';\nimport { SecretManagerService } from './secret-manager.service';\nimport { DocumentBuilder } from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\n\n/**\n * Prefix for environment variables.\n */\nconst USERS_SERVICE_PREFIX = 'USERS_SERVICE_';\n\n@Module({\n  exports: [\n    InjectionNames.API_KEY,\n    InjectionNames.GRPC_CONFIG,\n    InjectionNames.TCP_CONFIG,\n    InjectionNames.USE_SWAGGER,\n    InjectionNames.HASH_ROUNDS,\n    InjectionNames.PROJECT_NAME,\n    InjectionNames.SECRETS_FROM_ENV,\n    InjectionNames.CONNECTION_STRING,\n    InjectionNames.SWAGGER_CONFIG,\n    InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n    InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n    InjectionNames.REST_PORT,\n    InjectionNames.GRPC_PORT,\n    InjectionNames.TCP_PORT,\n  ],\n  imports: [ConfigModule.forRoot({}), LoggingModule],\n  providers: [\n    SecretManagerService,\n    {\n      provide: InjectionNames.API_KEY,\n      useFactory: async (configService: ConfigService): Promise => {\n        return configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.API_KEY}`,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.CONNECTION_STRING,\n      useFactory: async (\n        secretsFromEnv: boolean,\n        configService: ConfigService,\n        secretManagerService: SecretManagerService,\n      ): Promise => {\n        if (secretsFromEnv) {\n          return configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.CONNECTION_STRING}`,\n          );\n        }\n\n        return secretManagerService.getConnectionString();\n      },\n      inject: [\n        InjectionNames.SECRETS_FROM_ENV,\n        ConfigService,\n        SecretManagerService,\n      ],\n    },\n    {\n      provide: InjectionNames.HASH_ROUNDS,\n      useFactory: (configService: ConfigService): number => {\n        const rounds = configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HASH_ROUNDS}`,\n        );\n        return parseInt(rounds);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.PROJECT_NAME,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.PROJECT_NAME}`,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SECRETS_FROM_ENV,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.SECRETS_FROM_ENV}`,\n        );\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.REST_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(\n          configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.REST_PORT}`,\n          ),\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.GRPC_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(\n          configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.GRPC_PORT}`,\n          ),\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.TCP_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(\n          configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.TCP_PORT}`,\n          ),\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n      useFactory: (configService: ConfigService, restPort: number): string => {\n        const pre = configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_REST_ADDRESS}_PRE`,\n        );\n        const post = configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_REST_ADDRESS}_POST`,\n        );\n        return `${pre}${restPort}${post}`;\n      },\n      inject: [ConfigService, InjectionNames.REST_PORT],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS}`,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.USE_SWAGGER,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.USE_SWAGGER}`,\n        );\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    /**\n     * NON ENV VALUES\n     */\n    {\n      provide: InjectionNames.GRPC_CONFIG,\n      useFactory: (configService: ConfigService, port: number) => {\n        return {\n          transport: Transport.GRPC,\n          options: {\n            package: ['users'],\n            protoPath: [join(__dirname, '../proto/users.proto')],\n            url: `0.0.0.0:${port}`,\n          },\n        };\n      },\n      inject: [ConfigService, InjectionNames.GRPC_PORT],\n    },\n    {\n      provide: InjectionNames.SWAGGER_CONFIG,\n      useFactory: () => {\n        return new DocumentBuilder()\n          .setTitle('UsersService')\n          .setDescription('The api of the users service.')\n          .setVersion('1.0')\n          .addTag('users')\n          .addApiKey(\n            { type: 'apiKey', name: HeaderNames.X_API_KEY, in: 'header' },\n            HeaderNames.X_API_KEY,\n          )\n          .build();\n      },\n    },\n    {\n      provide: InjectionNames.TCP_CONFIG,\n      useFactory: (configService: ConfigService, port: number): any => {\n        return {\n          transport: Transport.TCP,\n          options: {\n            host: '0.0.0.0',\n            port,\n          },\n        };\n      },\n      inject: [ConfigService, InjectionNames.TCP_PORT],\n    },\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GrpcUsersClient.html":{"url":"injectables/GrpcUsersClient.html","title":"injectable - GrpcUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GrpcUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/grpc-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using grpc.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clientService\n                            \n                            \n                                    Private\n                                    Readonly\n                                metadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientGrpcProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/grpc-users-client.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a new instance of GrpcUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientGrpcProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The grpc client proxy that is configured to access the server by grpc.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:124\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:66\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:77\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:116\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:90\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clientService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IGrpcUsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:28\n                        \n                    \n\n            \n                \n                    Service for accessing the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Metadata\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:33\n                        \n                    \n\n            \n                \n                    The default metadata that is sent to the server.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientGrpcProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport GuidDto from '../users/dto/guid.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport { User } from '../users/entities/user.entity';\nimport { IGrpcUsersService } from '../users/interfaces/users-grpc-controller.interface';\nimport IUsersClient from '../users/interfaces/users-client.interface';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * The name of the grpc users service.\n */\nconst GRPC_USERS_SERVICE_NAME = 'GrpcUsersService';\n\n/**\n * Client for the users service using grpc.\n */\n@Injectable()\nexport class GrpcUsersClient implements IUsersClient {\n  /**\n   * Service for accessing the server.\n   */\n  private readonly clientService: IGrpcUsersService;\n\n  /**\n   * The default metadata that is sent to the server.\n   */\n  private readonly metadata: Metadata;\n\n  /**\n   * Creates a new instance of GrpcUsersClient.\n   * @param client The grpc client proxy that is configured to access the server by grpc.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_GRPC_PROXY)\n    private readonly client: ClientGrpcProxy,\n    @Inject(InjectionNames.API_KEY) apiKey: string,\n  ) {\n    this.clientService = client.getService(\n      GRPC_USERS_SERVICE_NAME,\n    );\n    this.metadata = new Metadata();\n    this.metadata.add(HeaderNames.X_API_KEY, apiKey);\n  }\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const response = await this.clientService.create(data, this.metadata);\n    return await firstValueFrom(response);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await this.clientService.findAll({}, this.metadata);\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const dto: GuidDto = { guid };\n    const response = await this.clientService.findOne(dto, this.metadata);\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const dto: UpdateUserDto & GuidDto = {\n      guid,\n      ...data,\n    };\n    const response = await this.clientService.update(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const dto: GuidDto = {\n      guid,\n    };\n    const response = await this.clientService.remove(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await this.clientService.healthCheck({}, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:100\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyGrpcGuard } from '../../guards/api-key-grpc.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGrpcGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  healthCheck(): Promise {\n    return new Promise((resolve) => resolve());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuardsModule.html":{"url":"modules/GuardsModule.html","title":"module - GuardsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_GuardsModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guards/guards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { ApiKeyGrpcGuard } from './api-key-grpc.guard';\nimport { ApiKeyHttpGuard } from './api-key-http.guard';\nimport { ApiKeyTcpGuard } from './api-key-tcp.guard';\n\n@Module({\n  exports: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n  imports: [ConfigurationModule],\n  providers: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n})\nexport class GuardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID(Constants.UUID_VERSION)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:13\n                        \n                    \n\n            \n                \n                    An uuid in version 4.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { Constants } from '../constants';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  /**\n   * An uuid in version 4.\n   */\n  @IsString()\n  @IsUUID(Constants.UUID_VERSION)\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashRounds: number)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:9\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        hashRounds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of used hash rounds.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:23\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, Inject } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param hashRounds The number of used hash rounds.\n   */\n  constructor(\n    @Inject(InjectionNames.HASH_ROUNDS) private readonly hashRounds: number,\n  ) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    if (data.email) {\n      data.email = hashSync(data.email, this.hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, this.hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                A controller for checking the application health.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:43\n                \n            \n\n\n            \n                \n                    Execute health checks for the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The health status of the server.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport {\n  MongooseHealthIndicator,\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  HealthCheckResult,\n} from '@nestjs/terminus';\nimport { HeaderNames } from '../header-names';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * A controller for checking the application health.\n */\n@Controller('health')\nexport class HealthController {\n  /**\n   * Creates a new instance of HealthController.\n   * @param healthCheckService Service for checking the application health.\n   * @param httpHealthIndicator Http-based health checks.\n   * @param mongooseHealthIndicator Check the health of the mongodb.\n   * @param apiKey The api key that used for requests.\n   * @param healthCheckRestAddress The address for the rest health check.\n   * @param healthCheckDocumentationAddress The address of the users service documentation.\n   */\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private httpHealthIndicator: HttpHealthIndicator,\n    private mongooseHealthIndicator: MongooseHealthIndicator,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n    @Inject(InjectionNames.HEALTH_CHECK_REST_ADDRESS)\n    private readonly healthCheckRestAddress: string,\n    @Inject(InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS)\n    private readonly healthCheckDocumentationAddress: string,\n  ) {}\n\n  /**\n   * Execute health checks for the application.\n   * @returns The health status of the server.\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    const options = { headers: {} };\n    options.headers[HeaderNames.X_API_KEY] = this.apiKey;\n\n    return this.healthCheckService.check([\n      async () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service REST',\n          this.healthCheckRestAddress,\n          options,\n        ),\n      async () =>\n        this.mongooseHealthIndicator.pingCheck('Users Service Database'),\n      () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service Documenation',\n          this.healthCheckDocumentationAddress,\n        ),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  imports: [TerminusModule, HttpModule, ConfigurationModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrpcUsersService.html":{"url":"interfaces/IGrpcUsersService.html","title":"interface - IGrpcUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-grpc-controller.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service interface for the GRPC service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:17\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:24\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:32\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:57\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data is not processed.\n\n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:49\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:41\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport GuidDto from '../dto/guid.dto';\nimport { Observable } from 'rxjs';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Service interface for the GRPC service.\n */\nexport interface IGrpcUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto, metadata: Metadata): Observable;\n\n  /**\n   * Find all users of the application.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(data: any, metadata: Metadata): Observable;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  update(data: UpdateUserDto & GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  remove(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Execute a simple health check.\n   * @param data The data is not processed.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(data: any, metadata: Metadata): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersClient.html":{"url":"interfaces/IUsersClient.html","title":"interface - IUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-client.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface that describes operations on users for controller and client.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:53\n                \n            \n\n\n            \n                \n                    Close the client connection.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:14\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:20\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:27\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:48\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:42\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:35\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Interface that describes operations on users for controller and client.\n */\nexport default interface IUsersClient {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto): Promise;\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  update(guid: string, data: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  remove(guid: string): Promise;\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(): Promise;\n\n  /**\n   * Close the client connection.\n   */\n  close(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        findOneByPredicate\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByPredicate\n                        \n                    \n                \n            \n            \n                \nfindOneByPredicate(predicate: (user: User) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Find a user that matches the given predicate.\n match is found.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A function that checks for a matching user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the the matching user or undefined if no\nmatch is found.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:57\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:50\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Find a user that matches the given predicate.\n   * @param predicate A function that checks for a matching user.\n   * @returns A Promise whose result is the the matching user or undefined if no\n   *  match is found.\n   */\n  findOneByPredicate(\n    predicate: (user: User) => Promise,\n  ): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        findOneByEmailAndPassword\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \nfindOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:42\n                \n            \n\n\n            \n                \n                    Find a user by email and password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The email of the user.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The password of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the matching user or undefined if no user matches.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:61\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:54\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Find a user by email and password.\n   * @param email The email of the user.\n   * @param password The password of the user.\n   * @returns A Promise whose result is the matching user or undefined if no user matches.\n   */\n  findOneByEmailAndPassword(\n    email: string,\n    password: string,\n  ): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingModule.html":{"url":"modules/LoggingModule.html","title":"module - LoggingModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logging/logging.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\n\n@Module({\n  exports: [LOGGING_SERVICE],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n  ],\n})\nexport class LoggingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_imports\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/pipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HashPipe\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { HashPipe } from './hash-pipe';\n\n@Module({\n  exports: [HashPipe],\n  imports: [ConfigurationModule],\n  providers: [HashPipe],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReadUserDto.html":{"url":"classes/ReadUserDto.html","title":"class - ReadUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReadUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/read-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for reading a user by email and password.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/read-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/read-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for reading a user by email and password.\n */\nexport class ReadUserDto {\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getApiKey\n                            \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, projectName: string)\n                    \n                \n                        \n                            \n                                Defined in src/configuration/secret-manager.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        projectName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApiKey()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:37\n                \n            \n\n\n            \n                \n                    Gets the api key for the users service.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The api key.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:45\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:54\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/configuration/secret-manager.service.ts:31\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ILoggingService, LOGGING_SERVICE } from '../logging/logging.interface';\nimport { InjectionNames } from './InjectionNames.enum';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  API_KEY = 'UsersServiceApiKey',\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    @Inject(InjectionNames.PROJECT_NAME) private readonly projectName: string,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the api key for the users service.\n   * @returns The api key.\n   */\n  async getApiKey(): Promise {\n    return this.getSecretAsync(SecretNames.API_KEY);\n  }\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.projectName}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TcpUsersClient.html":{"url":"injectables/TcpUsersClient.html","title":"injectable - TcpUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TcpUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/tcp-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using tcp.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isConnected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/tcp-users-client.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the TcpUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A client proxy that is configured to use tcp.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:127\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:135\n                \n            \n\n\n            \n                \n                    Establish a connection to the server.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The proxy client that is connected to the server.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:71\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:117\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:105\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:86\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/clients/tcp-users-client.ts:19\n                        \n                    \n\n            \n                \n                    Indicates if the client is connected.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { User } from '../users/entities/user.entity';\nimport IUsersClient from '../users/interfaces/users-client.interface';\n\n/**\n * Client for the users service using tcp.\n */\n@Injectable()\nexport class TcpUsersClient implements IUsersClient {\n  /**\n   * Indicates if the client is connected.\n   */\n  private isConnected = false;\n\n  /**\n   * Creates a new instance of the TcpUsersClient.\n   * @param client A client proxy that is configured to use tcp.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_TCP_PROXY)\n    private readonly client: ClientProxy,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const user = await firstValueFrom(\n      await (\n        await this.connect()\n      ).send(\n        { cmd: 'create' },\n        {\n          ...data,\n          apiKey: this.apiKey,\n        },\n      ),\n    );\n\n    return user;\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findAll' }, { apiKey: this.apiKey });\n\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findOne' }, { guid, apiKey: this.apiKey });\n\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const response = await (\n      await this.connect()\n    ).send(\n      { cmd: 'update' },\n      {\n        guid,\n        ...data,\n        apiKey: this.apiKey,\n      },\n    );\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'remove' }, { guid, apiKey: this.apiKey });\n\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'healthCheck' }, { apiKey: this.apiKey });\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n\n  /**\n   * Establish a connection to the server.\n   * @returns The proxy client that is connected to the server.\n   */\n  private async connect(): Promise {\n    if (!this.isConnected) {\n      await this.client.connect();\n    }\n\n    return this.client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the schema for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:36\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * The document type for users.\n */\nexport type UserDocument = User & Document;\n\n/**\n * Describes the schema for users.\n */\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\n/**\n * The mongodb schema for users.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:10\n                        \n                    \n\n            \n                \n                    All known users of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  /**\n   * All known users of the application.\n   */\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByPredicate\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            Create a new instance of UsersDatabaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The model for database operations on users.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:28\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:46\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:57\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByPredicate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByPredicate(predicate: (user: UserEntity) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:70\n                \n            \n\n\n            \n                \n                    Find a user that matches the given predicate.\n match is found.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A function that checks for a matching user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the the matching user or undefined if no\nmatch is found.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:110\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:92\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  /**\n   * Create a new instance of UsersDatabaseService.\n   * @param userModel The model for database operations on users.\n   */\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Find a user that matches the given predicate.\n   * @param predicate A function that checks for a matching user.\n   * @returns A Promise whose result is the the matching user or undefined if no\n   *  match is found.\n   */\n  async findOneByPredicate(\n    predicate: (user: UserEntity) => Promise,\n  ): Promise {\n    const cursor = this.userModel.find().cursor();\n    let document = await cursor.next();\n    while (document) {\n      const entity = new UserEntity(document);\n      if (await predicate(entity)) {\n        cursor.close();\n        return entity;\n      }\n\n      document = await cursor.next();\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersHttpController.html":{"url":"controllers/UsersHttpController.html","title":"controller - UsersHttpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersHttpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-http.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneByEmailAndPassword\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:61\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:77\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:101\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \nfindOneByEmailAndPassword(readUserDto: ReadUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/read')@ApiOperation({description: 'Read the data of a certain user by email and password.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given email and password is found.'})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:127\n                \n            \n\n\n            \n                \n                    Get a user by its email and password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    readUserDto\n                                    \n                                                ReadUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health/check')@ApiOperation({description: 'Execute a simple health check.'})@ApiResponse({status: 200, description: 'The service is healthy.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:191\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:178\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:155\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../../header-names';\nimport { HashPipe } from '../../pipes/hash-pipe';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { ReadUserDto } from '../dto/read-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersHttpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post('/create')\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body(HashPipe) createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Get a user by its email and password.\n   * @returns A Promise whose result is a User.\n   */\n  @Post('/read')\n  @ApiOperation({\n    description: 'Read the data of a certain user by email and password.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({\n    status: 404,\n    description: 'No user with given email and password is found.',\n  })\n  @HttpCode(200)\n  findOneByEmailAndPassword(@Body() readUserDto: ReadUserDto): Promise {\n    return this.usersService.findOneByEmailAndPassword(\n      readUserDto.email,\n      readUserDto.password,\n    );\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body(HashPipe) updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   */\n  @Get('health/check')\n  @ApiOperation({ description: 'Execute a simple health check.' })\n  @ApiResponse({ status: 200, description: 'The service is healthy.' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersHttpController\n                        \n                        \n                            GrpcUsersService\n                        \n                        \n                            UsersTcpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersHttpController } from './controllers/users-http.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './controllers/users-grpc.controller';\nimport { UsersTcpController } from './controllers/users-tcp.controller';\nimport { GuardsModule } from '../guards/guards.module';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  controllers: [UsersHttpController, GrpcUsersService, UsersTcpController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    GuardsModule,\n    ConfigurationModule,\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmailAndPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:38\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:52\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:62\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n                    Find a user by email and password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The email of the user.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The password of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the matching user or undefined if no user matches.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:135\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:108\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { compare } from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\nimport { IUsersService } from './interfaces/users.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService implements IUsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find a user by email and password.\n   * @param email The email of the user.\n   * @param password The password of the user.\n   * @returns A Promise whose result is the matching user or undefined if no user matches.\n   */\n  async findOneByEmailAndPassword(\n    email: string,\n    password: string,\n  ): Promise {\n    const predicate = async (user: User) => {\n      try {\n        const result = await Promise.all([\n          compare(email, user.email),\n          compare(password, user.password),\n        ]);\n        return result.every((value) => value);\n      } catch {\n        return false;\n      }\n    };\n\n    const user = await this.databaseService.findOneByPredicate(predicate);\n    if (!user) {\n      throw new NotFoundException();\n    }\n\n    return user;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersTcpController.html":{"url":"controllers/UsersTcpController.html","title":"controller - UsersTcpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersTcpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-tcp.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                TCP CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'create'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:50\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(data: ApiKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findAll'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ApiKeyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findOne'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:72\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'healthCheck'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:103\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'remove'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:93\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'update'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyTcpGuard } from '../../guards/api-key-tcp.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\nimport ApiKeyDto from '../dto/api-key.dto';\n\n/**\n * TCP CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyTcpGuard)\n@Controller()\nexport class UsersTcpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'create' })\n  create(data: CreateUserDto & ApiKeyDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @MessagePattern({ cmd: 'findAll' })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findAll(data: ApiKeyDto): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'findOne' })\n  findOne(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'update' })\n  update(data: UpdateUserDto & GuidDto & ApiKeyDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'remove' })\n  remove(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'healthCheck' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            injectable\n            GrpcUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            variable\n            GRPC_USERS_SERVICE_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/clients/tcp-users-client.ts\n            \n            injectable\n            TcpUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/configuration/configuration.module.ts\n            \n            variable\n            USERS_SERVICE_PREFIX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/guards/api-key-grpc.guard.ts\n            \n            injectable\n            ApiKeyGrpcGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-http.guard.ts\n            \n            injectable\n            ApiKeyHttpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-tcp.guard.ts\n            \n            injectable\n            ApiKeyTcpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/logging/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/constants.ts\n            \n            variable\n            Constants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/controllers/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-http.controller.ts\n            \n            controller\n            UsersHttpController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/controllers/users-tcp.controller.ts\n            \n            controller\n            UsersTcpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/api-key.dto.ts\n            \n            class\n            ApiKeyDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/read-user.dto.ts\n            \n            class\n            ReadUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-client.interface.ts\n            \n            interface\n            IUsersClient\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-grpc-controller.interface.ts\n            \n            interface\n            IGrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                test/client.tester.ts\n            \n            function\n            clientTest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/axios : ^0.1.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gh-pages : ^4.0.0\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            InjectionNames   (src/.../InjectionNames.enum.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/configuration/InjectionNames.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        InjectionNames\n                    \n                \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : API_KEY\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 REST_PORT\n                            \n                        \n                        \n                            \n                                Value : REST_PORT\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : TCP_PORT\n                            \n                        \n                        \n                            \n                                 GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                 CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                 TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                Value : GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                 TCP_CONFIG\n                            \n                        \n                        \n                            \n                                Value : TCP_CONFIG\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                Value : SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n            \n        \n\n    src/configuration/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : UsersServiceApiKey\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            clientTest   (test/.../client.tester.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The application setup.\n\n\n                \n            \n        \n    \n    test/client.tester.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        clientTest\n                        \n                    \n                \n            \n            \n                \nclientTest(clientInjectionName: string, microserviceConfigName: string)\n                \n            \n\n\n\n\n            \n                \n                    A generic test for different clients and services: GRPC, TCP\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clientInjectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for the client.\n\n                                    \n                                \n                                \n                                    microserviceConfigName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for client configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT  -->\n\nConfigurationModule->InjectionNames.GRPC_PORT \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT  -->\n\nConfigurationModule->InjectionNames.REST_PORT \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT  -->\n\nConfigurationModule->InjectionNames.TCP_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A service that provides CRUD operations on users.\n        \n            License : MIT\n        \n            Author : Michael Diers\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The document type for users.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            GRPC_USERS_SERVICE_NAME   (src/.../grpc-users-client.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            USERS_SERVICE_PREFIX   (src/.../configuration.module.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The minimum length for display names.\n   */\n  DISPLAY_NAME_MIN_LENGTH: 3,\n\n  /**\n   * The maximum length for display names.\n   */\n  DISPLAY_NAME_MAX_LENGTH: 256,\n\n  /**\n   * The minimum length for emails.\n   */\n  EMAIL_MIN_LENGTH: 5,\n\n  /**\n   * The maximum length for emails.\n   */\n  EMAIL_MAX_LENGTH: 2048,\n\n  /**\n   * The minimum length for passwords.\n   */\n  PASSWORD_MIN_LENGTH: 8,\n\n  /**\n   * The maximum length for passwords.\n   */\n  PASSWORD_MAX_LENGTH: 4096,\n\n  /**\n   * The expected version for uuids.\n   */\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n            \n                \n                    Predefined validation constants.\n\n                \n            \n\n        \n    \n\n    src/clients/grpc-users-client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GRPC_USERS_SERVICE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GrpcUsersService'\n                    \n                \n\n            \n                \n                    The name of the grpc users service.\n\n                \n            \n\n        \n    \n\n    src/logging/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/configuration/configuration.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE_'\n                    \n                \n\n            \n                \n                    Prefix for environment variables.\n\n                \n            \n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The mongodb schema for users.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
