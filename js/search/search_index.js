var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiKeyDto.html",[0,0.131,1,2.189]],["body/classes/ApiKeyDto.html",[0,0.22,1,3.672,2,2.405,3,0.329,4,0.329,5,0.291,6,5.035,7,4.147,8,0.585,9,3.383,10,2.374,11,2.106,12,5.919,13,0.495,14,2.397,15,2.937,16,0.539,17,0.023,18,1.02,19,2.246,20,4.875,21,0.733,22,4.875,23,2.253,24,0.369,25,4.454,26,5.035,27,3.31,28,0.329,29,2.246,30,0.019,31,0.019]],["title/injectables/ApiKeyGrpcGuard.html",[32,0.649,33,2.016]],["body/injectables/ApiKeyGrpcGuard.html",[0,0.134,3,0.243,4,0.243,5,0.215,8,0.585,10,2.373,11,2.158,13,0.365,15,1.66,16,0.539,17,0.023,18,1.065,21,0.732,24,0.468,28,0.243,30,0.016,31,0.016,32,0.897,33,2.785,34,1.371,35,3.426,36,3.064,37,2.582,38,3.309,39,2.785,40,2.404,41,4.042,42,3.309,43,3.534,44,1.083,45,3.75,46,3.309,47,1.144,48,2.446,49,3.601,50,1.297,51,0.897,52,1.548,53,1.018,54,0.732,55,1.018,56,3.309,57,3.309,58,3.671,59,3.601,60,3.023,61,3.309,62,3.667,63,3.023,64,3.023,65,3.023,66,1.018,67,2.919,68,3.309,69,2.582,70,2.404,71,1.144,72,0.621,73,1.908,74,2.059,75,1.66,76,4.198,77,2.446,78,2.446,79,1.371,80,1.66,81,2.71,82,1.018,83,2.446,84,2.71,85,2.71,86,1.222,87,3.601,88,3.601,89,3.601,90,3.064,91,1.469,92,4.873,93,3.601,94,3.601,95,2.446,96,3.601]],["title/guards/ApiKeyGuard.html",[37,1.869,43,2.016]],["body/guards/ApiKeyGuard.html",[0,0.129,3,0.234,4,0.234,5,0.206,8,0.649,10,2.436,11,2.116,13,0.351,15,2.681,16,0.598,17,0.023,18,1.05,21,0.813,24,0.359,28,0.234,30,0.015,31,0.015,32,0.872,35,3.61,37,2.511,38,3.219,39,2.71,41,4.132,43,3.326,44,1.053,45,3.672,46,3.219,47,1.099,48,2.348,50,1.261,51,0.872,52,1.506,53,1.13,54,0.813,55,1.13,56,3.219,57,3.219,58,4,60,2.941,63,2.941,64,3.61,65,3.61,66,1.215,67,2.87,68,3.219,69,3.083,70,2.87,72,0.596,82,1.13,83,3.672,86,0.867,91,1.261,97,3.458,98,2.942,99,4.74,100,4.74,101,6.095,102,5.818,103,3.458,104,3.458,105,3.458,106,4.74,107,4.033,108,1.42,109,4.069,110,1.92,111,2.865,112,3.458,113,1.977,114,1.706,115,3.458,116,1.492,117,3.458,118,3.458]],["title/injectables/ApiKeyHttpGuard.html",[32,0.649,119,2.189]],["body/injectables/ApiKeyHttpGuard.html",[0,0.139,3,0.253,4,0.253,5,0.223,8,0.6,10,2.394,11,2.173,13,0.38,15,1.725,16,0.553,17,0.023,18,1.079,21,0.752,24,0.455,28,0.253,30,0.016,31,0.016,32,0.92,34,1.425,35,3.494,37,2.65,38,3.396,39,2.859,41,3.729,42,3.396,43,3.58,44,1.111,45,3.824,46,3.396,47,1.189,48,2.542,50,1.331,51,0.92,52,1.589,53,1.045,54,0.752,55,1.045,56,3.396,57,3.396,58,3.729,60,3.103,61,4.081,62,3.763,63,3.103,64,3.103,65,3.103,66,1.045,67,2.965,68,3.396,69,2.984,70,2.467,71,1.189,72,0.645,73,1.983,74,2.14,75,1.725,79,1.425,80,1.725,81,2.817,82,1.045,83,2.542,84,2.817,85,2.817,86,1.254,91,1.331,119,3.103,120,3.185,121,3.763,122,3.743,123,3.743,124,3.743,125,3.763,126,3.743,127,3.743]],["title/injectables/ApiKeyTcpGuard.html",[32,0.649,128,2.016]],["body/injectables/ApiKeyTcpGuard.html",[0,0.14,1,2.331,3,0.254,4,0.254,5,0.224,8,0.602,10,2.396,11,2.175,13,0.381,15,1.731,16,0.555,17,0.023,18,1.081,21,0.753,24,0.456,28,0.254,30,0.016,31,0.016,32,0.923,34,1.43,35,3.501,37,2.656,38,3.404,39,2.866,41,3.735,42,3.404,43,3.585,44,1.114,45,3.831,46,3.404,47,1.194,48,2.551,50,1.334,51,0.923,52,1.593,53,1.047,54,0.753,55,1.047,56,3.404,57,3.404,58,3.735,60,3.11,61,3.404,62,3.772,63,3.11,64,3.11,65,3.11,66,1.047,67,2.969,68,3.404,69,2.656,70,2.473,71,1.194,72,0.648,79,1.43,80,1.731,81,2.827,82,1.047,83,2.551,84,2.827,85,2.827,86,0.942,91,1.334,121,3.772,128,2.866,129,3.196,130,3.11,131,3.757,132,3.757,133,3.757,134,3.196,135,1.793,136,3.757,137,3.757,138,5.013]],["title/modules/AppModule.html",[139,1.056,140,2.395]],["body/modules/AppModule.html",[0,0.148,3,0.269,4,0.269,5,0.238,17,0.024,18,0.686,24,0.527,28,0.269,30,0.017,31,0.017,71,1.265,72,0.686,79,1.515,80,1.835,91,1.059,110,1.612,139,1.56,140,4.844,141,1.612,142,2.248,143,3.387,144,3.387,145,4.068,146,2.883,147,3.748,148,4.068,149,3.748,150,4.068,151,2.57,152,1.964,153,1.964,154,3.982,155,3.076,156,3.982,157,3.387,158,3.387,159,2.47,160,3.387,161,2.996,162,3.982,163,3.982,164,2.276,165,3.387,166,3.232,167,3.982,168,3.387,169,3.982,170,3.982,171,2.996,172,5.209,173,3.982,174,2.996]],["title/modules/ClientsModule.html",[139,1.056,145,2.189]],["body/modules/ClientsModule.html",[0,0.151,3,0.275,4,0.275,5,0.242,17,0.024,24,0.499,28,0.275,30,0.017,31,0.017,40,2.004,71,1.677,72,0.7,79,1.546,80,1.872,91,1.081,130,2.521,139,1.581,141,1.645,142,2.278,145,4.305,146,2.845,151,2.603,152,2.004,153,2.004,155,2.796,164,2.322,171,3.972,175,3.456,176,4.063,177,3.456,178,5.711,179,5.711,180,5.711,181,5.711,182,4.063,183,3.275,184,3.584,185,1.103,186,3.017,187,4.063,188,2.004,189,3.584,190,2.322,191,4.214,192,4.063,193,4.063,194,3.057,195,4.063,196,4.063,197,3.057,198,3.972]],["title/modules/ConfigurationModule.html",[139,1.056,146,1.522]],["body/modules/ConfigurationModule.html",[0,0.084,3,0.153,4,0.153,5,0.135,10,0.813,15,1.045,16,0.251,17,0.024,18,0.732,23,1.814,24,0.463,28,0.153,30,0.011,31,0.011,51,0.418,54,0.341,71,2.031,72,0.391,73,1.202,74,1.993,75,1.607,79,0.864,86,1.362,91,1.736,107,3.614,108,1.044,110,1.412,111,1.848,139,1.044,141,0.919,142,1.505,146,2.94,149,3.105,151,1.72,152,1.119,153,1.119,155,1.848,157,1.93,160,1.93,161,1.707,168,1.93,171,4.862,174,4.257,183,2.164,185,0.729,188,1.119,190,1.993,191,4.387,194,4.257,197,4.257,199,1.93,200,2.269,201,1.93,202,1.93,203,4.813,204,4.967,205,4.813,206,4.813,207,4.813,208,4.813,209,4.967,210,4.967,211,4.813,212,4.967,213,4.813,214,3.715,215,1.707,216,7.118,217,4.247,218,2.269,219,2.269,220,1.93,221,3.487,222,1.93,223,1.93,224,2.269,225,3.487,226,1.297,227,1.707,228,1.93,229,1.607,230,2.269,231,3.487,232,2.269,233,2.269,234,4.257,235,1.93,236,2.269,237,2.269,238,2.269,239,2.269,240,2.269,241,2.269,242,2.269,243,2.269,244,2.269,245,2.269,246,1.93,247,2.269,248,2.269,249,2.269,250,2.269,251,2.269,252,2.269,253,4.247,254,2.269,255,2.967,256,1.707,257,2.269,258,2.269,259,2.269,260,2.269,261,2.269,262,2.269,263,2.269,264,0.721,265,2.269,266,2.269,267,2.269,268,3.487,269,2.269,270,2.269,271,2.269,272,2.269]],["title/classes/CreateUserDto.html",[0,0.131,273,1.19]],["body/classes/CreateUserDto.html",[0,0.209,2,1.833,3,0.251,4,0.251,5,0.222,8,0.446,13,0.377,14,2.015,16,0.621,17,0.023,18,1.108,19,2.585,21,0.843,23,1.414,24,0.454,25,4.222,27,2.523,28,0.251,30,0.016,31,0.016,51,0.916,54,0.748,67,3.172,226,2.124,273,1.678,274,5.098,275,2.796,276,1.894,277,4.233,278,1.576,279,3.81,280,4.075,281,4.243,282,3.715,283,3.715,284,4.233,285,4.233,286,5.471,287,5.471,288,3.715,289,4.976,290,4.976,291,3.715,292,3.715,293,3.161,294,4.976,295,3.715,296,4.233,297,5.098,298,5.992,299,3.715,300,3.715,301,4.976,302,3.715,303,4.976,304,2.796,305,4.233,306,2.796,307,3.379,308,5.098,309,3.715,310,4.976,311,4.222,312,3.715,313,3.715,314,4.976,315,3.715,316,3.715,317,3.715,318,4.976,319,3.715]],["title/injectables/GrpcUsersClient.html",[32,0.649,184,2.395]],["body/injectables/GrpcUsersClient.html",[0,0.074,3,0.135,4,0.135,5,0.119,8,0.582,10,1.132,11,1.005,13,0.203,14,1.28,15,2.235,16,0.597,17,0.024,18,1.055,21,0.887,24,0.47,28,0.135,29,1.457,30,0.01,31,0.01,32,0.582,34,0.762,40,2.761,44,0.703,47,1.005,50,1.185,51,0.893,52,1.005,53,1.013,54,0.775,55,1.013,66,1.297,71,0.636,72,0.345,73,1.06,74,1.144,75,0.922,76,3.913,77,1.359,78,1.359,79,0.762,80,0.922,82,1.128,86,1.535,91,1.043,108,2.039,113,1.144,114,0.987,116,2.33,135,1.831,184,3.024,185,1.342,186,3.294,188,0.987,229,3.067,264,1.541,273,1.636,276,1.695,278,1.594,320,4.529,321,1.359,322,2.69,323,2.33,324,3.92,325,3.88,326,1.804,327,1.28,328,2.197,329,1.28,330,1.804,331,1.702,332,4.454,333,3.162,334,1.457,335,2.69,336,2.69,337,2.379,338,4.212,339,3.789,340,2.001,341,1.807,342,1.702,343,2.088,344,2.479,345,2.001,346,1.28,347,1.364,348,1.28,349,1.56,350,2.001,351,2.113,352,1.943,353,2.001,354,1.56,355,1.675,356,1.56,357,1.56,358,2.732,359,1.56,360,2.001,361,1.28,362,1.56,363,1.962,364,2.001,365,2.662,366,2.001,367,2.379,368,1.702,369,1.702,370,1.28,371,2.36,372,2.001,373,1.702,374,1.702,375,2.69,376,2.001,377,1.962,378,1.702,379,1.675,380,1.702,381,1.359,382,2.379,383,1.144,384,2.001,385,1.506,386,2.001,387,2.001,388,5.399,389,2.001,390,0.987,391,1.06,392,4.387,393,3.243,394,2.001,395,4.387,396,2.001,397,1.702,398,2.001,399,0.81,400,2.001,401,2.001,402,2.001,403,1.702]],["title/controllers/GrpcUsersService.html",[383,2.016,404,1.522]],["body/controllers/GrpcUsersService.html",[0,0.095,3,0.172,4,0.172,5,0.152,8,0.305,11,0.808,13,0.258,16,0.504,17,0.024,19,2.615,21,0.853,24,0.484,28,0.172,30,0.012,31,0.012,33,1.454,40,1.876,44,0.845,47,0.808,50,1.345,51,1.045,52,0.808,53,1.056,54,0.759,55,1.056,66,1.352,71,0.808,72,0.438,82,1.186,86,0.638,91,1.51,108,2.085,110,1.54,116,1.097,135,1.965,185,1.13,188,1.254,229,2.098,264,0.808,273,1.824,276,1.733,278,1.612,323,1.097,326,2.046,327,1.54,328,2.493,329,1.844,330,2.046,334,1.172,341,2.174,343,2.299,344,2.621,346,1.54,347,1.641,348,1.54,351,2.107,352,1.536,354,1.876,355,2.015,356,1.876,357,1.876,358,3.007,361,1.54,363,1.733,370,1.54,371,3.205,379,2.015,381,1.727,383,2.174,390,1.254,391,1.347,393,1.347,399,1.03,404,2.181,405,1.347,406,3.995,407,2.164,408,2.603,409,6.544,410,2.543,411,2.543,412,2.861,413,2.543,414,2.543,415,2.861,416,2.543,417,2.861,418,2.543,419,2.164,420,2.164,421,3.235,422,3.235,423,1.254,424,1.347,425,1.172,426,2.015,427,1.347,428,1.578,429,1.914,430,2.164,431,2.359,432,2.164,433,2.164,434,2.164,435,2.164,436,2.015,437,2.164,438,1.914,439,2.164,440,2.164,441,2.164,442,1.914,443,2.164,444,2.543,445,1.914,446,2.015,447,1.454,448,1.454,449,1.914,450,2.164,451,2.164,452,1.914,453,2.164,454,2.164,455,2.164,456,2.543,457,2.543]],["title/modules/GuardsModule.html",[139,1.056,147,2.016]],["body/modules/GuardsModule.html",[0,0.159,3,0.289,4,0.289,5,0.255,10,2.15,11,1.908,17,0.023,24,0.495,28,0.289,30,0.017,31,0.017,33,4.048,72,0.736,119,4.393,128,4.048,139,1.633,141,1.73,142,2.352,146,2.883,147,4.097,151,2.689,152,2.107,153,2.107,155,2.888,164,2.441,183,3.382,190,3.116,435,3.634,458,3.634,459,3.634,460,3.634,461,4.271,462,4.271,463,4.271,464,3.634]],["title/classes/GuidDto.html",[0,0.131,371,1.869]],["body/classes/GuidDto.html",[0,0.22,2,2.399,3,0.329,4,0.329,5,0.29,8,0.584,13,0.494,14,2.393,16,0.538,17,0.023,18,1.019,19,2.241,21,0.731,24,0.447,25,4.447,26,4.137,27,3.302,28,0.329,29,2.241,30,0.019,31,0.019,276,2.249,307,4.013,352,2.289,371,3.131,465,4.137,466,5.91,467,4.863,468,4.863,469,4.447,470,3.667,471,4.013,472,4.863]],["title/injectables/HashPipe.html",[32,0.649,436,1.869]],["body/injectables/HashPipe.html",[0,0.143,3,0.26,4,0.26,5,0.229,8,0.685,13,0.39,16,0.563,17,0.023,21,0.765,23,2.471,24,0.432,28,0.26,30,0.016,31,0.016,32,0.937,34,1.463,44,1.131,47,1.617,50,1.354,51,0.937,52,1.617,53,1.063,54,0.765,55,1.063,66,1.063,71,1.221,72,0.662,79,1.463,80,1.771,82,1.063,86,0.964,91,1.023,114,1.896,116,1.659,135,1.221,234,4.755,235,4.33,280,3.92,281,4.291,305,5.168,323,1.659,334,2.345,436,3.218,442,3.83,473,4.855,474,3.27,475,3.472,476,4.886,477,6.074,478,3.844,479,3.844,480,5.706,481,3.158,482,3.456,483,5.09,484,3.844,485,2.697,486,5.168,487,5.09,488,3.844,489,3.27,490,3.844,491,5.09,492,3.844,493,5.09,494,5.09,495,3.844]],["title/controllers/HealthController.html",[404,1.522,496,2.395]],["body/controllers/HealthController.html",[0,0.134,3,0.244,4,0.244,5,0.216,8,0.434,10,1.294,11,1.149,13,0.367,15,2.251,17,0.024,18,0.954,19,1.666,21,0.543,24,0.449,28,0.244,30,0.016,31,0.016,44,1.085,47,1.149,51,0.665,52,1.149,61,2.454,63,2.243,66,1.02,71,1.149,72,0.623,73,1.915,74,2.066,75,1.666,79,1.376,80,1.666,82,1.333,86,0.906,91,0.962,108,1.463,116,2.388,125,2.72,185,1.156,229,2.251,255,4.156,264,1.967,296,4.156,323,2.753,328,2.409,334,1.666,338,3.676,347,2.671,354,2.409,356,3.382,357,3.147,385,2.72,404,2.388,405,1.915,481,2.243,496,3.757,497,3.075,498,3.075,499,5.533,500,3.614,501,3.614,502,5.533,503,4.156,504,5.926,505,5.926,506,5.926,507,3.614,508,2.72,509,3.614,510,3.614,511,2.454,512,4.885,513,4.885,514,4.885,515,3.075,516,3.614,517,3.614,518,3.614,519,3.075,520,3.614,521,4.885,522,3.614,523,3.614,524,2.454,525,3.614,526,3.614]],["title/modules/HealthModule.html",[139,1.056,148,2.189]],["body/modules/HealthModule.html",[0,0.18,3,0.326,4,0.326,5,0.288,17,0.023,24,0.513,28,0.326,30,0.019,31,0.019,72,0.832,139,1.762,141,1.955,142,2.539,146,2.973,148,4.274,151,2.902,152,2.381,153,2.381,155,3.117,164,2.76,405,3.117,496,4.31,508,3.633,527,4.828,528,4.828,529,4.828,530,5.884,531,4.107,532,5.884,533,4.828]],["title/injectables/HttpExceptionInterceptor.html",[32,0.649,431,2.189]],["body/injectables/HttpExceptionInterceptor.html",[0,0.154,3,0.28,4,0.28,5,0.247,8,0.642,13,0.421,16,0.459,17,0.023,21,0.623,24,0.448,28,0.28,30,0.017,31,0.017,32,0.984,34,1.578,41,3.881,44,1.188,51,0.763,53,0.866,54,0.623,55,0.866,58,3.881,64,3.318,65,3.318,66,1.117,72,0.715,82,1.117,90,3.528,91,1.103,109,4.872,113,2.371,114,2.046,188,2.046,431,3.318,534,4.55,535,3.528,536,5.349,537,5.349,538,6.255,539,6.474,540,6.255,541,5.349,542,4.988,543,6.255,544,4.147,545,5.349,546,5.349,547,5.349,548,5.349,549,5.349,550,4.147,551,4.147,552,4.147,553,3.318,554,4.025,555,4.147]],["title/interfaces/IGrpcUsersService.html",[365,2.395,556,1.428]],["body/interfaces/IGrpcUsersService.html",[3,0.171,4,0.171,5,0.151,8,0.705,10,2.316,11,2.055,13,0.257,16,0.627,17,0.023,21,0.851,24,0.409,28,0.171,30,0.012,31,0.012,40,3.046,44,0.842,50,1.341,51,0.697,53,1.183,54,0.851,55,1.183,66,1.351,69,3.426,76,4.937,77,1.718,78,1.718,82,1.351,108,1.937,109,4.919,113,1.446,135,2.077,185,0.791,264,1.602,273,1.82,276,0.963,278,1.602,326,1.534,327,1.534,328,1.868,329,1.534,330,2.041,341,2.165,343,2.294,344,2.619,346,1.534,347,1.635,348,1.534,351,2.103,352,1.531,354,1.868,355,2.007,356,1.868,357,1.868,358,3.002,361,1.534,363,1.728,365,2.572,370,1.534,371,3.2,390,1.248,391,1.341,399,1.025,412,2.85,415,2.85,417,2.85,423,1.248,424,1.341,429,1.904,556,1.839,557,1.446,558,3.644,559,2.153,560,2.53,561,6.466,562,3.223,563,2.53,564,2.53,565,3.788,566,2.53,567,3.788,568,2.53,569,2.53]],["title/interfaces/ILoggingService.html",[556,1.428,570,2.189]],["body/interfaces/ILoggingService.html",[3,0.316,4,0.316,5,0.279,8,0.692,9,3.296,13,0.474,16,0.517,17,0.023,18,1.178,21,0.702,28,0.39,30,0.018,31,0.018,44,1.281,53,0.976,54,0.702,55,0.976,66,0.976,82,1.204,86,1.171,264,1.832,553,4.24,556,1.891,557,2.67,570,3.577,571,3.514,572,4.338,573,4.905,574,4.905,575,5.814,576,4.67,577,4.905,578,5.556,579,3.171,580,3.577,581,3.577]],["title/interfaces/IUsersClient.html",[377,2.189,556,1.428]],["body/interfaces/IUsersClient.html",[3,0.2,4,0.2,5,0.177,8,0.652,9,2.43,13,0.301,16,0.601,17,0.023,18,1.108,21,0.927,24,0.376,28,0.2,29,1.365,30,0.014,31,0.014,44,0.945,50,1.446,51,0.782,53,1.135,54,0.817,55,1.135,66,1.406,82,1.202,108,2.129,135,2.006,185,1.135,186,3.107,273,1.941,276,1.127,278,1.662,325,4.508,326,2.201,327,1.722,328,2.681,329,1.722,330,2.201,341,2.43,343,2.426,344,2.702,346,1.722,347,1.835,348,1.722,349,2.097,351,2.337,352,2.02,354,2.097,355,2.252,356,2.097,357,2.097,358,3.174,359,2.097,361,1.722,362,2.097,363,2.19,370,1.722,377,2.638,390,1.461,391,1.569,399,1.199,404,1.835,423,1.461,424,1.569,425,1.365,448,2.43,556,2.014,557,1.693,558,3.917,582,2.519,583,2.961,584,3.199,585,2.961,586,2.961,587,2.961,588,2.961,589,2.961,590,2.961]],["title/interfaces/IUsersDatabaseService.html",[556,1.428,591,2.189]],["body/interfaces/IUsersDatabaseService.html",[3,0.204,4,0.204,5,0.18,8,0.696,13,0.306,16,0.606,17,0.023,18,1.113,21,0.871,24,0.228,28,0.291,30,0.014,31,0.014,44,0.957,50,1.458,51,0.792,53,1.145,54,0.823,55,1.145,66,1.368,67,2.973,70,3.231,82,1.211,86,0.756,108,2.098,110,2.219,111,2.903,135,1.915,185,1.145,278,1.707,326,2.219,327,1.744,329,1.744,330,2.219,343,2.653,344,2.653,346,1.744,348,1.744,349,2.124,351,2.272,352,2.209,359,2.124,361,1.744,362,2.124,399,2.219,425,1.389,481,1.871,485,2.281,524,4.092,556,1.221,557,1.723,558,3.739,591,2.672,592,2.269,593,3.663,594,3.015,595,4.361,596,3.015,597,2.924,598,3.015,599,3.015,600,3.24,601,3.015,602,3.24,603,2.565,604,2.047,605,2.672]],["title/interfaces/IUsersService.html",[426,1.869,556,1.428]],["body/interfaces/IUsersService.html",[3,0.207,4,0.207,5,0.183,8,0.7,13,0.311,16,0.61,17,0.023,18,1.117,21,0.876,24,0.383,28,0.294,30,0.014,31,0.014,39,1.75,44,0.967,50,1.468,51,1.015,53,1.153,54,0.876,55,1.153,66,1.33,82,1.218,86,0.767,108,2.067,135,1.852,185,1.153,264,1.383,273,2.043,278,1.693,326,2.234,327,1.763,329,1.763,330,2.36,343,2.453,344,2.453,346,2.234,348,1.763,349,2.147,351,2.353,352,2.148,359,2.147,361,1.763,362,2.147,363,2.424,370,1.763,399,1.763,408,2.488,423,1.51,424,1.622,425,1.41,426,2.306,427,2.306,447,2.488,475,2.896,481,1.899,485,2.923,556,1.24,557,1.75,604,2.079,606,2.303,607,3.703,608,3.275,609,3.061,610,3.061,611,3.061,612,3.061,613,3.061,614,2.604,615,4.959,616,2.303,617,4.959,618,2.303,619,4.31,620,2.604]],["title/modules/LoggingModule.html",[139,1.056,149,2.016]],["body/modules/LoggingModule.html",[0,0.192,3,0.349,4,0.349,5,0.308,17,0.023,24,0.495,28,0.349,30,0.02,31,0.02,72,0.89,139,1.835,141,2.091,149,3.503,183,3.204,190,2.952,191,3.507,198,3.886,581,4.053,621,5.165,622,4.394,623,3.802,624,5.165]],["title/injectables/LoggingService.html",[32,0.649,623,2.189]],["body/injectables/LoggingService.html",[0,0.169,3,0.306,4,0.306,5,0.27,8,0.679,9,3.235,13,0.46,16,0.501,17,0.023,18,1.169,21,0.681,24,0.428,28,0.306,29,2.088,30,0.018,31,0.018,32,1.041,34,1.725,44,1.257,53,0.947,54,0.681,55,0.947,66,0.947,72,0.781,82,1.182,114,2.236,264,1.798,553,4.208,570,3.511,572,4.258,573,4.814,574,4.814,575,5.771,577,4.814,578,5.498,579,3.078,580,3.511,622,3.856,623,3.511,625,3.856,626,4.532,627,4.532,628,4.532]],["title/modules/PipesModule.html",[139,1.056,166,2.189]],["body/modules/PipesModule.html",[0,0.18,3,0.328,4,0.328,5,0.29,17,0.023,24,0.481,28,0.328,30,0.019,31,0.019,72,0.836,139,1.767,141,1.965,142,2.547,146,2.976,151,2.911,152,2.393,153,2.393,155,3.127,164,2.773,166,4.371,183,3.01,190,3.373,436,3.698,438,3.65,482,3.294,629,4.127,630,4.851,631,4.127,632,4.851]],["title/injectables/SecretManagerService.html",[32,0.649,214,2.189]],["body/injectables/SecretManagerService.html",[0,0.11,3,0.2,4,0.2,5,0.176,8,0.596,10,1.944,11,1.725,13,0.3,14,1.718,16,0.549,17,0.024,18,1.124,21,0.864,23,1.615,24,0.411,28,0.2,30,0.014,31,0.014,32,0.781,34,1.124,44,0.943,47,1.348,51,0.914,52,1.348,53,0.886,54,0.899,55,0.886,66,1.25,67,2.677,70,2.677,71,0.938,72,0.509,75,1.36,79,1.124,82,0.886,86,1.245,91,1.444,108,1.792,116,1.831,185,0.886,186,3.286,214,3.367,222,2.512,223,5.768,229,2.96,264,1.348,323,2.722,334,1.955,337,4.084,367,3.192,393,1.564,470,3.566,485,2.875,511,3.685,553,2.632,570,3.367,572,3.192,581,1.832,584,4.084,623,3.08,633,4.503,634,2.222,635,4.89,636,4.242,637,4.89,638,5.427,639,5.427,640,4.965,641,2.953,642,4.965,643,2.953,644,2.953,645,5.427,646,2.953,647,2.953,648,2.953,649,5.427,650,4.965,651,5.427,652,2.953,653,2.512,654,2.953,655,2.512,656,2.953,657,2.512,658,2.512,659,2.512,660,2.512,661,2.512,662,2.953,663,2.953,664,2.953,665,2.953,666,3.609,667,2.953,668,2.512,669,2.953,670,2.953,671,2.512,672,2.512,673,2.953,674,2.953]],["title/injectables/TcpUsersClient.html",[32,0.649,189,2.395]],["body/injectables/TcpUsersClient.html",[0,0.073,3,0.132,4,0.132,5,0.117,8,0.576,10,1.112,11,0.987,13,0.198,14,1.258,15,2.7,16,0.531,17,0.024,18,1.049,21,0.881,23,0.744,24,0.433,28,0.132,29,0.901,30,0.01,31,0.01,32,0.571,34,0.744,44,0.69,47,0.987,50,1.276,51,0.809,52,0.987,53,1.002,54,0.721,55,1.002,66,1.322,71,0.622,72,0.337,79,0.744,80,0.901,82,1.118,86,1.392,91,1.17,108,2.047,110,1.564,111,1.645,113,1.118,114,0.965,116,1.34,130,2.728,135,1.862,185,1.322,186,3.531,188,0.965,189,2.986,229,3.102,264,0.987,273,1.618,276,0.744,278,1.602,321,1.328,322,2.642,323,2.396,325,3.842,326,1.942,327,1.564,328,2.366,329,1.564,330,1.942,331,1.664,334,1.431,335,3.741,336,2.642,338,3.842,339,2.642,341,1.775,342,1.664,343,2.068,344,2.464,346,1.258,347,1.34,348,1.258,349,1.532,351,2.099,352,1.929,354,1.532,355,1.645,356,1.532,357,1.532,358,2.705,359,1.532,361,1.258,362,1.532,363,1.826,368,2.642,369,1.664,370,1.258,373,1.664,374,1.664,375,1.664,377,1.927,378,1.664,379,1.645,380,1.664,381,1.328,385,1.472,390,0.965,391,1.036,392,4.081,393,3.47,395,4.081,397,1.664,399,0.792,403,1.664,519,4.344,584,2.337,666,1.664,675,5.089,676,3.862,677,4.397,678,4.397,679,3.105,680,3.105,681,1.956,682,1.956,683,3.105,684,4.397,685,1.956,686,1.956,687,1.956,688,1.956,689,1.956,690,3.105,691,1.956,692,5.106,693,5.106,694,4.344,695,3.862,696,1.956,697,1.956]],["title/classes/UpdateUserDto.html",[0,0.131,363,1.343]],["body/classes/UpdateUserDto.html",[0,0.193,2,2.561,3,0.351,4,0.351,5,0.31,8,0.623,17,0.023,24,0.465,28,0.351,30,0.02,31,0.02,42,3.525,50,1.381,226,2.968,273,1.751,275,3.906,276,2.339,278,1.451,363,2.339,370,2.102,698,4.417,699,6.146,700,5.191,701,5.191]],["title/classes/User.html",[0,0.131,278,0.833]],["body/classes/User.html",[0,0.141,2,1.867,3,0.256,4,0.256,5,0.226,8,0.454,9,2.88,13,0.384,14,2.04,16,0.715,17,0.024,18,1.155,19,2.782,21,0.907,23,2.298,24,0.381,28,0.383,30,0.016,31,0.016,54,0.757,86,0.949,110,2.818,159,2.349,185,1.261,278,1.631,279,3.846,280,3.901,281,4.269,351,1.804,352,1.91,482,4.1,511,2.571,702,2.571,703,4.731,704,6.038,705,5.137,706,3.786,707,3.791,708,3.786,709,3.786,710,4.287,711,3.786,712,6.287,713,3.786,714,4.262,715,2.849,716,2.849,717,6.038,718,2.571,719,3.221]],["title/classes/User-1.html",[0,0.11,95,2.003,278,0.697]],["body/classes/User-1.html",[0,0.172,2,1.646,3,0.226,4,0.226,5,0.199,8,0.747,9,2.644,13,0.339,14,1.873,16,0.666,17,0.024,18,1.122,19,2.64,21,0.904,23,2.181,24,0.456,28,0.226,30,0.015,31,0.015,47,1.06,51,0.851,52,1.47,53,0.697,54,0.904,55,0.697,82,0.697,86,0.837,135,1.821,226,1.908,273,1.933,278,1.686,279,3.604,280,3.734,281,4.087,284,3.935,285,3.935,293,3.935,306,2.511,308,4.515,311,3.48,334,2.131,351,2.052,352,1.79,370,1.351,423,1.646,469,2.511,475,2.644,482,3.891,579,2.266,705,4.875,707,4.312,710,3.935,720,2.839,721,4.625,722,4.625,723,5.297,724,3.337,725,4.625,726,3.337,727,6.018,728,3.337,729,4.625,730,4.625,731,4.625,732,4.625,733,4.625,734,3.337,735,3.337,736,4.625,737,2.511,738,3.337,739,3.337,740,3.337,741,3.337,742,3.337,743,3.337,744,3.337,745,3.337]],["title/classes/UserListDto.html",[0,0.131,379,1.869]],["body/classes/UserListDto.html",[0,0.184,2,2.446,3,0.335,4,0.335,5,0.296,8,0.595,13,0.503,14,2.422,16,0.549,17,0.023,21,0.745,24,0.375,28,0.335,29,2.285,30,0.019,31,0.019,185,1.425,276,2.276,278,1.611,347,2.581,379,3.169,425,2.285,597,4.061,746,5.088,747,4.219,748,5.981,749,4.96,750,5.981]],["title/injectables/UsersDatabaseService.html",[32,0.649,751,2.395]],["body/injectables/UsersDatabaseService.html",[0,0.087,3,0.158,4,0.158,5,0.14,8,0.66,13,0.238,16,0.577,17,0.024,18,1.042,21,0.827,24,0.416,28,0.158,30,0.011,31,0.011,32,0.658,34,0.892,44,0.794,47,1.136,50,1.464,51,1.112,52,1.136,53,1.09,54,0.784,55,1.09,66,1.288,67,2.714,70,3.042,72,0.404,82,1.149,86,1.309,91,1.464,95,2.427,108,2.031,110,1.963,111,2.569,114,1.156,135,1.748,159,1.454,185,1.149,229,3.024,278,1.669,323,1.011,326,1.963,327,1.448,329,1.448,330,1.963,343,2.497,344,2.575,346,1.448,348,1.448,349,1.763,351,2.113,352,2.17,359,1.763,361,1.448,362,1.763,393,2.766,399,1.963,425,1.08,448,2.043,485,1.894,524,4.006,554,3.261,591,2.218,593,3.041,595,3.928,597,2.427,600,2.69,602,2.69,616,2.69,668,3.041,671,3.041,672,4.125,714,3.261,715,1.763,716,1.763,723,1.994,737,1.763,751,3.292,752,4.868,753,1.994,754,2.343,755,5.501,756,2.343,757,4.333,758,4.848,759,2.343,760,2.343,761,2.343,762,2.343,763,2.343,764,2.343,765,1.763,766,1.763,767,2.343,768,2.343,769,2.343,770,4.333,771,3.575,772,3.575,773,3.575,774,3.575,775,2.343,776,2.343,777,2.343,778,2.343,779,3.575,780,2.343,781,2.343,782,3.575,783,2.343,784,2.343,785,2.343]],["title/controllers/UsersHttpController.html",[404,1.522,786,2.395]],["body/controllers/UsersHttpController.html",[0,0.063,3,0.114,4,0.114,5,0.101,8,0.852,13,0.171,16,0.619,17,0.023,18,0.937,19,2.201,21,0.718,24,0.381,28,0.114,30,0.009,31,0.009,44,0.613,47,0.537,50,1.271,51,1.03,52,0.537,53,0.844,54,0.757,55,0.844,60,1.711,66,1.197,69,2.785,71,0.537,72,0.291,73,0.895,74,0.965,75,0.778,82,1.053,91,1.184,108,1.923,116,0.729,135,1.857,185,1.136,226,0.965,246,2.347,264,1.111,273,1.7,276,1.05,278,1.665,279,2.742,280,2.505,311,3.594,323,0.729,326,1.635,327,1.416,328,1.992,329,1.416,330,2.041,334,0.778,337,4.21,343,1.934,344,2.266,346,1.117,347,1.19,348,1.117,349,0.833,351,2.331,352,2.064,354,1.992,355,2.139,356,1.992,357,1.725,358,2.358,359,0.833,361,1.802,362,0.833,363,2.07,370,1.117,390,1.361,391,1.461,399,1.802,404,1.509,405,0.895,406,3.422,408,1.999,423,0.833,424,0.895,425,0.778,426,1.461,427,0.895,428,1.048,445,1.27,446,1.461,447,0.965,448,0.965,449,1.27,452,1.27,470,2.17,471,2.375,475,3.005,485,2.139,498,1.436,503,5.462,542,1.27,580,1.711,595,2.076,597,1.873,600,1.27,602,2.076,608,1.27,618,3.038,786,1.873,787,1.436,788,1.688,789,4.038,790,2.758,791,2.758,792,5.595,793,4.038,794,5.257,795,4.038,796,4.038,797,1.688,798,1.688,799,1.688,800,5.595,801,2.758,802,1.688,803,4.776,804,1.688,805,1.688,806,4.776,807,3.497,808,4.776,809,4.776,810,4.776,811,4.776,812,4.776,813,5.04,814,2.758,815,4.776,816,1.688,817,1.688,818,1.688,819,2.758,820,1.688,821,1.688,822,1.688,823,1.688,824,1.688,825,1.688,826,1.688,827,1.688,828,2.758,829,1.688,830,4.038,831,1.688,832,5.04,833,4.038,834,6.466,835,1.688,836,1.688,837,1.688,838,1.688,839,4.038,840,1.688,841,1.688,842,1.688,843,3.497,844,1.688,845,1.688,846,1.688,847,1.688,848,1.688,849,1.688,850,1.436,851,1.436,852,1.436,853,1.436,854,1.436,855,1.146]],["title/modules/UsersModule.html",[139,1.056,150,2.189]],["body/modules/UsersModule.html",[0,0.152,3,0.277,4,0.277,5,0.244,17,0.024,24,0.533,28,0.277,30,0.017,31,0.017,54,0.616,72,0.706,139,1.589,141,1.659,142,2.29,146,2.851,147,3.777,150,4.229,151,2.617,152,2.02,153,2.02,155,2.811,158,3.485,159,2.541,164,2.341,165,3.485,185,0.856,190,2.341,191,3.603,198,3.993,278,0.967,383,3.364,405,2.811,427,2.811,428,2.541,446,2.811,605,3.292,703,3.082,718,3.603,737,3.082,751,3.603,765,3.082,766,3.082,786,3.997,856,4.096,857,4.096,858,4.096,859,3.997,860,4.096,861,5.886,862,4.096,863,4.096,864,4.096,865,4.096,866,4.096,867,4.096]],["title/injectables/UsersService.html",[32,0.649,446,1.869]],["body/injectables/UsersService.html",[0,0.091,3,0.166,4,0.166,5,0.146,8,0.672,13,0.249,16,0.589,17,0.024,18,1.055,21,0.841,23,1.889,24,0.424,28,0.166,30,0.012,31,0.012,32,0.681,34,0.934,39,1.402,44,0.822,47,1.176,50,1.32,51,1.182,52,1.176,53,1.113,54,0.8,55,1.113,66,1.25,71,0.779,72,0.423,82,1.17,86,1.404,91,1.186,108,1.997,110,0.993,111,1.961,114,1.21,116,1.058,135,1.847,185,1.037,229,2.96,264,1.577,273,1.888,278,1.663,323,1.058,326,2.01,327,1.499,329,1.499,330,2.157,343,2.267,344,2.7,346,2.01,348,1.499,349,1.825,351,2.234,352,2.018,359,1.825,361,1.499,362,1.825,363,2.277,367,2.784,370,1.499,393,2.629,399,1.499,408,2.115,423,1.21,424,1.3,425,1.13,426,1.961,428,1.522,446,2.629,447,2.115,475,2.547,485,2.629,524,2.513,554,4.007,591,3.079,605,1.522,607,3.148,608,2.784,615,4.531,616,3.353,617,4.531,618,1.846,619,4.945,620,3.791,765,1.846,766,1.846,868,2.087,869,2.453,870,2.453,871,3.7,872,4.456,873,2.453,874,2.453,875,2.453,876,2.453,877,2.453,878,2.453,879,2.453,880,2.453,881,2.453,882,2.453,883,4.456,884,2.453,885,2.453,886,2.453,887,2.453]],["title/controllers/UsersTcpController.html",[404,1.522,859,2.395]],["body/controllers/UsersTcpController.html",[0,0.089,1,3.686,3,0.162,4,0.162,5,0.143,8,0.288,11,0.762,13,0.243,16,0.265,17,0.024,19,2.557,21,0.834,24,0.484,28,0.162,30,0.012,31,0.012,44,0.808,47,0.762,50,1.477,51,0.97,52,0.762,53,1.101,54,0.792,55,1.101,66,1.335,71,0.762,72,0.413,82,1.159,86,0.601,91,1.403,108,2.055,110,1.473,116,1.034,128,1.37,130,2.256,134,2.039,135,1.971,185,1.101,188,1.182,229,2.025,264,0.762,273,1.482,276,1.672,278,1.598,323,1.034,326,1.986,327,1.986,328,2.738,329,2.135,330,2.247,334,1.104,341,2.079,343,2.247,344,2.588,346,1.473,347,1.569,348,1.473,351,2.065,352,1.482,354,1.794,355,1.927,356,1.794,357,1.794,358,3.055,361,1.473,363,1.672,370,1.473,371,2.599,379,1.927,381,1.628,390,1.182,391,1.27,393,1.27,399,0.971,404,2.117,405,1.27,406,3.916,408,2.512,412,2.736,415,2.736,417,2.736,419,2.039,420,2.039,421,3.094,422,3.094,423,1.182,424,1.27,425,1.104,426,1.927,427,1.27,428,1.487,429,1.804,430,2.039,431,2.256,432,2.039,433,2.039,434,2.039,436,1.927,437,2.039,438,1.804,439,2.039,440,2.039,441,2.039,442,1.804,443,2.039,445,1.804,446,1.927,447,1.37,448,1.37,449,1.804,450,2.039,451,2.039,452,1.804,453,2.039,454,2.039,455,2.039,464,2.039,542,2.736,562,3.094,580,2.256,694,4.722,850,3.094,851,3.094,852,3.094,853,3.094,854,3.094,855,1.628,859,2.469,888,2.039,889,5.55,890,2.397,891,2.397,892,2.397,893,2.397,894,2.397,895,2.397,896,5.766,897,2.397,898,2.397,899,2.397,900,2.397]],["title/coverage.html",[901,4.087]],["body/coverage.html",[0,0.233,1,1.941,5,0.187,6,2.661,7,2.661,11,1.629,16,0.346,17,0.023,30,0.014,31,0.014,32,1.229,33,1.788,35,3.456,36,2.661,37,1.657,40,1.543,43,1.788,51,0.576,98,2.661,119,1.941,120,2.661,128,1.788,129,2.661,184,2.124,185,1.071,189,2.124,214,1.941,215,2.354,227,2.354,273,1.055,274,2.661,275,3.326,278,1.044,307,2.124,320,3.326,321,3.481,363,1.191,365,2.124,371,1.657,377,1.941,379,1.657,382,2.354,383,1.788,404,2.404,406,3.481,407,2.661,426,1.657,427,1.657,431,1.941,436,1.657,446,1.657,465,2.661,473,2.661,474,2.661,496,2.124,497,2.661,515,2.661,534,2.661,535,2.661,556,2.38,558,3.456,559,2.661,570,1.941,571,3.326,581,1.941,582,2.661,591,1.941,592,3.326,605,1.941,606,3.326,623,1.941,625,2.661,633,2.354,634,2.354,675,2.661,698,2.661,702,3.002,718,2.124,720,2.661,746,2.661,747,2.661,751,2.124,752,2.661,753,2.661,786,2.124,787,2.661,855,4.142,859,2.124,868,2.661,888,2.661,901,2.661,902,3.128,903,3.128,904,7.275,905,4.42,906,6.27,907,6.795,908,3.128,909,3.128,910,5.571,911,5.571,912,4.42,913,6.27,914,2.661,915,2.661,916,2.661,917,6.1,918,3.128,919,3.128,920,2.661,921,2.661,922,4.739,923,4.739,924,2.661,925,2.661,926,2.661,927,2.661,928,3.128,929,3.128]],["title/dependencies.html",[142,1.83,256,2.22]],["body/dependencies.html",[0,0.212,17,0.024,27,3.106,30,0.018,31,0.018,72,0.788,76,3.106,77,3.106,78,3.106,113,2.615,142,1.974,159,2.838,161,3.442,188,2.256,226,2.615,306,3.442,469,3.442,489,3.891,508,3.442,531,3.891,635,3.891,637,3.891,653,3.891,715,3.442,930,4.574,931,4.574,932,4.574,933,4.574,934,4.574,935,4.574,936,4.574,937,4.574,938,6.483,939,4.574,940,4.574,941,4.574,942,4.574,943,4.574,944,4.574,945,4.574,946,4.574,947,4.574,948,4.574,949,4.574,950,4.574,951,4.574,952,4.574,953,4.574,954,4.574,955,4.574,956,4.574,957,4.574,958,4.574,959,4.574,960,4.574,961,4.574,962,4.574,963,4.574,964,4.574]],["title/miscellaneous/enumerations.html",[965,1.455,966,3.607]],["body/miscellaneous/enumerations.html",[10,1.393,11,1.236,13,0.395,17,0.023,23,2.785,30,0.016,31,0.016,69,2.06,73,2.718,75,2.645,79,1.952,125,2.926,220,4.364,633,2.926,634,3.859,655,3.308,657,4.364,658,5.192,659,3.308,660,5.396,661,3.308,965,1.918,966,3.308,967,3.889,968,6.102,969,3.889,970,3.889,971,3.889,972,3.889,973,3.889,974,2.926,975,5.739,976,3.889,977,5.739,978,3.889,979,5.739,980,3.889,981,3.889,982,5.739,983,3.889,984,5.739,985,3.889,986,5.739,987,3.889,988,6.102,989,6.102,990,5.129,991,3.889,992,3.889,993,3.889,994,3.889,995,5.129,996,5.129,997,5.129,998,5.129,999,5.129,1000,5.129,1001,5.129,1002,5.129]],["title/miscellaneous/functions.html",[965,1.455,1003,3.607]],["body/miscellaneous/functions.html",[8,0.712,13,0.367,16,0.722,17,0.022,18,1.216,23,1.861,29,2.254,30,0.016,31,0.016,40,1.786,50,0.964,51,0.666,53,1.294,54,1.011,55,1.294,66,1.239,70,1.786,108,1.085,110,1.466,111,2.591,121,2.725,130,2.247,135,1.151,186,2.796,234,4.803,276,2.429,277,3.081,286,4.161,287,4.161,297,4.711,304,4.66,347,1.563,390,1.786,475,2.796,476,3.68,486,3.081,553,3.679,579,2.459,580,3.034,604,3.321,855,3.321,914,3.081,915,4.711,920,3.081,921,4.161,922,3.081,923,5.269,924,4.161,925,4.161,926,4.161,927,4.161,965,1.786,1003,3.081,1004,3.621,1005,3.621,1006,5.93,1007,3.621,1008,3.621,1009,4.891,1010,3.621,1011,5.93,1012,3.621,1013,3.621,1014,3.621,1015,3.621,1016,3.621,1017,5.538,1018,3.621,1019,3.621,1020,3.621,1021,6.382,1022,4.891,1023,4.711,1024,5.93,1025,4.161,1026,3.621,1027,3.621,1028,6.193,1029,4.891,1030,3.621,1031,3.621,1032,3.621,1033,3.621,1034,3.621]],["title/index.html",[13,0.358,1035,3.001]],["body/index.html",[2,1.627,17,0.023,30,0.015,31,0.015,33,3.638,34,1.255,37,1.748,95,2.24,119,3.949,128,3.638,140,4.685,141,1.336,142,1.98,143,2.806,144,2.806,145,4.089,146,3.097,147,3.966,148,3.718,149,3.259,150,3.949,151,2.263,152,1.627,153,1.627,166,3.849,174,4.291,175,2.806,177,2.806,178,4.851,179,4.851,180,4.851,181,4.851,194,4.291,197,4.291,199,2.806,201,2.806,202,2.806,203,4.851,204,4.851,205,4.851,206,4.851,207,4.851,208,4.851,209,4.851,210,4.851,211,4.851,212,4.851,213,4.851,214,3.273,405,1.748,436,2.795,458,2.806,459,2.806,460,2.806,471,2.24,557,1.886,629,2.806,631,2.806,1035,2.806,1036,2.806,1037,3.298,1038,3.298,1039,2.806]],["title/modules.html",[141,1.946]],["body/modules.html",[17,0.019,30,0.019,31,0.019,140,3.471,141,2.07,145,3.172,146,2.206,147,2.922,148,3.172,149,2.922,150,3.172,166,3.172,1040,7.054,1041,7.054,1042,7.054,1043,7.11,1044,5.112,1045,5.112]],["title/properties.html",[14,1.717,256,2.22]],["body/properties.html",[8,0.65,14,2.193,17,0.023,30,0.02,31,0.02,185,1.132,264,1.721,408,3.096,447,3.096,448,3.096,470,3.361,1046,5.416,1047,5.416,1048,5.416,1049,5.416,1050,5.416,1051,5.416]],["title/miscellaneous/typealiases.html",[965,1.455,1052,4.24]],["body/miscellaneous/typealiases.html",[13,0.56,16,0.705,17,0.02,30,0.02,31,0.02,185,1.153,702,3.749,714,4.155,716,4.794,965,2.723,1053,5.521,1054,4.697]],["title/miscellaneous/variables.html",[965,1.455,974,3.19]],["body/miscellaneous/variables.html",[13,0.395,16,0.721,17,0.023,18,1.093,23,2.528,29,3.061,30,0.016,31,0.016,40,1.918,54,0.771,75,2.363,185,1.275,215,2.926,227,3.859,228,3.308,264,1.236,304,4.902,307,3.897,320,2.926,321,3.483,382,3.859,383,2.223,427,3.041,470,2.413,471,2.641,476,2.926,481,3.561,511,2.641,558,2.413,571,2.926,581,3.561,592,3.859,603,4.364,604,3.897,605,3.561,606,2.926,614,3.308,702,2.641,703,2.926,707,3.859,718,3.483,719,3.308,916,3.308,965,1.918,974,2.926,1023,3.308,1025,3.308,1036,3.308,1039,3.308,1054,3.308,1055,3.889,1056,3.889,1057,3.889,1058,3.889,1059,3.889,1060,3.889,1061,5.739,1062,3.889,1063,3.889,1064,5.739,1065,3.889,1066,3.889,1067,5.129,1068,3.889,1069,3.889,1070,3.889,1071,5.129,1072,3.889,1073,3.889,1074,3.889,1075,3.889,1076,3.889,1077,3.889,1078,3.889]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["0.0.0.0",{"_index":272,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.0.0.0:${port",{"_index":261,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.1.0",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":95,"title":{"classes/User-1.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/UsersDatabaseService.html":{},"index.html":{}}}],["1.0.0",{"_index":1046,"title":{},"body":{"properties.html":{}}}],["1.1.19",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1037,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":774,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["2.2.0",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":800,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["201",{"_index":790,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["2048",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":730,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":812,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4",{"_index":471,"title":{},"body":{"classes/GuidDto.html":{},"controllers/UsersHttpController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":794,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4027",{"_index":731,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":792,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["404",{"_index":815,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["409",{"_index":796,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4096",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":810,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["5",{"_index":1039,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["6.1.2",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1038,"title":{},"body":{"index.html":{}}}],["7.2.0",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1036,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":809,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["ab9d",{"_index":811,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["abstract",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["access",{"_index":337,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{}}}],["accessing",{"_index":367,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["addapikey",{"_index":267,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["address",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/HealthController.html":{}}}],["addtag('users",{"_index":266,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["aliases",{"_index":1053,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":618,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":10,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":658,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["apikeydto",{"_index":1,"title":{"classes/ApiKeyDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apikeydto).apikey",{"_index":138,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["apikeygrpcguard",{"_index":33,"title":{"injectables/ApiKeyGrpcGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeyguard",{"_index":43,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["apikeyhttpguard",{"_index":119,"title":{"injectables/ApiKeyHttpGuard.html":{}},"body":{"injectables/ApiKeyHttpGuard.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeys",{"_index":92,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys.length",{"_index":94,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys[0].tostring",{"_index":96,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeytcpguard",{"_index":128,"title":{"injectables/ApiKeyTcpGuard.html":{}},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["apioperation",{"_index":832,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiparam",{"_index":833,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiproperty",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":834,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity",{"_index":835,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":836,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["application",{"_index":347,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":140,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":89,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["args",{"_index":137,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["array",{"_index":348,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["async",{"_index":229,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["author",{"_index":1049,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1045,"title":{},"body":{"modules.html":{}}}],["await",{"_index":393,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ba47",{"_index":732,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":620,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["based",{"_index":510,"title":{},"body":{"controllers/HealthController.html":{}}}],["bcrypt",{"_index":489,"title":{},"body":{"injectables/HashPipe.html":{},"dependencies.html":{}}}],["body",{"_index":828,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{}}}],["bootstrap",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1043,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1040,"title":{},"body":{"modules.html":{}}}],["build",{"_index":269,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["call",{"_index":547,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":543,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":101,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["canactivate(context",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["catch",{"_index":671,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["catcherror",{"_index":550,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":552,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":729,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":806,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["check",{"_index":357,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["check.'})@apiresponse({status",{"_index":818,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["checking",{"_index":499,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks",{"_index":502,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":0,"title":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":186,"title":{},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/functions.html":{}}}],["client.getservice",{"_index":387,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.interface",{"_index":378,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.interface.ts",{"_index":582,"title":{},"body":{"interfaces/IUsersClient.html":{},"coverage.html":{}}}],["client.interface.ts:14",{"_index":585,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:20",{"_index":586,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:27",{"_index":587,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:35",{"_index":590,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:42",{"_index":589,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:48",{"_index":588,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:53",{"_index":583,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.ts",{"_index":321,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.ts:104",{"_index":360,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:105",{"_index":688,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:116",{"_index":353,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:117",{"_index":687,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:124",{"_index":340,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:127",{"_index":681,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:135",{"_index":682,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:19",{"_index":679,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:28",{"_index":366,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:33",{"_index":333,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:37",{"_index":685,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:57",{"_index":342,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.ts:66",{"_index":345,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:71",{"_index":686,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:77",{"_index":350,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:86",{"_index":689,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:90",{"_index":364,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client_grpc_proxy",{"_index":997,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["client_tcp_proxy",{"_index":998,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clientgrpcproxy",{"_index":332,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientinjectionname",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clientproxy",{"_index":678,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["clientproxyfactory",{"_index":187,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(grpcconfig",{"_index":193,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(tcpconfig",{"_index":196,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clients",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clients/clients.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["clientservice",{"_index":324,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientsmodule",{"_index":145,"title":{"modules/ClientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"index.html":{},"modules.html":{}}}],["clienttest",{"_index":921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["clienttest(clientinjectionname",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":325,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["cloud",{"_index":636,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":653,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["cls",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_clientsmodule",{"_index":175,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_exports",{"_index":177,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_imports",{"_index":176,"title":{},"body":{"modules/ClientsModule.html":{}}}],["cluster_configurationmodule",{"_index":199,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_exports",{"_index":201,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_imports",{"_index":200,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["cluster_configurationmodule_providers",{"_index":202,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_guardsmodule",{"_index":458,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_exports",{"_index":459,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_imports",{"_index":461,"title":{},"body":{"modules/GuardsModule.html":{}}}],["cluster_guardsmodule_providers",{"_index":460,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_healthmodule",{"_index":527,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_imports",{"_index":528,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_pipesmodule",{"_index":629,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_pipesmodule_imports",{"_index":630,"title":{},"body":{"modules/PipesModule.html":{}}}],["cluster_pipesmodule_providers",{"_index":631,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":856,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":857,"title":{},"body":{"modules/UsersModule.html":{}}}],["cmd",{"_index":694,"title":{},"body":{"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["compodoc/compodoc",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":216,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.get(`${users_service_prefix}${injectionnames.secrets_from_env",{"_index":239,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.get(`${users_service_prefix}${injectionnames.use_swagger",{"_index":250,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.api_key",{"_index":230,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.connection_string",{"_index":232,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.hash_rounds",{"_index":236,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.health_check_documentation_address",{"_index":249,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.health_check_rest_address}_post",{"_index":247,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.health_check_rest_address}_pre",{"_index":245,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(`${users_service_prefix}${injectionnames.project_name",{"_index":238,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configuration",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration/configuration.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["configuration/injectionnames.enum",{"_index":80,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["configurationmodule",{"_index":146,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["configured",{"_index":336,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["conflictexception",{"_index":616,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":677,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connected",{"_index":684,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connection",{"_index":584,"title":{},"body":{"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["connection_string",{"_index":660,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(message",{"_index":627,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":628,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":86,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constants",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_min_length",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_min_length",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":47,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constructor(@inject(injectionnames.api_key",{"_index":84,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(client",{"_index":331,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["constructor(databaseservice",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(hashrounds",{"_index":478,"title":{},"body":{"injectables/HashPipe.html":{}}}],["constructor(loggingservice",{"_index":641,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["constructor(serviceapikey",{"_index":48,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(user",{"_index":722,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":754,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":390,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":41,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.getargs().find((args",{"_index":136,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["controller",{"_index":404,"title":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["controller('health",{"_index":509,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('users",{"_index":837,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["controller.interface",{"_index":376,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["controller.interface.ts",{"_index":559,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["controller.interface.ts:17",{"_index":560,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:24",{"_index":563,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:32",{"_index":564,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:41",{"_index":569,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:49",{"_index":568,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:57",{"_index":566,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controllers",{"_index":405,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"index.html":{}}}],["controllers/users",{"_index":861,"title":{},"body":{"modules/UsersModule.html":{}}}],["coverage",{"_index":901,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":50,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["create(@body",{"_index":840,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["create(createuserdto",{"_index":608,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":341,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["create(user",{"_index":593,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":595,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["creates",{"_index":334,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["createuserdto",{"_index":273,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["creating",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":408,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["current",{"_index":64,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["data",{"_index":135,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":781,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":491,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":494,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":524,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":766,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":592,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":594,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":596,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":598,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":601,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:47",{"_index":599,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":863,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":753,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:12",{"_index":756,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:28",{"_index":759,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:46",{"_index":760,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:57",{"_index":761,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:70",{"_index":763,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:88",{"_index":762,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":737,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaultvalue",{"_index":695,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete",{"_index":361,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete(':guid",{"_index":847,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":821,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["deleted",{"_index":600,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["deleted.'})@apiresponse({status",{"_index":822,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["depedency",{"_index":614,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":142,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":603,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":9,"title":{},"body":{"classes/ApiKeyDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["diers",{"_index":1051,"title":{},"body":{"properties.html":{}}}],["different",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":851,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["display",{"_index":707,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["display_name_max_length",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["documenation",{"_index":525,"title":{},"body":{"controllers/HealthController.html":{}}}],["document",{"_index":714,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["document.save",{"_index":769,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":515,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["documentbuilder",{"_index":225,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["documents",{"_index":775,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":777,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["dto",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":451,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/api",{"_index":897,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["dto/create",{"_index":423,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/guid.dto",{"_index":429,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/update",{"_index":424,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/user",{"_index":430,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ef3aa7fd1bc5",{"_index":733,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":808,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["email",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["email_max_length",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emails",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":358,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["entities/user.entity",{"_index":425,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["entity",{"_index":721,"title":{},"body":{"classes/User-1.html":{}}}],["enum",{"_index":656,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":966,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":221,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["environment",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["envnames",{"_index":220,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/enumerations.html":{}}}],["err",{"_index":672,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["err.code",{"_index":773,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.name",{"_index":771,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":674,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":553,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":850,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["eslint/no",{"_index":854,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["establish",{"_index":683,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["example",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["exception.interceptor",{"_index":433,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exception.interceptor.ts",{"_index":535,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":544,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":727,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":779,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execute",{"_index":354,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["execution",{"_index":65,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":58,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":602,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["exists",{"_index":485,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exports",{"_index":183,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{}}}],["express",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/UpdateUserDto.html":{}}}],["factory",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fails",{"_index":1032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":111,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":442,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["find",{"_index":346,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["find((arg",{"_index":88,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["findall",{"_index":326,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findall(data",{"_index":562,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone",{"_index":327,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(data",{"_index":412,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(guid",{"_index":349,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["firstvaluefrom",{"_index":368,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["firstvaluefrom(response",{"_index":395,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["forbidden",{"_index":803,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":793,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found",{"_index":813,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found.'})@apiresponse({status",{"_index":826,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["function",{"_index":855,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1003,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":842,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get(':guid')@apioperation({description",{"_index":805,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check",{"_index":849,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check')@apioperation({description",{"_index":817,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@apioperation({description",{"_index":798,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@healthcheck",{"_index":500,"title":{},"body":{"controllers/HealthController.html":{}}}],["getapikey",{"_index":638,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getargs",{"_index":87,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["getconnectionstring",{"_index":639,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gets",{"_index":645,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":640,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":647,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gh",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":475,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":635,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":1044,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":40,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["grpc.controller",{"_index":864,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":407,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:100",{"_index":414,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:49",{"_index":410,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":411,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":413,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":418,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":416,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard",{"_index":435,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{}}}],["grpc.guard.ts",{"_index":36,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"coverage.html":{}}}],["grpc.guard.ts:11",{"_index":49,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:25",{"_index":59,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc/grpc",{"_index":77,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["grpc_config",{"_index":1000,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_port",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_client",{"_index":996,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_service_name",{"_index":382,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grpcconfig",{"_index":192,"title":{},"body":{"modules/ClientsModule.html":{}}}],["grpcmethod",{"_index":409,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersclient",{"_index":184,"title":{"injectables/GrpcUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"coverage.html":{}}}],["grpcusersservice",{"_index":383,"title":{"controllers/GrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guard",{"_index":37,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":97,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["guards/api",{"_index":434,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guards/guards.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["guardsmodule",{"_index":147,"title":{"modules/GuardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuardsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["guid",{"_index":352,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guiddto",{"_index":371,"title":{"classes/GuidDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["handler",{"_index":548,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":482,"title":{},"body":{"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":477,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":436,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["hashrounds",{"_index":480,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":488,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":492,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":495,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":74,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["headernames",{"_index":73,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["headernames.x_api_key",{"_index":268,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["headers",{"_index":125,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"controllers/HealthController.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":127,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["health",{"_index":356,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["health.controller",{"_index":533,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["health_check_documentation_address",{"_index":989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["health_check_rest_address",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["healthcheck",{"_index":328,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["healthcheck(data",{"_index":565,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["healthcheckdocumentationaddress",{"_index":514,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckrestaddress",{"_index":512,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":507,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":505,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":496,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":148,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["healthy",{"_index":819,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["helper.ts",{"_index":923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["host",{"_index":271,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["http",{"_index":61,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["http.controller",{"_index":862,"title":{},"body":{"modules/UsersModule.html":{}}}],["http.controller.ts",{"_index":787,"title":{},"body":{"controllers/UsersHttpController.html":{},"coverage.html":{}}}],["http.controller.ts:126",{"_index":827,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:149",{"_index":823,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:162",{"_index":820,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:59",{"_index":797,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:75",{"_index":804,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:99",{"_index":816,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.guard",{"_index":463,"title":{},"body":{"modules/GuardsModule.html":{}}}],["http.guard.ts",{"_index":120,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["http.guard.ts:10",{"_index":122,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:24",{"_index":123,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["httpcode",{"_index":831,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpcode(201",{"_index":838,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpexception",{"_index":538,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":431,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":545,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httphealthindicator",{"_index":506,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":530,"title":{},"body":{"modules/HealthModule.html":{}}}],["id",{"_index":351,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["identifier",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["igrpcusersservice",{"_index":365,"title":{"interfaces/IGrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["iloggingservice",{"_index":570,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":114,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["imports",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":68,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["includes",{"_index":561,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":690,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["initialized",{"_index":725,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":71,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["inject(injectionnames.api_key",{"_index":385,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.client_grpc_proxy",{"_index":384,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["inject(injectionnames.client_tcp_proxy",{"_index":691,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.hash_rounds",{"_index":490,"title":{},"body":{"injectables/HashPipe.html":{}}}],["inject(injectionnames.health_check_documentation_address",{"_index":517,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.health_check_rest_address",{"_index":516,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.project_name",{"_index":663,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(logging_service",{"_index":662,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(users_database_service",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":449,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["injectable",{"_index":32,"title":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":34,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":604,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectionnames",{"_index":79,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["injectionnames.api_key",{"_index":203,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.client_grpc_proxy",{"_index":178,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.client_tcp_proxy",{"_index":179,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.connection_string",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.enum",{"_index":222,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["injectionnames.grpc_config",{"_index":194,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_port",{"_index":204,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_users_client",{"_index":180,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.hash_rounds",{"_index":205,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_documentation_address",{"_index":206,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_rest_address",{"_index":207,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.project_name",{"_index":208,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.rest_port",{"_index":209,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.secrets_from_env",{"_index":210,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.swagger_config",{"_index":211,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_config",{"_index":197,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_port",{"_index":212,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_users_client",{"_index":181,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.use_swagger",{"_index":213,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectmodel",{"_index":764,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":767,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":52,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["instanceof",{"_index":90,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["intercept",{"_index":540,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":541,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":536,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":432,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["interface",{"_index":556,"title":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":557,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":765,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":428,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["invalid",{"_index":839,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":795,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["isconnected",{"_index":676,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["isemail",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["isstring()@isuuid",{"_index":20,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["isstring()@isuuid(constants.uuid_version",{"_index":467,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":26,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{}}}],["isuuid(constants.uuid_version",{"_index":472,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersclient",{"_index":377,"title":{"interfaces/IUsersClient.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["iusersdatabaseservice",{"_index":591,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":426,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["jane",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":218,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["join(__dirname",{"_index":258,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["js",{"_index":78,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["key",{"_index":11,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["key.dto",{"_index":134,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{}}}],["key.dto.ts",{"_index":7,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["key.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["key.guard",{"_index":81,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["key.guard.ts",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:20",{"_index":105,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:37",{"_index":112,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:8",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["known",{"_index":750,"title":{},"body":{"classes/UserListDto.html":{}}}],["latest",{"_index":649,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["length(constants.display_name_min_length",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.password_min_length",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1047,"title":{},"body":{"properties.html":{}}}],["line",{"_index":852,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["list",{"_index":597,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["list.dto",{"_index":381,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["list.dto.ts",{"_index":747,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:10",{"_index":749,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":801,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["loader",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":577,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":573,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":574,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":572,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":622,"title":{},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{}}}],["logging.service",{"_index":624,"title":{},"body":{"modules/LoggingModule.html":{}}}],["logging/logging.interface",{"_index":654,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["logging/logging.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["logging_service",{"_index":581,"title":{},"body":{"interfaces/ILoggingService.html":{},"modules/LoggingModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingmodule",{"_index":149,"title":{"modules/LoggingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"index.html":{},"modules.html":{}}}],["loggingservice",{"_index":623,"title":{"injectables/LoggingService.html":{}},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["logic",{"_index":607,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":637,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.service",{"_index":224,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["manager.service.ts",{"_index":634,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:18",{"_index":643,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:31",{"_index":652,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:37",{"_index":644,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:45",{"_index":646,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:54",{"_index":648,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":578,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["messagepattern",{"_index":896,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["messagepattern({cmd",{"_index":889,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":93,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["method",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":44,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["michael",{"_index":1050,"title":{},"body":{"properties.html":{}}}],["microserviceconfigname",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minimum",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":965,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1048,"title":{},"body":{"properties.html":{}}}],["model",{"_index":755,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":139,"title":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":141,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":511,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":715,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosehealthindicator",{"_index":504,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":866,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":772,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":75,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["names.ts",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":549,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/axios",{"_index":531,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":72,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":188,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":226,"title":{},"body":{"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":508,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["new",{"_index":51,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":542,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["next.handle().pipe",{"_index":551,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["non",{"_index":251,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["notfoundexception",{"_index":619,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":234,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":476,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":109,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{}}}],["operations",{"_index":448,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["optional",{"_index":55,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":255,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{}}}],["options.headers[headernames.x_api_key",{"_index":518,"title":{},"body":{"controllers/HealthController.html":{}}}],["otherwise",{"_index":70,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["output",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1035,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":256,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/ConfigurationModule.html":{}}}],["pages",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":82,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["param('guid",{"_index":843,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["parameter",{"_index":12,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["parseint(configservice.getorthrow(`${users_service_prefix}${injectionnames.grpc_port",{"_index":241,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseint(configservice.getorthrow(`${users_service_prefix}${injectionnames.rest_port",{"_index":240,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseint(configservice.getorthrow(`${users_service_prefix}${injectionnames.tcp_port",{"_index":242,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseint(rounds",{"_index":237,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseuuidpipe",{"_index":830,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["part",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":700,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":701,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["password_max_length",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":829,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid",{"_index":845,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":824,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["path",{"_index":219,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["pipe",{"_index":438,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{}}}],["pipe.ts",{"_index":474,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:23",{"_index":484,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:9",{"_index":479,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":437,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["pipes/pipes.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["pipesmodule",{"_index":166,"title":{"modules/PipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PipesModule.html":{},"index.html":{},"modules.html":{}}}],["pipetransform",{"_index":487,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":253,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["post",{"_index":246,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/UsersHttpController.html":{}}}],["post()@httpcode(201)@apioperation({description",{"_index":788,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["pre",{"_index":244,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["predefined",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":498,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["pre}${restport}${post",{"_index":248,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["private",{"_index":323,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["processed",{"_index":567,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["project_name",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projectname",{"_index":642,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["projects/${this.projectname}/secrets/${secretname}/versions/latest",{"_index":667,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":108,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":456,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["prop",{"_index":712,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":704,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["protected",{"_index":45,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["proto/users.proto",{"_index":259,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["protopath",{"_index":257,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":39,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":190,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":447,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["providing",{"_index":748,"title":{},"body":{"classes/UserListDto.html":{}}}],["proxy",{"_index":335,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rcp",{"_index":62,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["read",{"_index":60,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersHttpController.html":{}}}],["readapikey",{"_index":46,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readapikey(context",{"_index":57,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readonly",{"_index":116,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["reflect",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":329,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(data",{"_index":415,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(guid",{"_index":359,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":69,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":126,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["requests",{"_index":63,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["required",{"_index":717,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resolve",{"_index":457,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["response",{"_index":392,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rest",{"_index":513,"title":{},"body":{"controllers/HealthController.html":{}}}],["rest_port",{"_index":995,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["restport",{"_index":243,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["result",{"_index":344,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["result.acknowledged",{"_index":782,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":785,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.matchedcount",{"_index":783,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":30,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":546,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":537,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":91,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["returned",{"_index":814,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["rounds",{"_index":235,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{}}}],["rpcexception",{"_index":539,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":555,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rxjs",{"_index":113,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"dependencies.html":{}}}],["schema",{"_index":703,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":713,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":719,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":223,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["secretmanagerservice",{"_index":214,"title":{"injectables/SecretManagerService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"index.html":{}}}],["secretmanagerservice.getconnectionstring",{"_index":233,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["secretmanagerserviceclient",{"_index":651,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":650,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":657,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":655,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets_from_env",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secretsfromenv",{"_index":231,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["send",{"_index":693,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["sent",{"_index":339,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["server",{"_index":338,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["service",{"_index":264,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["serviceapikey",{"_index":56,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["services",{"_index":121,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"miscellaneous/functions.html":{}}}],["setdescription('the",{"_index":263,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["settitle('usersservice",{"_index":262,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["setup",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.0",{"_index":265,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["simple",{"_index":355,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["single",{"_index":466,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["src/.../configuration.module.ts",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../grpc",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../header",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../injectionnames.enum.ts",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1054,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["src/clients/clients.module.ts",{"_index":182,"title":{},"body":{"modules/ClientsModule.html":{}}}],["src/clients/grpc",{"_index":320,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/clients/tcp",{"_index":675,"title":{},"body":{"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["src/configuration/configuration.module.ts",{"_index":215,"title":{},"body":{"modules/ConfigurationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/env",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/injectionnames.enum.ts",{"_index":994,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/secret",{"_index":633,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":35,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/guards/guards.module.ts",{"_index":462,"title":{},"body":{"modules/GuardsModule.html":{}}}],["src/header",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/health/health.controller.ts",{"_index":497,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:43",{"_index":501,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":529,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/interceptors/http",{"_index":534,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/logging/logging.interface.ts",{"_index":571,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logging/logging.interface.ts:15",{"_index":576,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/logging/logging.module.ts",{"_index":621,"title":{},"body":{"modules/LoggingModule.html":{}}}],["src/logging/logging.service.ts",{"_index":625,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/logging/logging.service.ts:14",{"_index":626,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/main.ts",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":473,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/pipes/pipes.module.ts",{"_index":632,"title":{},"body":{"modules/PipesModule.html":{}}}],["src/users/constants.ts",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/controllers/users",{"_index":406,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["src/users/database/user.schema.ts",{"_index":702,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":706,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":708,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":709,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:36",{"_index":711,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/api",{"_index":6,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":465,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:13",{"_index":468,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/update",{"_index":698,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":746,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":720,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":724,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":726,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":728,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":734,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":735,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":558,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":606,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":609,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":610,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":611,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:43",{"_index":613,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:50",{"_index":612,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":752,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["src/users/users.module.ts",{"_index":858,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:104",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":575,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":503,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["stopatfirsterror",{"_index":439,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super(serviceapikey",{"_index":85,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["support",{"_index":1041,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1042,"title":{},"body":{"modules.html":{}}}],["swagger_config",{"_index":1002,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["tcp",{"_index":130,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["tcp.controller",{"_index":865,"title":{},"body":{"modules/UsersModule.html":{}}}],["tcp.controller.ts",{"_index":888,"title":{},"body":{"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["tcp.controller.ts:103",{"_index":893,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:50",{"_index":890,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:60",{"_index":891,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:72",{"_index":892,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:83",{"_index":895,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:93",{"_index":894,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard",{"_index":464,"title":{},"body":{"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{}}}],["tcp.guard.ts",{"_index":129,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["tcp.guard.ts:10",{"_index":131,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:24",{"_index":132,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp_config",{"_index":1001,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_port",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_users_client",{"_index":999,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcpconfig",{"_index":195,"title":{},"body":{"modules/ClientsModule.html":{}}}],["tcpusersclient",{"_index":189,"title":{"injectables/TcpUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":532,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../client.tester.ts",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/client.tester.ts",{"_index":920,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/test",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["this.apikey",{"_index":519,"title":{},"body":{"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client",{"_index":666,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.accesssecretversion",{"_index":669,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.close",{"_index":403,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.connect",{"_index":697,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.clientservice",{"_index":386,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.create(data",{"_index":394,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findall",{"_index":396,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findone(dto",{"_index":398,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.healthcheck",{"_index":402,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.remove(dto",{"_index":401,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.update(dto",{"_index":400,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.connect",{"_index":692,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.databaseservice.create(user",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":738,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":740,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.api_key",{"_index":664,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":665,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.guid",{"_index":744,"title":{},"body":{"classes/User-1.html":{}}}],["this.hashrounds",{"_index":493,"title":{},"body":{"injectables/HashPipe.html":{}}}],["this.healthcheckdocumentationaddress",{"_index":526,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckrestaddress",{"_index":522,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckservice.check",{"_index":520,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httphealthindicator.pingcheck",{"_index":521,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isconnected",{"_index":696,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":673,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.metadata",{"_index":388,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.metadata.add(headernames.x_api_key",{"_index":389,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.mongoosehealthindicator.pingcheck('users",{"_index":523,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.password",{"_index":742,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":117,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.serviceapikey",{"_index":118,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.usermodel(user",{"_index":768,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":784,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":776,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":778,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":780,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":841,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.create(data",{"_index":450,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findall",{"_index":452,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":453,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(guid",{"_index":844,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":455,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.remove(guid",{"_index":848,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.update(data.guid",{"_index":454,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.update(guid",{"_index":846,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["throw",{"_index":554,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":617,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":615,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{}}}],["transform(value",{"_index":483,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":486,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["transport",{"_index":217,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.grpc",{"_index":254,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.tcp",{"_index":270,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["true",{"_index":110,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":668,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1052,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":853,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["undefined",{"_index":67,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["undefined})@apiresponse({status",{"_index":802,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["unique",{"_index":705,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":441,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["unqiue",{"_index":710,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unused",{"_index":899,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["update",{"_index":330,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(data",{"_index":417,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(guid",{"_index":362,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":399,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["updated.'})@apiresponse({status",{"_index":825,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["updateuserdto",{"_index":363,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["updating",{"_index":699,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":260,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["use",{"_index":680,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["use_swagger",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":198,"title":{},"body":{"modules/ClientsModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":481,"title":{},"body":{"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{}}}],["useguards",{"_index":419,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useguards(apikeygrpcguard",{"_index":444,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeytcpguard",{"_index":898,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["useinterceptors",{"_index":420,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useinterceptors(new",{"_index":443,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["usepipes",{"_index":421,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user",{"_index":278,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":807,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.'})@apiresponse({status",{"_index":789,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.displayname",{"_index":739,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":370,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user.dto.ts",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":741,"title":{},"body":{"classes/User-1.html":{}}}],["user.name",{"_index":867,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":743,"title":{},"body":{"classes/User-1.html":{}}}],["usercontroller",{"_index":445,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["userdatabase",{"_index":723,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":745,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":716,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":758,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":770,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":379,"title":{"classes/UserListDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["userlistdto.users",{"_index":397,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["usermodel",{"_index":757,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":185,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users.'})@apiresponse({status",{"_index":799,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["users.service",{"_index":860,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/api",{"_index":133,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["users/dto/create",{"_index":369,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/guid.dto",{"_index":372,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["users/dto/update",{"_index":373,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/user",{"_index":380,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/entities/user.entity",{"_index":374,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/interfaces/users",{"_index":375,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/users.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["users_api_key",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_database_service",{"_index":605,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_grpc_port",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_hash_rounds",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_project_name",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_rest_port",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_secrets_from_env",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_service",{"_index":427,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service_",{"_index":228,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["users_service_prefix",{"_index":227,"title":{},"body":{"modules/ConfigurationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_tcp_port",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_use_swagger",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userschema",{"_index":718,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdatabaseservice",{"_index":751,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usershttpcontroller",{"_index":786,"title":{"controllers/UsersHttpController.html":{}},"body":{"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":150,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":446,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usersserviceapikey",{"_index":659,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["usersserviceconnectionstring",{"_index":661,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["userstcpcontroller",{"_index":859,"title":{"controllers/UsersTcpController.html":{}},"body":{"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user})@apiresponse({status",{"_index":791,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["using",{"_index":322,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["uuid",{"_index":469,"title":{},"body":{"classes/GuidDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuids",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":736,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":83,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validate",{"_index":106,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validated",{"_index":391,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["validating",{"_index":38,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validation",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":422,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"dependencies.html":{}}}],["value",{"_index":23,"title":{},"body":{"classes/ApiKeyDto.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["values",{"_index":252,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["variable",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":974,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":900,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["version",{"_index":470,"title":{},"body":{"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version.payload.data.tostring",{"_index":670,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":580,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":440,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["whose",{"_index":343,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["x",{"_index":993,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":579,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiKeyDto.html":{"url":"classes/ApiKeyDto.html","title":"class - ApiKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/api-key.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes an api key parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/api-key.dto.ts:12\n                        \n                    \n\n            \n                \n                    The value of the api key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * Describes an api key parameter.\n */\nexport default class ApiKeyDto {\n  /**\n   * The value of the api key.\n   */\n  @IsString()\n  @IsUUID()\n  apiKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyGrpcGuard.html":{"url":"injectables/ApiKeyGrpcGuard.html","title":"injectable - ApiKeyGrpcGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyGrpcGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-grpc.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key in GRPC context.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-grpc.guard.ts:11\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:25\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key in GRPC context.\n */\n@Injectable()\nexport class ApiKeyGrpcGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const metadata: Metadata = context\n      .getArgs()\n      .find((arg) => arg instanceof Metadata);\n    if (!metadata) {\n      return;\n    }\n\n    const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n    if (!apiKeys || apiKeys.length !== 1) {\n      return;\n    }\n\n    return apiKeys[0].toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Base guard for validating api keys.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Protected\n                                    Abstract\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key.guard.ts:8\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:20\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Abstract\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:37\n                \n            \n\n\n            \n                \n                    Read the api key from requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Base guard for validating api keys.\n */\n@Injectable()\nexport abstract class ApiKeyGuard implements CanActivate {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(private readonly serviceApiKey: string) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected abstract readApiKey(context: ExecutionContext): string | undefined;\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyHttpGuard.html":{"url":"injectables/ApiKeyHttpGuard.html","title":"injectable - ApiKeyHttpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyHttpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-http.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for http services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-http.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { HeaderNames } from '../header-names';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for http services.\n */\n@Injectable()\nexport class ApiKeyHttpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const headers = request?.headers;\n\n    if (!headers) {\n      return;\n    }\n\n    return headers[HeaderNames.X_API_KEY];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyTcpGuard.html":{"url":"injectables/ApiKeyTcpGuard.html","title":"injectable - ApiKeyTcpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyTcpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-tcp.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for tcp services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-tcp.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport ApiKeyDto from '../users/dto/api-key.dto';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for tcp services.\n */\n@Injectable()\nexport class ApiKeyTcpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const data = context.getArgs().find((args) => (args as ApiKeyDto).apiKey);\n    if (data) {\n      return (data as ApiKeyDto).apiKey;\n    }\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggingModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { LoggingModule } from './logging/logging.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { HealthModule } from './health/health.module';\nimport { ClientsModule } from './clients/clients.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { GuardsModule } from './guards/guards.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { InjectionNames } from './configuration/InjectionNames.enum';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      useFactory: (connectionString: string) => {\n        return { uri: connectionString };\n      },\n      inject: [InjectionNames.CONNECTION_STRING],\n      imports: [ConfigurationModule],\n    }),\n    LoggingModule,\n    UsersModule,\n    HealthModule,\n    ClientsModule,\n    ConfigurationModule,\n    GuardsModule,\n    PipesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientsModule.html":{"url":"modules/ClientsModule.html","title":"module - ClientsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_imports\n\n\n\ncluster_ClientsModule_exports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nClientsModule\n\nClientsModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/clients/clients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.CLIENT_GRPC_PROXY\n                        \n                        \n                            InjectionNames.CLIENT_TCP_PROXY\n                        \n                        \n                            InjectionNames.GRPC_USERS_CLIENT\n                        \n                        \n                            InjectionNames.TCP_USERS_CLIENT\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GrpcUsersClient } from './grpc-users-client';\nimport { ClientProxyFactory } from '@nestjs/microservices';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { TcpUsersClient } from './tcp-users-client';\n\n@Module({\n  exports: [\n    InjectionNames.GRPC_USERS_CLIENT,\n    InjectionNames.TCP_USERS_CLIENT,\n    InjectionNames.CLIENT_GRPC_PROXY,\n    InjectionNames.CLIENT_TCP_PROXY,\n  ],\n  imports: [ConfigurationModule],\n  providers: [\n    {\n      provide: InjectionNames.CLIENT_GRPC_PROXY,\n      useFactory: (grpcConfig: any) => ClientProxyFactory.create(grpcConfig),\n      inject: [InjectionNames.GRPC_CONFIG],\n    },\n    {\n      provide: InjectionNames.CLIENT_TCP_PROXY,\n      useFactory: (tcpConfig: any) => {\n        return ClientProxyFactory.create(tcpConfig);\n      },\n      inject: [InjectionNames.TCP_CONFIG],\n    },\n    {\n      provide: InjectionNames.GRPC_USERS_CLIENT,\n      useClass: GrpcUsersClient,\n    },\n    {\n      provide: InjectionNames.TCP_USERS_CLIENT,\n      useClass: TcpUsersClient,\n    },\n  ],\n})\nexport class ClientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_imports\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nLoggingModule\n\nLoggingModule\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT  -->\n\nConfigurationModule->InjectionNames.GRPC_PORT \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT  -->\n\nConfigurationModule->InjectionNames.REST_PORT \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT  -->\n\nConfigurationModule->InjectionNames.TCP_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecretManagerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.API_KEY\n                        \n                        \n                            InjectionNames.CONNECTION_STRING\n                        \n                        \n                            InjectionNames.GRPC_CONFIG\n                        \n                        \n                            InjectionNames.GRPC_PORT\n                        \n                        \n                            InjectionNames.HASH_ROUNDS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_REST_ADDRESS\n                        \n                        \n                            InjectionNames.PROJECT_NAME\n                        \n                        \n                            InjectionNames.REST_PORT\n                        \n                        \n                            InjectionNames.SECRETS_FROM_ENV\n                        \n                        \n                            InjectionNames.SWAGGER_CONFIG\n                        \n                        \n                            InjectionNames.TCP_CONFIG\n                        \n                        \n                            InjectionNames.TCP_PORT\n                        \n                        \n                            InjectionNames.USE_SWAGGER\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Transport } from '@nestjs/microservices';\nimport { join } from 'path';\nimport { EnvNames } from './env-names';\nimport { LoggingModule } from '../logging/logging.module';\nimport { InjectionNames } from './InjectionNames.enum';\nimport { SecretManagerService } from './secret-manager.service';\nimport { DocumentBuilder } from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\n\nconst USERS_SERVICE_PREFIX = 'USERS_SERVICE_';\n\n@Module({\n  exports: [\n    InjectionNames.API_KEY,\n    InjectionNames.GRPC_CONFIG,\n    InjectionNames.TCP_CONFIG,\n    InjectionNames.USE_SWAGGER,\n    InjectionNames.HASH_ROUNDS,\n    InjectionNames.PROJECT_NAME,\n    InjectionNames.SECRETS_FROM_ENV,\n    InjectionNames.CONNECTION_STRING,\n    InjectionNames.SWAGGER_CONFIG,\n    InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n    InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n    InjectionNames.REST_PORT,\n    InjectionNames.GRPC_PORT,\n    InjectionNames.TCP_PORT,\n  ],\n  imports: [ConfigModule.forRoot({}), LoggingModule],\n  providers: [\n    SecretManagerService,\n    {\n      provide: InjectionNames.API_KEY,\n      useFactory: async (\n        configService: ConfigService,\n      ): Promise => {\n        return configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.API_KEY}`);\n      },\n      inject: [\n        ConfigService,\n      ],\n    },\n    {\n      provide: InjectionNames.CONNECTION_STRING,\n      useFactory: async (\n        secretsFromEnv: boolean,\n        configService: ConfigService,\n        secretManagerService: SecretManagerService,\n      ): Promise => {\n        if (secretsFromEnv) {\n          return configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.CONNECTION_STRING}`);\n        }\n\n        return secretManagerService.getConnectionString();\n      },\n      inject: [\n        InjectionNames.SECRETS_FROM_ENV,\n        ConfigService,\n        SecretManagerService,\n      ],\n    },\n    {\n      provide: InjectionNames.HASH_ROUNDS,\n      useFactory: (configService: ConfigService): number => {\n        const rounds = configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.HASH_ROUNDS}`);\n        return parseInt(rounds);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.PROJECT_NAME,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.PROJECT_NAME}`);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SECRETS_FROM_ENV,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(`${USERS_SERVICE_PREFIX}${InjectionNames.SECRETS_FROM_ENV}`);\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.REST_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.REST_PORT}`));\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.GRPC_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.GRPC_PORT}`));\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.TCP_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.TCP_PORT}`));\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n      useFactory: (configService: ConfigService, restPort: number): string => {\n        const pre = configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_REST_ADDRESS}_PRE`);\n        const post = configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_REST_ADDRESS}_POST`);\n        return `${pre}${restPort}${post}`;\n      },\n      inject: [ConfigService, InjectionNames.REST_PORT],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(`${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS}`);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.USE_SWAGGER,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(`${USERS_SERVICE_PREFIX}${InjectionNames.USE_SWAGGER}`);\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    /**\n     * NON ENV VALUES\n     */\n    {\n      provide: InjectionNames.GRPC_CONFIG,\n      useFactory: (configService: ConfigService, port: number) => {\n        return {\n          transport: Transport.GRPC,\n          options: {\n            package: ['users'],\n            protoPath: [join(__dirname, '../proto/users.proto')],\n            url: `0.0.0.0:${port}`,\n          },\n        };\n      },\n      inject: [ConfigService, InjectionNames.GRPC_PORT],\n    },\n    {\n      provide: InjectionNames.SWAGGER_CONFIG,\n      useFactory: () => {\n        return new DocumentBuilder()\n          .setTitle('UsersService')\n          .setDescription('The api of the users service.')\n          .setVersion('1.0')\n          .addTag('users')\n          .addApiKey(\n            { type: 'apiKey', name: HeaderNames.X_API_KEY, in: 'header' },\n            HeaderNames.X_API_KEY,\n          )\n          .build();\n      },\n    },\n    {\n      provide: InjectionNames.TCP_CONFIG,\n      useFactory: (configService: ConfigService, port: number): any => {\n        return {\n          transport: Transport.TCP,\n          options: {\n            host: '0.0.0.0',\n            port,\n          },\n        };\n      },\n      inject: [ConfigService, InjectionNames.TCP_PORT],\n    },\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GrpcUsersClient.html":{"url":"injectables/GrpcUsersClient.html","title":"injectable - GrpcUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GrpcUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/grpc-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using grpc.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clientService\n                            \n                            \n                                    Private\n                                    Readonly\n                                metadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientGrpcProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/grpc-users-client.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a new instance of GrpcUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientGrpcProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The grpc client proxy that is configured to access the server by grpc.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:124\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:66\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:77\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:116\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:90\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clientService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IGrpcUsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:28\n                        \n                    \n\n            \n                \n                    Service for accessing the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Metadata\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:33\n                        \n                    \n\n            \n                \n                    The default metadata that is sent to the server.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientGrpcProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport GuidDto from '../users/dto/guid.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport { User } from '../users/entities/user.entity';\nimport { IGrpcUsersService } from '../users/interfaces/users-grpc-controller.interface';\nimport IUsersClient from '../users/interfaces/users-client.interface';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * The name of the grpc users service.\n */\nconst GRPC_USERS_SERVICE_NAME = 'GrpcUsersService';\n\n/**\n * Client for the users service using grpc.\n */\n@Injectable()\nexport class GrpcUsersClient implements IUsersClient {\n  /**\n   * Service for accessing the server.\n   */\n  private readonly clientService: IGrpcUsersService;\n\n  /**\n   * The default metadata that is sent to the server.\n   */\n  private readonly metadata: Metadata;\n\n  /**\n   * Creates a new instance of GrpcUsersClient.\n   * @param client The grpc client proxy that is configured to access the server by grpc.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_GRPC_PROXY)\n    private readonly client: ClientGrpcProxy,\n    @Inject(InjectionNames.API_KEY) apiKey: string,\n  ) {\n    this.clientService = client.getService(\n      GRPC_USERS_SERVICE_NAME,\n    );\n    this.metadata = new Metadata();\n    this.metadata.add(HeaderNames.X_API_KEY, apiKey);\n  }\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const response = await this.clientService.create(data, this.metadata);\n    return await firstValueFrom(response);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await this.clientService.findAll({}, this.metadata);\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const dto: GuidDto = { guid };\n    const response = await this.clientService.findOne(dto, this.metadata);\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const dto: UpdateUserDto & GuidDto = {\n      guid,\n      ...data,\n    };\n    const response = await this.clientService.update(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const dto: GuidDto = {\n      guid,\n    };\n    const response = await this.clientService.remove(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await this.clientService.healthCheck({}, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:100\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyGrpcGuard } from '../../guards/api-key-grpc.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGrpcGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  healthCheck(): Promise {\n    return new Promise((resolve) => resolve());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuardsModule.html":{"url":"modules/GuardsModule.html","title":"module - GuardsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_GuardsModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guards/guards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { ApiKeyGrpcGuard } from './api-key-grpc.guard';\nimport { ApiKeyHttpGuard } from './api-key-http.guard';\nimport { ApiKeyTcpGuard } from './api-key-tcp.guard';\n\n@Module({\n  exports: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n  imports: [ConfigurationModule],\n  providers: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n})\nexport class GuardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID(Constants.UUID_VERSION)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:13\n                        \n                    \n\n            \n                \n                    An uuid in version 4.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { Constants } from '../constants';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  /**\n   * An uuid in version 4.\n   */\n  @IsString()\n  @IsUUID(Constants.UUID_VERSION)\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashRounds: number)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:9\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        hashRounds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of used hash rounds.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:23\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, Inject } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param hashRounds The number of used hash rounds.\n   */\n  constructor(\n    @Inject(InjectionNames.HASH_ROUNDS) private readonly hashRounds: number,\n  ) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    if (data.email) {\n      data.email = hashSync(data.email, this.hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, this.hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                A controller for checking the application health.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:43\n                \n            \n\n\n            \n                \n                    Execute health checks for the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The health status of the server.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport {\n  MongooseHealthIndicator,\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  HealthCheckResult,\n} from '@nestjs/terminus';\nimport { HeaderNames } from '../header-names';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * A controller for checking the application health.\n */\n@Controller('health')\nexport class HealthController {\n  /**\n   * Creates a new instance of HealthController.\n   * @param healthCheckService Service for checking the application health.\n   * @param httpHealthIndicator Http-based health checks.\n   * @param mongooseHealthIndicator Check the health of the mongodb.\n   * @param apiKey The api key that used for requests.\n   * @param healthCheckRestAddress The address for the rest health check.\n   * @param healthCheckDocumentationAddress The address of the users service documentation.\n   */\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private httpHealthIndicator: HttpHealthIndicator,\n    private mongooseHealthIndicator: MongooseHealthIndicator,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n    @Inject(InjectionNames.HEALTH_CHECK_REST_ADDRESS)\n    private readonly healthCheckRestAddress: string,\n    @Inject(InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS)\n    private readonly healthCheckDocumentationAddress: string,\n  ) {}\n\n  /**\n   * Execute health checks for the application.\n   * @returns The health status of the server.\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    const options = { headers: {} };\n    options.headers[HeaderNames.X_API_KEY] = this.apiKey;\n\n    return this.healthCheckService.check([\n      async () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service REST',\n          this.healthCheckRestAddress,\n          options,\n        ),\n      async () =>\n        this.mongooseHealthIndicator.pingCheck('Users Service Database'),\n      () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service Documenation',\n          this.healthCheckDocumentationAddress,\n        ),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  imports: [TerminusModule, HttpModule, ConfigurationModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrpcUsersService.html":{"url":"interfaces/IGrpcUsersService.html","title":"interface - IGrpcUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-grpc-controller.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service interface for the GRPC service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:17\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:24\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:32\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:57\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data is not processed.\n\n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:49\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:41\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport GuidDto from '../dto/guid.dto';\nimport { Observable } from 'rxjs';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Service interface for the GRPC service.\n */\nexport interface IGrpcUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto, metadata: Metadata): Observable;\n\n  /**\n   * Find all users of the application.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(data: any, metadata: Metadata): Observable;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  update(data: UpdateUserDto & GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  remove(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Execute a simple health check.\n   * @param data The data is not processed.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(data: any, metadata: Metadata): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersClient.html":{"url":"interfaces/IUsersClient.html","title":"interface - IUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-client.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface that describes operations on users for controller and client.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:53\n                \n            \n\n\n            \n                \n                    Close the client connection.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:14\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:20\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:27\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:48\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:42\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:35\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Interface that describes operations on users for controller and client.\n */\nexport default interface IUsersClient {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto): Promise;\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  update(guid: string, data: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  remove(guid: string): Promise;\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(): Promise;\n\n  /**\n   * Close the client connection.\n   */\n  close(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:47\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:50\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:43\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingModule.html":{"url":"modules/LoggingModule.html","title":"module - LoggingModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logging/logging.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\n\n@Module({\n  exports: [LOGGING_SERVICE],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n  ],\n})\nexport class LoggingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_imports\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/pipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HashPipe\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { HashPipe } from './hash-pipe';\n\n@Module({\n  exports: [HashPipe],\n  imports: [ConfigurationModule],\n  providers: [HashPipe],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getApiKey\n                            \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, projectName: string)\n                    \n                \n                        \n                            \n                                Defined in src/configuration/secret-manager.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        projectName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApiKey()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:37\n                \n            \n\n\n            \n                \n                    Gets the api key for the users service.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The api key.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:45\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:54\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/configuration/secret-manager.service.ts:31\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ILoggingService, LOGGING_SERVICE } from '../logging/logging.interface';\nimport { InjectionNames } from './InjectionNames.enum';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  API_KEY = 'UsersServiceApiKey',\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    @Inject(InjectionNames.PROJECT_NAME) private readonly projectName: string,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the api key for the users service.\n   * @returns The api key.\n   */\n  async getApiKey(): Promise {\n    return this.getSecretAsync(SecretNames.API_KEY);\n  }\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.projectName}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TcpUsersClient.html":{"url":"injectables/TcpUsersClient.html","title":"injectable - TcpUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TcpUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/tcp-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using tcp.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isConnected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/tcp-users-client.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the TcpUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A client proxy that is configured to use tcp.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:127\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:135\n                \n            \n\n\n            \n                \n                    Establish a connection to the server.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The proxy client that is connected to the server.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:71\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:117\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:105\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:86\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/clients/tcp-users-client.ts:19\n                        \n                    \n\n            \n                \n                    Indicates if the client is connected.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { User } from '../users/entities/user.entity';\nimport IUsersClient from '../users/interfaces/users-client.interface';\n\n/**\n * Client for the users service using tcp.\n */\n@Injectable()\nexport class TcpUsersClient implements IUsersClient {\n  /**\n   * Indicates if the client is connected.\n   */\n  private isConnected = false;\n\n  /**\n   * Creates a new instance of the TcpUsersClient.\n   * @param client A client proxy that is configured to use tcp.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_TCP_PROXY)\n    private readonly client: ClientProxy,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const user = await firstValueFrom(\n      await (\n        await this.connect()\n      ).send(\n        { cmd: 'create' },\n        {\n          ...data,\n          apiKey: this.apiKey,\n        },\n      ),\n    );\n\n    return user;\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findAll' }, { apiKey: this.apiKey });\n\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findOne' }, { guid, apiKey: this.apiKey });\n\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const response = await (\n      await this.connect()\n    ).send(\n      { cmd: 'update' },\n      {\n        guid,\n        ...data,\n        apiKey: this.apiKey,\n      },\n    );\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'remove' }, { guid, apiKey: this.apiKey });\n\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'healthCheck' }, { apiKey: this.apiKey });\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n\n  /**\n   * Establish a connection to the server.\n   * @returns The proxy client that is connected to the server.\n   */\n  private async connect(): Promise {\n    if (!this.isConnected) {\n      await this.client.connect();\n    }\n\n    return this.client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the schema for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:36\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * The document type for users.\n */\nexport type UserDocument = User & Document;\n\n/**\n * Describes the schema for users.\n */\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\n/**\n * The mongodb schema for users.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:10\n                        \n                    \n\n            \n                \n                    All known users of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  /**\n   * All known users of the application.\n   */\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            Create a new instance of UsersDatabaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The model for database operations on users.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:28\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:46\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:57\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:88\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:70\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  /**\n   * Create a new instance of UsersDatabaseService.\n   * @param userModel The model for database operations on users.\n   */\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersHttpController.html":{"url":"controllers/UsersHttpController.html","title":"controller - UsersHttpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersHttpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-http.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:59\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:99\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health/check')@ApiOperation({description: 'Execute a simple health check.'})@ApiResponse({status: 200, description: 'The service is healthy.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:162\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:149\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:126\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../../header-names';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersHttpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post()\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   */\n  @Get('health/check')\n  @ApiOperation({ description: 'Execute a simple health check.' })\n  @ApiResponse({ status: 200, description: 'The service is healthy.' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersHttpController\n                        \n                        \n                            GrpcUsersService\n                        \n                        \n                            UsersTcpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersHttpController } from './controllers/users-http.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './controllers/users-grpc.controller';\nimport { UsersTcpController } from './controllers/users-tcp.controller';\nimport { GuardsModule } from '../guards/guards.module';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  controllers: [UsersHttpController, GrpcUsersService, UsersTcpController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    GuardsModule,\n    ConfigurationModule,\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\nimport { IUsersService } from './interfaces/users.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService implements IUsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersTcpController.html":{"url":"controllers/UsersTcpController.html","title":"controller - UsersTcpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersTcpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-tcp.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                TCP CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'create'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:50\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(data: ApiKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findAll'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ApiKeyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findOne'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:72\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'healthCheck'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:103\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'remove'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:93\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'update'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyTcpGuard } from '../../guards/api-key-tcp.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\nimport ApiKeyDto from '../dto/api-key.dto';\n\n/**\n * TCP CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyTcpGuard)\n@Controller()\nexport class UsersTcpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'create' })\n  create(data: CreateUserDto & ApiKeyDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @MessagePattern({ cmd: 'findAll' })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findAll(data: ApiKeyDto): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'findOne' })\n  findOne(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'update' })\n  update(data: UpdateUserDto & GuidDto & ApiKeyDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'remove' })\n  remove(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'healthCheck' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            injectable\n            GrpcUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            variable\n            GRPC_USERS_SERVICE_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/clients/tcp-users-client.ts\n            \n            injectable\n            TcpUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/configuration/configuration.module.ts\n            \n            variable\n            USERS_SERVICE_PREFIX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configuration/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/guards/api-key-grpc.guard.ts\n            \n            injectable\n            ApiKeyGrpcGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-http.guard.ts\n            \n            injectable\n            ApiKeyHttpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-tcp.guard.ts\n            \n            injectable\n            ApiKeyTcpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/logging/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/constants.ts\n            \n            variable\n            Constants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/controllers/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-http.controller.ts\n            \n            controller\n            UsersHttpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-tcp.controller.ts\n            \n            controller\n            UsersTcpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/api-key.dto.ts\n            \n            class\n            ApiKeyDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-client.interface.ts\n            \n            interface\n            IUsersClient\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-grpc-controller.interface.ts\n            \n            interface\n            IGrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                test/client.tester.ts\n            \n            function\n            clientTest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/axios : ^0.1.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gh-pages : ^4.0.0\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvNames   (src/.../env-names.ts)\n                        \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            InjectionNames   (src/.../InjectionNames.enum.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configuration/env-names.ts\n    \n        \n            \n                \n                    \n                        \n                        EnvNames\n                    \n                \n                    \n                        \n                            Names of environment variables.\n\n                        \n                    \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : USERS_HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : USERS_PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : USERS_SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : USERS_API_KEY\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USERS_USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_TCP_PORT\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                 USERS_REST_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_REST_PORT\n                            \n                        \n            \n        \n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/configuration/InjectionNames.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        InjectionNames\n                    \n                \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : API_KEY\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 REST_PORT\n                            \n                        \n                        \n                            \n                                Value : REST_PORT\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : TCP_PORT\n                            \n                        \n                        \n                            \n                                 GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                 CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                 TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                Value : GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                 TCP_CONFIG\n                            \n                        \n                        \n                            \n                                Value : TCP_CONFIG\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                Value : SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n            \n        \n\n    src/configuration/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : UsersServiceApiKey\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            clientTest   (test/.../client.tester.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The application setup.\n\n\n                \n            \n        \n    \n    test/client.tester.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        clientTest\n                        \n                    \n                \n            \n            \n                \nclientTest(clientInjectionName: string, microserviceConfigName: string)\n                \n            \n\n\n\n\n            \n                \n                    A generic test for different clients and services: GRPC, TCP\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clientInjectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for the client.\n\n                                    \n                                \n                                \n                                    microserviceConfigName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for client configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT  -->\n\nConfigurationModule->InjectionNames.GRPC_PORT \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT  -->\n\nConfigurationModule->InjectionNames.REST_PORT \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT  -->\n\nConfigurationModule->InjectionNames.TCP_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A service that provides CRUD operations on users.\n        \n            License : MIT\n        \n            Author : Michael Diers\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The document type for users.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            GRPC_USERS_SERVICE_NAME   (src/.../grpc-users-client.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            USERS_SERVICE_PREFIX   (src/.../configuration.module.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The minimum length for display names.\n   */\n  DISPLAY_NAME_MIN_LENGTH: 3,\n\n  /**\n   * The maximum length for display names.\n   */\n  DISPLAY_NAME_MAX_LENGTH: 256,\n\n  /**\n   * The minimum length for emails.\n   */\n  EMAIL_MIN_LENGTH: 5,\n\n  /**\n   * The maximum length for emails.\n   */\n  EMAIL_MAX_LENGTH: 2048,\n\n  /**\n   * The minimum length for passwords.\n   */\n  PASSWORD_MIN_LENGTH: 8,\n\n  /**\n   * The maximum length for passwords.\n   */\n  PASSWORD_MAX_LENGTH: 4096,\n\n  /**\n   * The expected version for uuids.\n   */\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n            \n                \n                    Predefined validation constants.\n\n                \n            \n\n        \n    \n\n    src/clients/grpc-users-client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GRPC_USERS_SERVICE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GrpcUsersService'\n                    \n                \n\n            \n                \n                    The name of the grpc users service.\n\n                \n            \n\n        \n    \n\n    src/logging/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/configuration/configuration.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE_'\n                    \n                \n\n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The mongodb schema for users.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
