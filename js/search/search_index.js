var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiKeyDto.html",[0,0.131,1,2.189]],["body/classes/ApiKeyDto.html",[0,0.22,1,3.671,2,2.404,3,0.329,4,0.329,5,0.291,6,5.034,7,4.146,8,0.585,9,3.383,10,2.373,11,2.106,12,5.917,13,0.495,14,2.396,15,2.936,16,0.539,17,0.023,18,1.02,19,2.245,20,4.873,21,0.732,22,4.873,23,2.252,24,0.369,25,4.453,26,5.034,27,3.309,28,0.329,29,2.245,30,0.019,31,0.019]],["title/injectables/ApiKeyGrpcGuard.html",[32,0.649,33,2.016]],["body/injectables/ApiKeyGrpcGuard.html",[0,0.134,3,0.243,4,0.243,5,0.215,8,0.585,10,2.373,11,2.157,13,0.365,15,1.658,16,0.539,17,0.023,18,1.065,21,0.732,24,0.468,28,0.243,30,0.016,31,0.016,32,0.896,33,2.784,34,1.37,35,3.425,36,3.061,37,2.58,38,3.307,39,2.784,40,2.402,41,4.042,42,3.307,43,3.533,44,1.082,45,3.749,46,3.307,47,1.143,48,2.444,49,3.598,50,1.296,51,0.896,52,1.548,53,1.017,54,0.732,55,1.017,56,3.307,57,3.307,58,3.67,59,3.598,60,3.022,61,3.307,62,3.665,63,3.022,64,3.022,65,3.022,66,1.017,67,2.918,68,3.307,69,2.58,70,2.402,71,1.143,72,0.62,73,1.907,74,2.057,75,1.658,76,4.197,77,2.444,78,2.444,79,1.37,80,1.658,81,2.708,82,1.017,83,2.444,84,2.708,85,2.708,86,1.221,87,3.598,88,3.598,89,3.598,90,3.061,91,1.469,92,4.87,93,3.598,94,3.598,95,2.444,96,3.598]],["title/guards/ApiKeyGuard.html",[37,1.869,43,2.016]],["body/guards/ApiKeyGuard.html",[0,0.129,3,0.233,4,0.233,5,0.206,8,0.649,10,2.436,11,2.116,13,0.351,15,2.68,16,0.598,17,0.023,18,1.05,21,0.812,24,0.359,28,0.233,30,0.015,31,0.015,32,0.872,35,3.608,37,2.51,38,3.217,39,2.708,41,4.131,43,3.325,44,1.052,45,3.671,46,3.217,47,1.098,48,2.346,50,1.26,51,0.872,52,1.505,53,1.129,54,0.812,55,1.129,56,3.217,57,3.217,58,3.999,60,2.939,63,2.939,64,3.608,65,3.608,66,1.215,67,2.869,68,3.217,69,3.081,70,2.869,72,0.595,82,1.129,83,3.671,86,0.866,91,1.26,97,3.455,98,2.939,99,4.737,100,4.737,101,6.093,102,5.816,103,3.455,104,3.455,105,3.455,106,4.737,107,4.03,108,1.419,109,4.067,110,1.918,111,2.864,112,3.455,113,1.975,114,1.704,115,3.455,116,1.491,117,3.455,118,3.455]],["title/injectables/ApiKeyHttpGuard.html",[32,0.649,119,2.189]],["body/injectables/ApiKeyHttpGuard.html",[0,0.139,3,0.253,4,0.253,5,0.223,8,0.6,10,2.394,11,2.173,13,0.38,15,1.723,16,0.553,17,0.023,18,1.079,21,0.751,24,0.455,28,0.253,30,0.016,31,0.016,32,0.92,34,1.424,35,3.493,37,2.648,38,3.394,39,2.857,41,3.728,42,3.394,43,3.579,44,1.111,45,3.823,46,3.394,47,1.189,48,2.54,50,1.33,51,0.92,52,1.588,53,1.044,54,0.751,55,1.044,56,3.394,57,3.394,58,3.728,60,3.101,61,4.08,62,3.761,63,3.101,64,3.101,65,3.101,66,1.044,67,2.964,68,3.394,69,2.983,70,2.465,71,1.189,72,0.645,73,1.982,74,2.138,75,1.723,79,1.424,80,1.723,81,2.814,82,1.044,83,2.54,84,2.814,85,2.814,86,1.253,91,1.33,119,3.101,120,3.182,121,3.761,122,3.74,123,3.74,124,3.74,125,3.761,126,3.74,127,3.74]],["title/injectables/ApiKeyTcpGuard.html",[32,0.649,128,2.016]],["body/injectables/ApiKeyTcpGuard.html",[0,0.14,1,2.329,3,0.254,4,0.254,5,0.224,8,0.601,10,2.396,11,2.174,13,0.381,15,1.73,16,0.554,17,0.023,18,1.081,21,0.753,24,0.455,28,0.254,30,0.016,31,0.016,32,0.922,34,1.429,35,3.499,37,2.655,38,3.403,39,2.864,41,3.734,42,3.403,43,3.584,44,1.113,45,3.83,46,3.403,47,1.193,48,2.549,50,1.333,51,0.922,52,1.592,53,1.047,54,0.753,55,1.047,56,3.403,57,3.403,58,3.734,60,3.109,61,3.403,62,3.77,63,3.109,64,3.109,65,3.109,66,1.047,67,2.968,68,3.403,69,2.655,70,2.472,71,1.193,72,0.647,79,1.429,80,1.73,81,2.825,82,1.047,83,2.549,84,2.825,85,2.825,86,0.941,91,1.333,121,3.77,128,2.864,129,3.194,130,3.109,131,3.754,132,3.754,133,3.754,134,3.194,135,1.792,136,3.754,137,3.754,138,5.011]],["title/modules/AppModule.html",[139,1.056,140,2.395]],["body/modules/AppModule.html",[0,0.148,3,0.269,4,0.269,5,0.237,17,0.024,18,0.686,24,0.527,28,0.269,30,0.017,31,0.017,71,1.264,72,0.686,79,1.514,80,1.833,91,1.059,110,1.611,139,1.559,140,4.844,141,1.611,142,2.247,143,3.385,144,3.385,145,4.067,146,2.882,147,3.747,148,4.067,149,3.747,150,4.067,151,2.568,152,1.963,153,1.963,154,3.979,155,3.075,156,3.979,157,3.385,158,3.385,159,2.469,160,3.385,161,2.994,162,3.979,163,3.979,164,2.274,165,3.385,166,3.231,167,3.979,168,3.385,169,3.979,170,3.979,171,2.994,172,5.207,173,3.979,174,2.994]],["title/modules/ClientsModule.html",[139,1.056,145,2.189]],["body/modules/ClientsModule.html",[0,0.151,3,0.274,4,0.274,5,0.242,17,0.024,24,0.499,28,0.274,30,0.017,31,0.017,40,2.003,71,1.676,72,0.7,79,1.545,80,1.871,91,1.08,130,2.519,139,1.58,141,1.644,142,2.277,145,4.305,146,2.845,151,2.602,152,2.003,153,2.003,155,2.795,164,2.321,171,3.97,175,3.454,176,4.06,177,3.454,178,5.71,179,5.71,180,5.71,181,5.71,182,4.06,183,3.273,184,3.583,185,1.102,186,3.016,187,4.06,188,2.003,189,3.583,190,2.321,191,4.213,192,4.06,193,4.06,194,3.055,195,4.06,196,4.06,197,3.055,198,3.97]],["title/modules/ConfigurationModule.html",[139,1.056,146,1.522]],["body/modules/ConfigurationModule.html",[0,0.082,3,0.149,4,0.149,5,0.131,10,0.788,15,1.014,16,0.243,17,0.024,18,0.718,23,1.785,24,0.449,28,0.149,30,0.011,31,0.011,51,0.405,54,0.331,71,2.017,72,0.379,73,1.166,74,1.947,75,1.014,79,0.838,86,1.345,91,1.725,107,3.545,108,1.02,110,1.379,111,1.805,139,1.02,141,0.891,142,1.47,146,2.928,149,3.067,151,1.68,152,1.086,153,1.086,155,1.805,157,1.872,160,1.872,161,1.656,168,1.872,171,4.831,174,4.21,183,2.113,185,0.712,188,1.086,190,1.947,191,4.36,194,4.21,197,4.21,199,1.872,200,2.201,201,1.872,202,1.872,203,4.76,204,4.918,205,4.76,206,4.76,207,4.76,208,4.76,209,4.918,210,4.918,211,4.76,212,4.918,213,4.76,214,3.682,215,1.656,216,7.101,217,4.167,218,2.201,219,2.201,220,1.872,221,1.872,222,2.201,223,3.406,224,1.258,225,1.495,226,1.872,227,1.656,228,1.656,229,1.872,230,1.57,231,6.063,232,2.201,233,3.406,234,2.201,235,2.201,236,4.21,237,1.872,238,2.201,239,2.201,240,2.201,241,3.406,242,2.201,243,4.167,244,2.201,245,2.201,246,2.201,247,2.201,248,2.201,249,2.201,250,1.872,251,2.201,252,2.201,253,2.201,254,2.201,255,2.201,256,2.201,257,2.201,258,4.167,259,2.201,260,2.898,261,1.656,262,2.201,263,2.201,264,2.201,265,2.201,266,2.201,267,2.201,268,2.201,269,0.699,270,2.201,271,2.201,272,2.201,273,3.406,274,2.201,275,2.201,276,2.201,277,2.201]],["title/classes/CreateUserDto.html",[0,0.131,278,1.19]],["body/classes/CreateUserDto.html",[0,0.209,2,1.831,3,0.251,4,0.251,5,0.222,8,0.446,13,0.377,14,2.014,16,0.62,17,0.023,18,1.108,19,2.584,21,0.843,23,1.413,24,0.453,25,4.22,27,2.521,28,0.251,30,0.016,31,0.016,51,0.915,54,0.747,67,3.171,224,2.122,278,1.677,279,5.097,280,2.793,281,1.893,282,4.231,283,1.575,284,3.808,285,4.074,286,4.241,287,3.712,288,3.712,289,4.231,290,4.231,291,5.469,292,5.469,293,3.712,294,4.973,295,4.973,296,3.712,297,3.712,298,3.158,299,4.973,300,3.712,301,4.231,302,5.097,303,5.99,304,3.712,305,3.712,306,4.973,307,3.712,308,4.973,309,2.793,310,4.231,311,2.793,312,3.377,313,5.097,314,3.712,315,4.973,316,4.22,317,3.712,318,3.712,319,4.973,320,3.712,321,3.712,322,3.712,323,4.973,324,3.712]],["title/injectables/GrpcUsersClient.html",[32,0.649,184,2.395]],["body/injectables/GrpcUsersClient.html",[0,0.074,3,0.135,4,0.135,5,0.119,8,0.582,10,1.131,11,1.004,13,0.203,14,1.279,15,2.233,16,0.597,17,0.024,18,1.055,21,0.886,24,0.47,28,0.135,29,1.455,30,0.01,31,0.01,32,0.581,34,0.76,40,2.76,44,0.702,47,1.004,50,1.184,51,0.892,52,1.004,53,1.013,54,0.774,55,1.013,66,1.297,71,0.635,72,0.344,73,1.059,74,1.142,75,0.921,76,3.911,77,1.357,78,1.357,79,0.76,80,0.921,82,1.127,86,1.534,91,1.042,108,2.039,113,1.142,114,0.986,116,2.329,135,1.83,184,3.022,185,1.341,186,3.292,188,0.986,230,3.066,269,1.54,278,1.635,281,1.694,283,1.594,325,4.527,326,1.357,327,2.687,328,2.329,329,3.916,330,3.877,331,1.802,332,1.279,333,2.195,334,1.279,335,1.802,336,1.7,337,4.45,338,3.158,339,1.455,340,2.687,341,2.687,342,2.376,343,4.21,344,3.786,345,1.998,346,1.805,347,1.7,348,2.087,349,2.478,350,1.998,351,1.279,352,1.363,353,1.279,354,1.558,355,1.998,356,2.112,357,1.942,358,1.998,359,1.558,360,1.673,361,1.558,362,1.558,363,2.73,364,1.558,365,1.998,366,1.279,367,1.558,368,1.961,369,1.998,370,2.659,371,1.998,372,2.376,373,1.7,374,1.7,375,1.279,376,2.358,377,1.998,378,1.7,379,1.7,380,2.687,381,1.998,382,1.959,383,1.7,384,1.673,385,1.7,386,1.357,387,2.376,388,1.142,389,1.998,390,1.503,391,1.998,392,1.998,393,5.396,394,1.998,395,0.986,396,1.059,397,4.384,398,3.242,399,1.998,400,4.384,401,1.998,402,1.7,403,1.998,404,0.809,405,1.998,406,1.998,407,1.998,408,1.7]],["title/controllers/GrpcUsersService.html",[388,2.016,409,1.522]],["body/controllers/GrpcUsersService.html",[0,0.094,3,0.172,4,0.172,5,0.152,8,0.305,11,0.807,13,0.258,16,0.503,17,0.024,19,2.614,21,0.853,24,0.484,28,0.172,30,0.012,31,0.012,33,1.452,40,1.874,44,0.844,47,0.807,50,1.344,51,1.044,52,0.807,53,1.055,54,0.759,55,1.055,66,1.352,71,0.807,72,0.438,82,1.185,86,0.637,91,1.51,108,2.085,110,1.538,116,1.096,135,1.964,185,1.129,188,1.253,230,2.097,269,0.807,278,1.823,281,1.732,283,1.611,328,1.096,331,2.045,332,1.538,333,2.491,334,1.843,335,2.045,339,1.17,346,2.172,348,2.297,349,2.621,351,1.538,352,1.639,353,1.538,356,2.106,357,1.535,359,1.874,360,2.013,361,1.874,362,1.874,363,3.006,366,1.538,368,1.732,375,1.538,376,3.203,384,2.013,386,1.725,388,2.172,395,1.253,396,1.346,398,1.346,404,1.029,409,2.179,410,1.346,411,3.993,412,2.161,413,2.601,414,6.542,415,2.54,416,2.54,417,2.858,418,2.54,419,2.54,420,2.858,421,2.54,422,2.858,423,2.54,424,2.161,425,2.161,426,3.232,427,3.232,428,1.253,429,1.346,430,1.17,431,2.013,432,1.346,433,1.576,434,1.911,435,2.161,436,2.357,437,2.161,438,2.161,439,2.161,440,2.161,441,2.013,442,2.161,443,1.911,444,2.161,445,2.161,446,2.161,447,1.911,448,2.161,449,2.54,450,1.911,451,2.013,452,1.452,453,1.452,454,1.911,455,2.161,456,2.161,457,1.911,458,2.161,459,2.161,460,2.161,461,2.54,462,2.54]],["title/modules/GuardsModule.html",[139,1.056,147,2.016]],["body/modules/GuardsModule.html",[0,0.159,3,0.288,4,0.288,5,0.255,10,2.149,11,1.907,17,0.023,24,0.494,28,0.288,30,0.017,31,0.017,33,4.047,72,0.736,119,4.393,128,4.047,139,1.632,141,1.729,142,2.351,146,2.883,147,4.096,151,2.688,152,2.105,153,2.105,155,2.887,164,2.44,183,3.381,190,3.115,440,3.631,463,3.631,464,3.631,465,3.631,466,4.268,467,4.268,468,4.268,469,3.631]],["title/classes/GuidDto.html",[0,0.131,376,1.869]],["body/classes/GuidDto.html",[0,0.22,2,2.398,3,0.329,4,0.329,5,0.29,8,0.584,13,0.493,14,2.393,16,0.538,17,0.023,18,1.018,19,2.24,21,0.731,24,0.447,25,4.446,26,4.136,27,3.301,28,0.329,29,2.24,30,0.019,31,0.019,281,2.249,312,4.012,357,2.289,376,3.131,470,4.136,471,5.909,472,4.861,473,4.861,474,4.446,475,3.666,476,4.012,477,4.861]],["title/injectables/HashPipe.html",[32,0.649,441,1.869]],["body/injectables/HashPipe.html",[0,0.143,3,0.26,4,0.26,5,0.229,8,0.685,13,0.39,16,0.563,17,0.023,21,0.765,23,2.471,24,0.432,28,0.26,30,0.016,31,0.016,32,0.936,34,1.462,44,1.13,47,1.617,50,1.354,51,0.936,52,1.617,53,1.063,54,0.765,55,1.063,66,1.063,71,1.221,72,0.662,79,1.462,80,1.77,82,1.063,86,0.963,91,1.022,114,1.895,116,1.658,135,1.221,236,4.754,237,4.328,285,3.919,286,4.29,310,5.166,328,1.658,339,2.344,441,3.217,447,3.828,478,4.853,479,3.268,480,3.471,481,4.885,482,6.073,483,3.841,484,3.841,485,5.704,486,3.156,487,3.455,488,5.087,489,3.841,490,2.695,491,5.166,492,5.087,493,3.841,494,3.268,495,3.841,496,5.087,497,3.841,498,5.087,499,5.087,500,3.841]],["title/controllers/HealthController.html",[409,1.522,501,2.395]],["body/controllers/HealthController.html",[0,0.134,3,0.244,4,0.244,5,0.216,8,0.434,10,1.293,11,1.148,13,0.367,15,2.249,17,0.024,18,0.953,19,1.664,21,0.543,24,0.448,28,0.244,30,0.016,31,0.016,44,1.085,47,1.148,51,0.665,52,1.148,61,2.452,63,2.241,66,1.02,71,1.148,72,0.622,73,1.913,74,2.064,75,1.664,79,1.375,80,1.664,82,1.332,86,0.905,91,0.961,108,1.462,116,2.387,125,2.718,185,1.155,225,2.452,230,2.249,260,4.153,269,1.966,301,4.153,328,2.752,333,2.408,339,1.664,343,3.673,352,2.67,359,2.408,361,3.381,362,3.146,390,2.718,409,2.387,410,1.913,486,2.241,501,3.755,502,3.073,503,5.53,504,3.611,505,3.611,506,5.53,507,4.153,508,5.924,509,5.924,510,5.924,511,3.611,512,2.718,513,3.611,514,3.611,515,2.452,516,4.882,517,4.882,518,4.882,519,3.073,520,3.611,521,3.611,522,3.611,523,3.073,524,3.611,525,4.882,526,3.611,527,3.611,528,2.452,529,3.611,530,3.611]],["title/modules/HealthModule.html",[139,1.056,148,2.189]],["body/modules/HealthModule.html",[0,0.18,3,0.326,4,0.326,5,0.288,17,0.023,24,0.513,28,0.326,30,0.019,31,0.019,72,0.832,139,1.762,141,1.954,142,2.539,146,2.972,148,4.273,151,2.902,152,2.381,153,2.381,155,3.117,164,2.759,410,3.117,501,4.309,512,3.631,531,4.826,532,4.826,533,4.826,534,5.882,535,4.106,536,5.882,537,4.826]],["title/injectables/HttpExceptionInterceptor.html",[32,0.649,436,2.189]],["body/injectables/HttpExceptionInterceptor.html",[0,0.154,3,0.28,4,0.28,5,0.247,8,0.642,13,0.421,16,0.458,17,0.023,21,0.623,24,0.448,28,0.28,30,0.017,31,0.017,32,0.984,34,1.577,41,3.88,44,1.188,51,0.763,53,0.866,54,0.623,55,0.866,58,3.88,64,3.317,65,3.317,66,1.117,72,0.714,82,1.117,90,3.526,91,1.103,109,4.871,113,2.369,114,2.044,188,2.044,436,3.317,538,4.549,539,3.526,540,5.346,541,5.346,542,6.253,543,6.473,544,6.253,545,5.346,546,4.988,547,6.253,548,4.144,549,5.346,550,5.346,551,5.346,552,5.346,553,5.346,554,4.144,555,4.144,556,4.144,557,3.317,558,4.023,559,4.144]],["title/interfaces/IGrpcUsersService.html",[370,2.395,560,1.428]],["body/interfaces/IGrpcUsersService.html",[3,0.171,4,0.171,5,0.151,8,0.705,10,2.315,11,2.054,13,0.256,16,0.626,17,0.023,21,0.851,24,0.408,28,0.171,30,0.012,31,0.012,40,3.045,44,0.841,50,1.34,51,0.696,53,1.183,54,0.851,55,1.183,66,1.35,69,3.425,76,4.936,77,1.716,78,1.716,82,1.35,108,1.936,109,4.918,113,1.445,135,2.077,185,0.791,269,1.601,278,1.819,281,0.962,283,1.602,331,1.533,332,1.533,333,1.867,334,1.533,335,2.04,346,2.163,348,2.293,349,2.618,351,1.533,352,1.633,353,1.533,356,2.102,357,1.53,359,1.867,360,2.005,361,1.867,362,1.867,363,3,366,1.533,368,1.727,370,2.57,375,1.533,376,3.199,395,1.247,396,1.339,404,1.023,417,2.848,420,2.848,422,2.848,428,1.247,429,1.339,434,1.902,560,1.837,561,1.445,562,3.642,563,2.15,564,2.527,565,6.464,566,3.22,567,2.527,568,2.527,569,3.784,570,2.527,571,3.784,572,2.527,573,2.527]],["title/interfaces/ILoggingService.html",[560,1.428,574,2.189]],["body/interfaces/ILoggingService.html",[3,0.315,4,0.315,5,0.279,8,0.692,9,3.295,13,0.474,16,0.516,17,0.023,18,1.178,21,0.702,28,0.389,30,0.018,31,0.018,44,1.281,53,0.975,54,0.702,55,0.975,66,0.975,82,1.204,86,1.17,269,1.831,557,4.239,560,1.89,561,2.668,574,3.576,575,3.512,576,4.337,577,4.903,578,4.903,579,5.813,580,4.668,581,4.903,582,5.555,583,3.17,584,3.576,585,3.576]],["title/interfaces/IUsersClient.html",[382,2.189,560,1.428]],["body/interfaces/IUsersClient.html",[3,0.2,4,0.2,5,0.177,8,0.652,9,2.428,13,0.3,16,0.601,17,0.023,18,1.108,21,0.927,24,0.376,28,0.2,29,1.363,30,0.014,31,0.014,44,0.944,50,1.445,51,0.782,53,1.135,54,0.816,55,1.135,66,1.406,82,1.202,108,2.129,135,2.006,185,1.135,186,3.105,278,1.94,281,1.126,283,1.661,330,4.506,331,2.2,332,1.72,333,2.679,334,1.72,335,2.2,346,2.428,348,2.425,349,2.702,351,1.72,352,1.833,353,1.72,354,2.095,356,2.336,357,2.02,359,2.095,360,2.251,361,2.095,362,2.095,363,3.173,364,2.095,366,1.72,367,2.095,368,2.189,375,1.72,382,2.635,395,1.459,396,1.567,404,1.198,409,1.833,428,1.459,429,1.567,430,1.363,453,2.428,560,2.013,561,1.691,562,3.916,586,2.517,587,2.958,588,3.196,589,2.958,590,2.958,591,2.958,592,2.958,593,2.958,594,2.958]],["title/interfaces/IUsersDatabaseService.html",[560,1.428,595,2.189]],["body/interfaces/IUsersDatabaseService.html",[3,0.204,4,0.204,5,0.18,8,0.695,13,0.306,16,0.606,17,0.023,18,1.112,21,0.871,24,0.228,28,0.291,30,0.014,31,0.014,44,0.956,50,1.457,51,0.792,53,1.144,54,0.823,55,1.144,66,1.368,67,2.972,70,3.23,82,1.21,86,0.755,108,2.098,110,2.218,111,2.902,135,1.914,185,1.144,283,1.707,331,2.218,332,1.742,334,1.742,335,2.218,348,2.652,349,2.652,351,1.742,353,1.742,354,2.122,356,2.271,357,2.208,364,2.122,366,1.742,367,2.122,404,2.218,430,1.388,486,1.869,490,2.28,528,4.091,560,1.22,561,1.722,562,3.738,595,2.67,596,2.266,597,3.661,598,3.012,599,4.359,600,3.012,601,2.922,602,3.012,603,3.012,604,3.238,605,3.012,606,3.238,607,2.562,608,2.045,609,2.67]],["title/interfaces/IUsersService.html",[431,1.869,560,1.428]],["body/interfaces/IUsersService.html",[3,0.207,4,0.207,5,0.182,8,0.699,13,0.31,16,0.61,17,0.023,18,1.116,21,0.876,24,0.383,28,0.294,30,0.014,31,0.014,39,1.748,44,0.966,50,1.467,51,1.015,53,1.152,54,0.876,55,1.152,66,1.33,82,1.217,86,0.767,108,2.067,135,1.851,185,1.152,269,1.382,278,2.042,283,1.693,331,2.233,332,1.761,334,1.761,335,2.36,348,2.452,349,2.452,351,2.233,353,1.761,354,2.146,356,2.353,357,2.147,364,2.146,366,1.761,367,2.146,368,2.423,375,1.761,404,1.761,413,2.486,428,1.508,429,1.62,430,1.409,431,2.305,432,2.305,452,2.486,480,2.894,486,1.897,490,2.922,560,1.238,561,1.748,608,2.076,610,2.301,611,3.701,612,3.273,613,3.058,614,3.058,615,3.058,616,3.058,617,3.058,618,2.602,619,4.957,620,2.301,621,4.957,622,2.301,623,4.307,624,2.602]],["title/modules/LoggingModule.html",[139,1.056,149,2.016]],["body/modules/LoggingModule.html",[0,0.192,3,0.349,4,0.349,5,0.308,17,0.023,24,0.494,28,0.349,30,0.02,31,0.02,72,0.89,139,1.835,141,2.091,149,3.502,183,3.204,190,2.952,191,3.506,198,3.885,585,4.053,625,5.163,626,4.393,627,3.801,628,5.163]],["title/injectables/LoggingService.html",[32,0.649,627,2.189]],["body/injectables/LoggingService.html",[0,0.169,3,0.306,4,0.306,5,0.27,8,0.679,9,3.234,13,0.46,16,0.501,17,0.023,18,1.169,21,0.681,24,0.428,28,0.306,29,2.087,30,0.018,31,0.018,32,1.041,34,1.724,44,1.257,53,0.946,54,0.681,55,0.946,66,0.946,72,0.781,82,1.182,114,2.235,269,1.798,557,4.208,574,3.51,576,4.257,577,4.813,578,4.813,579,5.77,581,4.813,582,5.497,583,3.076,584,3.51,626,3.854,627,3.51,629,3.854,630,4.53,631,4.53,632,4.53]],["title/modules/PipesModule.html",[139,1.056,166,2.189]],["body/modules/PipesModule.html",[0,0.18,3,0.328,4,0.328,5,0.289,17,0.023,24,0.481,28,0.328,30,0.019,31,0.019,72,0.836,139,1.767,141,1.964,142,2.546,146,2.976,151,2.91,152,2.392,153,2.392,155,3.126,164,2.772,166,4.37,183,3.009,190,3.373,441,3.698,443,3.649,487,3.293,633,4.126,634,4.849,635,4.126,636,4.849]],["title/injectables/SecretManagerService.html",[32,0.649,214,2.189]],["body/injectables/SecretManagerService.html",[0,0.11,3,0.199,4,0.199,5,0.176,8,0.596,10,1.943,11,1.724,13,0.299,14,1.717,16,0.549,17,0.023,18,1.123,21,0.864,23,1.613,24,0.411,28,0.199,30,0.014,31,0.014,32,0.78,34,1.123,44,0.942,47,1.347,51,0.913,52,1.347,53,0.885,54,0.899,55,0.885,66,1.25,67,2.676,70,2.676,71,0.937,72,0.508,75,1.359,79,1.123,82,0.885,86,1.244,91,1.443,108,1.792,116,1.829,185,0.885,186,3.285,214,3.366,220,2.509,221,5.767,230,2.959,269,1.347,328,2.722,339,1.953,342,4.082,372,3.19,398,1.563,475,3.565,490,2.874,515,3.683,557,2.63,574,3.366,576,3.19,585,1.83,588,4.082,627,3.078,637,4.501,638,2.219,639,4.888,640,4.239,641,4.888,642,5.424,643,5.424,644,4.962,645,2.949,646,4.962,647,2.949,648,2.949,649,5.424,650,2.949,651,2.949,652,2.949,653,5.424,654,4.962,655,5.424,656,2.949,657,2.509,658,2.949,659,2.509,660,2.949,661,2.509,662,2.509,663,2.509,664,2.509,665,2.509,666,2.949,667,2.949,668,2.949,669,2.949,670,3.606,671,2.949,672,2.509,673,2.949,674,2.949,675,2.509,676,2.509,677,2.949,678,2.949]],["title/injectables/TcpUsersClient.html",[32,0.649,189,2.395]],["body/injectables/TcpUsersClient.html",[0,0.073,3,0.132,4,0.132,5,0.117,8,0.575,10,1.111,11,0.986,13,0.198,14,1.256,15,2.699,16,0.53,17,0.024,18,1.048,21,0.88,23,0.743,24,0.433,28,0.132,29,0.9,30,0.01,31,0.01,32,0.571,34,0.743,44,0.689,47,0.986,50,1.275,51,0.809,52,0.986,53,1.001,54,0.72,55,1.001,66,1.322,71,0.621,72,0.337,79,0.743,80,0.9,82,1.117,86,1.391,91,1.169,108,2.047,110,1.562,111,1.643,113,1.116,114,0.963,116,1.339,130,2.726,135,1.862,185,1.322,186,3.53,188,0.963,189,2.984,230,3.101,269,0.986,278,1.617,281,0.743,283,1.602,326,1.326,327,2.639,328,2.395,330,3.839,331,1.941,332,1.562,333,2.364,334,1.562,335,1.941,336,1.662,339,1.429,340,3.738,341,2.639,343,3.839,344,2.639,346,1.773,347,1.662,348,2.066,349,2.464,351,1.256,352,1.339,353,1.256,354,1.53,356,2.098,357,1.928,359,1.53,360,1.643,361,1.53,362,1.53,363,2.703,364,1.53,366,1.256,367,1.53,368,1.824,373,2.639,374,1.662,375,1.256,378,1.662,379,1.662,380,1.662,382,1.924,383,1.662,384,1.643,385,1.662,386,1.326,390,1.47,395,0.963,396,1.035,397,4.078,398,3.469,400,4.078,402,1.662,404,0.791,408,1.662,523,4.341,588,2.334,670,1.662,679,5.087,680,3.858,681,4.394,682,4.394,683,3.102,684,3.102,685,1.953,686,1.953,687,3.102,688,4.394,689,1.953,690,1.953,691,1.953,692,1.953,693,1.953,694,3.102,695,1.953,696,5.102,697,5.102,698,4.341,699,3.858,700,1.953,701,1.953]],["title/classes/UpdateUserDto.html",[0,0.131,368,1.343]],["body/classes/UpdateUserDto.html",[0,0.193,2,2.56,3,0.351,4,0.351,5,0.31,8,0.623,17,0.023,24,0.465,28,0.351,30,0.02,31,0.02,42,3.524,50,1.381,224,2.967,278,1.75,280,3.905,281,2.339,283,1.451,368,2.339,375,2.102,702,4.416,703,6.145,704,5.19,705,5.19]],["title/classes/User.html",[0,0.131,283,0.833]],["body/classes/User.html",[0,0.141,2,1.866,3,0.256,4,0.256,5,0.226,8,0.454,9,2.879,13,0.384,14,2.039,16,0.715,17,0.024,18,1.155,19,2.781,21,0.907,23,2.297,24,0.381,28,0.383,30,0.016,31,0.016,54,0.757,86,0.948,110,2.817,159,2.347,185,1.261,283,1.631,284,3.844,285,3.9,286,4.268,356,1.804,357,1.909,487,4.099,515,2.569,706,2.569,707,4.73,708,6.036,709,5.135,710,3.783,711,3.789,712,3.783,713,3.783,714,4.284,715,3.783,716,6.285,717,3.783,718,4.26,719,2.846,720,2.846,721,6.036,722,2.569,723,3.218]],["title/classes/User-1.html",[0,0.11,95,2.003,283,0.697]],["body/classes/User-1.html",[0,0.172,2,1.644,3,0.225,4,0.225,5,0.199,8,0.747,9,2.642,13,0.338,14,1.872,16,0.665,17,0.024,18,1.121,19,2.639,21,0.904,23,2.18,24,0.455,28,0.225,30,0.015,31,0.015,47,1.059,51,0.851,52,1.469,53,0.696,54,0.904,55,0.696,82,0.696,86,0.836,135,1.82,224,1.906,278,1.932,283,1.686,284,3.602,285,3.733,286,4.085,289,3.932,290,3.932,298,3.932,311,2.509,313,4.513,316,3.478,339,2.13,356,2.051,357,1.789,375,1.35,428,1.644,474,2.509,480,2.642,487,3.89,583,2.264,709,4.873,711,4.31,714,3.932,724,2.836,725,4.622,726,4.622,727,5.296,728,3.334,729,4.622,730,3.334,731,6.016,732,3.334,733,4.622,734,4.622,735,4.622,736,4.622,737,4.622,738,3.334,739,3.334,740,4.622,741,2.509,742,3.334,743,3.334,744,3.334,745,3.334,746,3.334,747,3.334,748,3.334,749,3.334]],["title/classes/UserListDto.html",[0,0.131,384,1.869]],["body/classes/UserListDto.html",[0,0.184,2,2.446,3,0.335,4,0.335,5,0.296,8,0.595,13,0.503,14,2.421,16,0.548,17,0.023,21,0.745,24,0.375,28,0.335,29,2.285,30,0.019,31,0.019,185,1.425,281,2.276,283,1.611,352,2.58,384,3.168,430,2.285,601,4.06,750,5.087,751,4.218,752,5.979,753,4.958,754,5.979]],["title/injectables/UsersDatabaseService.html",[32,0.649,755,2.395]],["body/injectables/UsersDatabaseService.html",[0,0.087,3,0.158,4,0.158,5,0.14,8,0.66,13,0.238,16,0.577,17,0.024,18,1.041,21,0.826,24,0.416,28,0.158,30,0.011,31,0.011,32,0.657,34,0.891,44,0.793,47,1.135,50,1.463,51,1.112,52,1.135,53,1.09,54,0.784,55,1.09,66,1.288,67,2.712,70,3.04,72,0.403,82,1.149,86,1.308,91,1.463,95,2.425,108,2.03,110,1.962,111,2.567,114,1.154,135,1.747,159,1.452,185,1.149,230,3.023,283,1.669,328,1.01,331,1.962,332,1.446,334,1.446,335,1.962,348,2.496,349,2.574,351,1.446,353,1.446,354,1.761,356,2.112,357,2.17,364,1.761,366,1.446,367,1.761,398,2.764,404,1.962,430,1.078,453,2.041,490,1.892,528,4.004,558,3.258,595,2.216,597,3.038,599,3.926,601,2.425,604,2.687,606,2.687,620,2.687,672,3.038,675,3.038,676,4.122,718,3.258,719,1.761,720,1.761,727,1.991,741,1.761,755,3.29,756,4.866,757,1.991,758,2.34,759,5.498,760,2.34,761,4.33,762,4.845,763,2.34,764,2.34,765,2.34,766,2.34,767,2.34,768,2.34,769,1.761,770,1.761,771,2.34,772,2.34,773,2.34,774,4.33,775,3.571,776,3.571,777,3.571,778,3.571,779,2.34,780,2.34,781,2.34,782,2.34,783,3.571,784,2.34,785,2.34,786,3.571,787,2.34,788,2.34,789,2.34]],["title/controllers/UsersHttpController.html",[409,1.522,790,2.395]],["body/controllers/UsersHttpController.html",[0,0.063,3,0.114,4,0.114,5,0.101,8,0.852,13,0.171,16,0.619,17,0.023,18,0.937,19,2.199,21,0.717,24,0.381,28,0.114,30,0.009,31,0.009,44,0.612,47,0.536,50,1.27,51,1.029,52,0.536,53,0.843,54,0.757,55,0.843,60,1.709,66,1.196,69,2.784,71,0.536,72,0.291,73,0.893,74,0.964,75,0.777,82,1.052,91,1.183,108,1.922,116,0.727,135,1.857,185,1.136,224,0.964,225,1.145,250,2.344,269,1.11,278,1.698,281,1.048,283,1.665,284,2.739,285,2.503,316,3.591,328,0.727,331,1.634,332,1.415,333,1.99,334,1.415,335,2.04,339,0.777,342,4.208,348,1.933,349,2.265,351,1.116,352,1.189,353,1.116,354,0.832,356,2.33,357,2.063,359,1.99,360,2.137,361,1.99,362,1.723,363,2.356,364,0.832,366,1.801,367,0.832,368,2.069,375,1.116,395,1.359,396,1.46,404,1.801,409,1.507,410,0.893,411,3.42,413,1.997,428,0.832,429,0.893,430,0.777,431,1.46,432,0.893,433,1.046,450,1.268,451,1.46,452,0.964,453,0.964,454,1.268,457,1.268,475,2.167,476,2.372,480,3.003,490,2.137,507,5.46,546,1.268,584,1.709,599,2.073,601,1.871,604,1.268,606,2.073,612,1.268,622,3.035,790,1.871,791,1.434,792,1.686,793,4.034,794,2.755,795,2.755,796,5.592,797,4.034,798,5.254,799,4.034,800,4.034,801,1.686,802,1.686,803,1.686,804,5.592,805,2.755,806,1.686,807,4.773,808,1.686,809,1.686,810,4.773,811,3.493,812,4.773,813,4.773,814,4.773,815,4.773,816,4.773,817,5.036,818,2.755,819,4.773,820,1.686,821,1.686,822,1.686,823,2.755,824,1.686,825,1.686,826,1.686,827,1.686,828,1.686,829,1.686,830,1.686,831,1.686,832,2.755,833,1.686,834,4.034,835,1.686,836,5.036,837,4.034,838,6.464,839,1.686,840,1.686,841,1.686,842,1.686,843,4.034,844,1.686,845,1.686,846,1.686,847,3.493,848,1.686,849,1.686,850,1.686,851,1.686,852,1.686,853,1.686,854,1.434,855,1.434,856,1.434,857,1.434,858,1.434,859,1.145]],["title/modules/UsersModule.html",[139,1.056,150,2.189]],["body/modules/UsersModule.html",[0,0.152,3,0.277,4,0.277,5,0.244,17,0.024,24,0.533,28,0.277,30,0.017,31,0.017,54,0.615,72,0.705,139,1.589,141,1.658,142,2.289,146,2.851,147,3.776,150,4.229,151,2.616,152,2.019,153,2.019,155,2.81,158,3.482,159,2.54,164,2.34,165,3.482,185,0.855,190,2.34,191,3.602,198,3.991,283,0.966,388,3.363,410,2.81,432,2.81,433,2.54,451,2.81,609,3.291,707,3.08,722,3.602,741,3.08,755,3.602,769,3.08,770,3.08,790,3.995,860,4.093,861,4.093,862,4.093,863,3.995,864,4.093,865,5.884,866,4.093,867,4.093,868,4.093,869,4.093,870,4.093,871,4.093]],["title/injectables/UsersService.html",[32,0.649,451,1.869]],["body/injectables/UsersService.html",[0,0.091,3,0.166,4,0.166,5,0.146,8,0.672,13,0.249,16,0.589,17,0.024,18,1.055,21,0.841,23,1.888,24,0.424,28,0.166,30,0.012,31,0.012,32,0.68,34,0.932,39,1.4,44,0.821,47,1.175,50,1.32,51,1.182,52,1.175,53,1.112,54,0.8,55,1.112,66,1.249,71,0.778,72,0.422,82,1.169,86,1.403,91,1.185,108,1.997,110,0.992,111,1.959,114,1.208,116,1.057,135,1.846,185,1.036,230,2.959,269,1.576,278,1.887,283,1.663,328,1.057,331,2.008,332,1.497,334,1.497,335,2.156,348,2.266,349,2.7,351,2.008,353,1.497,354,1.823,356,2.234,357,2.017,364,1.823,366,1.497,367,1.823,368,2.276,372,2.782,375,1.497,398,2.628,404,1.497,413,2.113,428,1.208,429,1.298,430,1.129,431,1.959,433,1.52,451,2.628,452,2.113,480,2.545,490,2.628,528,2.51,558,4.005,595,3.077,609,1.52,611,3.145,612,2.782,619,4.528,620,3.35,621,4.528,622,1.843,623,4.942,624,3.788,769,1.843,770,1.843,872,2.084,873,2.45,874,2.45,875,3.697,876,4.452,877,2.45,878,2.45,879,2.45,880,2.45,881,2.45,882,2.45,883,2.45,884,2.45,885,2.45,886,2.45,887,4.452,888,2.45,889,2.45,890,2.45,891,2.45]],["title/controllers/UsersTcpController.html",[409,1.522,863,2.395]],["body/controllers/UsersTcpController.html",[0,0.089,1,3.684,3,0.162,4,0.162,5,0.143,8,0.287,11,0.761,13,0.243,16,0.265,17,0.024,19,2.556,21,0.834,24,0.484,28,0.162,30,0.012,31,0.012,44,0.807,47,0.761,50,1.476,51,0.97,52,0.761,53,1.101,54,0.792,55,1.101,66,1.335,71,0.761,72,0.413,82,1.159,86,0.6,91,1.402,108,2.055,110,1.471,116,1.033,128,1.368,130,2.254,134,2.036,135,1.97,185,1.101,188,1.181,230,2.023,269,0.761,278,1.481,281,1.671,283,1.598,328,1.033,331,1.985,332,1.985,333,2.736,334,2.134,335,2.246,339,1.103,346,2.077,348,2.246,349,2.587,351,1.471,352,1.568,353,1.471,356,2.064,357,1.481,359,1.792,360,1.925,361,1.792,362,1.792,363,3.054,366,1.471,368,1.671,375,1.471,376,2.597,384,1.925,386,1.625,395,1.181,396,1.268,398,1.268,404,0.969,409,2.115,410,1.268,411,3.914,413,2.51,417,2.734,420,2.734,422,2.734,424,2.036,425,2.036,426,3.091,427,3.091,428,1.181,429,1.268,430,1.103,431,1.925,432,1.268,433,1.485,434,1.801,435,2.036,436,2.254,437,2.036,438,2.036,439,2.036,441,1.925,442,2.036,443,1.801,444,2.036,445,2.036,446,2.036,447,1.801,448,2.036,450,1.801,451,1.925,452,1.368,453,1.368,454,1.801,455,2.036,456,2.036,457,1.801,458,2.036,459,2.036,460,2.036,469,2.036,546,2.734,566,3.091,584,2.254,698,4.719,854,3.091,855,3.091,856,3.091,857,3.091,858,3.091,859,1.625,863,2.467,892,2.036,893,5.547,894,2.394,895,2.394,896,2.394,897,2.394,898,2.394,899,2.394,900,5.764,901,2.394,902,2.394,903,2.394,904,2.394]],["title/coverage.html",[905,4.087]],["body/coverage.html",[0,0.233,1,1.939,5,0.186,6,2.659,7,2.659,11,1.628,16,0.346,17,0.023,30,0.014,31,0.014,32,1.228,33,1.786,35,3.455,36,2.659,37,1.656,40,1.541,43,1.786,51,0.575,98,2.659,119,1.939,120,2.659,128,1.786,129,2.659,184,2.122,185,1.07,189,2.122,214,1.939,215,2.351,228,2.351,278,1.054,279,2.659,280,3.324,283,1.043,312,2.122,325,3.324,326,3.479,368,1.189,370,2.122,376,1.656,382,1.939,384,1.656,387,2.351,388,1.786,409,2.403,411,3.479,412,2.659,431,1.656,432,1.656,436,1.939,441,1.656,451,1.656,470,2.659,478,2.659,479,2.659,501,2.122,502,2.659,519,2.659,538,2.659,539,2.659,560,2.379,562,3.455,563,2.659,574,1.939,575,3.324,585,1.939,586,2.659,595,1.939,596,3.324,609,1.939,610,3.324,627,1.939,629,2.659,637,2.351,638,2.351,679,2.659,702,2.659,706,2.999,722,2.122,724,2.659,750,2.659,751,2.659,755,2.122,756,2.659,757,2.659,790,2.122,791,2.659,859,4.141,863,2.122,872,2.659,892,2.659,905,2.659,906,3.125,907,3.125,908,7.281,909,4.417,910,6.268,911,6.842,912,5.568,913,5.568,914,4.417,915,6.268,916,2.659,917,2.659,918,2.659,919,6.098,920,3.125,921,3.125,922,2.659,923,2.659,924,4.737,925,4.737,926,2.659,927,2.659,928,2.659,929,2.659,930,3.125,931,3.125]],["title/dependencies.html",[142,1.83,261,2.22]],["body/dependencies.html",[0,0.212,17,0.024,27,3.104,30,0.018,31,0.018,72,0.788,76,3.104,77,3.104,78,3.104,113,2.613,142,1.973,159,2.836,161,3.44,188,2.255,224,2.613,311,3.44,474,3.44,494,3.889,512,3.44,535,3.889,639,3.889,641,3.889,657,3.889,719,3.44,932,4.572,933,4.572,934,4.572,935,4.572,936,4.572,937,4.572,938,4.572,939,4.572,940,6.482,941,4.572,942,4.572,943,4.572,944,4.572,945,4.572,946,4.572,947,4.572,948,4.572,949,4.572,950,4.572,951,4.572,952,4.572,953,4.572,954,4.572,955,4.572,956,4.572,957,4.572,958,4.572,959,4.572,960,4.572,961,4.572,962,4.572,963,4.572,964,4.572,965,4.572,966,4.572]],["title/miscellaneous/enumerations.html",[967,1.455,968,3.607]],["body/miscellaneous/enumerations.html",[10,1.552,11,1.377,13,0.44,17,0.023,23,2.769,30,0.018,31,0.018,69,2.296,73,2.915,75,2.535,79,2.094,125,3.261,637,3.261,638,4.14,659,3.687,661,4.68,662,5.142,663,3.687,664,5.142,665,3.687,967,2.137,968,3.687,969,4.333,970,5.501,971,4.333,972,4.333,973,4.333,974,4.333,975,4.333,976,4.333,977,5.501,978,5.501,979,5.501,980,5.501,981,5.501,982,5.501,983,5.501,984,5.501,985,5.501,986,5.501,987,5.501,988,5.501,989,5.501,990,5.501,991,5.501,992,5.501]],["title/miscellaneous/functions.html",[967,1.455,993,3.607]],["body/miscellaneous/functions.html",[8,0.712,13,0.367,16,0.722,17,0.022,18,1.216,23,1.86,29,2.252,30,0.016,31,0.016,40,1.785,50,0.963,51,0.666,53,1.293,54,1.01,55,1.293,66,1.238,70,1.785,108,1.084,110,1.465,111,2.59,121,2.722,130,2.245,135,1.15,186,2.794,236,4.801,281,2.429,282,3.078,291,4.158,292,4.158,302,4.709,309,4.659,352,1.561,395,1.785,480,2.794,481,3.678,491,3.078,557,3.678,583,2.457,584,3.033,608,3.319,859,3.319,916,3.078,917,4.709,922,3.078,923,4.158,924,3.078,925,5.268,926,4.158,927,4.158,928,4.158,929,4.158,967,1.785,993,3.078,994,3.618,995,3.618,996,5.928,997,3.618,998,3.618,999,4.888,1000,3.618,1001,5.928,1002,3.618,1003,3.618,1004,3.618,1005,3.618,1006,3.618,1007,5.535,1008,3.618,1009,3.618,1010,3.618,1011,6.381,1012,4.888,1013,4.709,1014,5.928,1015,4.158,1016,3.618,1017,3.618,1018,6.192,1019,4.888,1020,3.618,1021,3.618,1022,3.618,1023,3.618,1024,3.618]],["title/index.html",[13,0.358,1025,3.001]],["body/index.html",[2,1.625,17,0.023,30,0.015,31,0.015,33,3.637,34,1.254,37,1.746,95,2.238,119,3.948,128,3.637,140,4.684,141,1.334,142,1.978,143,2.804,144,2.804,145,4.089,146,3.097,147,3.965,148,3.717,149,3.258,150,3.948,151,2.261,152,1.625,153,1.625,166,3.848,174,4.289,175,2.804,177,2.804,178,4.849,179,4.849,180,4.849,181,4.849,194,4.289,197,4.289,199,2.804,201,2.804,202,2.804,203,4.849,204,4.849,205,4.849,206,4.849,207,4.849,208,4.849,209,4.849,210,4.849,211,4.849,212,4.849,213,4.849,214,3.271,410,1.746,441,2.793,463,2.804,464,2.804,465,2.804,476,2.238,561,1.884,633,2.804,635,2.804,1025,2.804,1026,2.804,1027,3.295,1028,3.295,1029,2.804]],["title/modules.html",[141,1.946]],["body/modules.html",[17,0.019,30,0.019,31,0.019,140,3.47,141,2.07,145,3.171,146,2.205,147,2.921,148,3.171,149,2.921,150,3.171,166,3.171,1030,7.054,1031,7.054,1032,7.054,1033,7.11,1034,5.11,1035,5.11]],["title/properties.html",[14,1.717,261,2.22]],["body/properties.html",[8,0.65,14,2.193,17,0.023,30,0.02,31,0.02,185,1.131,269,1.721,413,3.096,452,3.096,453,3.096,475,3.36,1036,5.416,1037,5.416,1038,5.416,1039,5.416,1040,5.416,1041,5.416]],["title/miscellaneous/typealiases.html",[967,1.455,1042,4.24]],["body/miscellaneous/typealiases.html",[13,0.56,16,0.705,17,0.02,30,0.02,31,0.02,185,1.153,706,3.749,718,4.154,720,4.794,967,2.723,1043,5.521,1044,4.697]],["title/miscellaneous/variables.html",[227,3.19,967,1.455]],["body/miscellaneous/variables.html",[13,0.392,16,0.719,17,0.023,18,1.091,23,2.524,29,3.056,30,0.016,31,0.016,40,1.906,54,0.767,75,2.353,185,1.271,215,2.907,225,2.623,226,3.287,227,3.843,228,3.843,229,3.287,269,1.228,309,4.893,312,3.885,325,2.907,326,3.468,387,3.843,388,2.208,432,3.031,475,2.397,476,2.623,481,2.907,486,3.549,515,2.623,562,2.397,575,2.907,585,3.549,596,3.843,607,4.345,608,3.885,609,3.549,610,2.907,618,3.287,706,2.623,707,2.907,711,3.843,722,3.468,723,3.287,918,3.287,967,1.906,1013,3.287,1015,3.287,1026,3.287,1029,3.287,1044,3.287,1045,3.863,1046,3.863,1047,3.863,1048,3.863,1049,3.863,1050,3.863,1051,5.721,1052,3.863,1053,3.863,1054,5.721,1055,3.863,1056,3.863,1057,5.107,1058,3.863,1059,3.863,1060,3.863,1061,5.107,1062,3.863,1063,3.863,1064,3.863,1065,3.863,1066,3.863,1067,3.863,1068,3.863]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0.0.0.0",{"_index":277,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.0.0.0:${port",{"_index":266,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.1.0",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":95,"title":{"classes/User-1.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/UsersDatabaseService.html":{},"index.html":{}}}],["1.0.0",{"_index":1036,"title":{},"body":{"properties.html":{}}}],["1.1.19",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1027,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":778,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["2.2.0",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":804,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["201",{"_index":794,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["2048",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":734,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":816,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4",{"_index":476,"title":{},"body":{"classes/GuidDto.html":{},"controllers/UsersHttpController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":798,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4027",{"_index":735,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":796,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["404",{"_index":819,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["409",{"_index":800,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4096",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":814,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["5",{"_index":1029,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["6.1.2",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1028,"title":{},"body":{"index.html":{}}}],["7.2.0",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1026,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":813,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["ab9d",{"_index":815,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["abstract",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["access",{"_index":342,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{}}}],["accessing",{"_index":372,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["addapikey",{"_index":272,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["address",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/HealthController.html":{}}}],["addtag('users",{"_index":271,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["aliases",{"_index":1043,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":622,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":10,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":662,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["apikeydto",{"_index":1,"title":{"classes/ApiKeyDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apikeydto).apikey",{"_index":138,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["apikeygrpcguard",{"_index":33,"title":{"injectables/ApiKeyGrpcGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeyguard",{"_index":43,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["apikeyhttpguard",{"_index":119,"title":{"injectables/ApiKeyHttpGuard.html":{}},"body":{"injectables/ApiKeyHttpGuard.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeys",{"_index":92,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys.length",{"_index":94,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys[0].tostring",{"_index":96,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeytcpguard",{"_index":128,"title":{"injectables/ApiKeyTcpGuard.html":{}},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["apioperation",{"_index":836,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiparam",{"_index":837,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiproperty",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":838,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity",{"_index":839,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":840,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["application",{"_index":352,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":140,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":89,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["args",{"_index":137,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["array",{"_index":353,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["async",{"_index":230,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["author",{"_index":1039,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1035,"title":{},"body":{"modules.html":{}}}],["await",{"_index":398,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ba47",{"_index":736,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":624,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["based",{"_index":514,"title":{},"body":{"controllers/HealthController.html":{}}}],["bcrypt",{"_index":494,"title":{},"body":{"injectables/HashPipe.html":{},"dependencies.html":{}}}],["body",{"_index":832,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{}}}],["bootstrap",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1033,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1030,"title":{},"body":{"modules.html":{}}}],["build",{"_index":274,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["call",{"_index":551,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":547,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":101,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["canactivate(context",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["catch",{"_index":675,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["catcherror",{"_index":554,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":556,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":733,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":810,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["check",{"_index":362,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["check.'})@apiresponse({status",{"_index":822,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["checking",{"_index":503,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks",{"_index":506,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":0,"title":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":186,"title":{},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/functions.html":{}}}],["client.getservice",{"_index":392,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.interface",{"_index":383,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.interface.ts",{"_index":586,"title":{},"body":{"interfaces/IUsersClient.html":{},"coverage.html":{}}}],["client.interface.ts:14",{"_index":589,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:20",{"_index":590,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:27",{"_index":591,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:35",{"_index":594,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:42",{"_index":593,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:48",{"_index":592,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:53",{"_index":587,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.ts",{"_index":326,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.ts:104",{"_index":365,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:105",{"_index":692,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:116",{"_index":358,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:117",{"_index":691,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:124",{"_index":345,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:127",{"_index":685,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:135",{"_index":686,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:19",{"_index":683,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:28",{"_index":371,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:33",{"_index":338,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:37",{"_index":689,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:57",{"_index":347,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.ts:66",{"_index":350,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:71",{"_index":690,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:77",{"_index":355,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:86",{"_index":693,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:90",{"_index":369,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client_grpc_proxy",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["client_tcp_proxy",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clientgrpcproxy",{"_index":337,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientinjectionname",{"_index":1004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clientproxy",{"_index":682,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["clientproxyfactory",{"_index":187,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(grpcconfig",{"_index":193,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(tcpconfig",{"_index":196,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clients",{"_index":1003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clients/clients.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["clientservice",{"_index":329,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientsmodule",{"_index":145,"title":{"modules/ClientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"index.html":{},"modules.html":{}}}],["clienttest",{"_index":923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["clienttest(clientinjectionname",{"_index":998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":330,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["cloud",{"_index":640,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":657,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["cls",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_clientsmodule",{"_index":175,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_exports",{"_index":177,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_imports",{"_index":176,"title":{},"body":{"modules/ClientsModule.html":{}}}],["cluster_configurationmodule",{"_index":199,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_exports",{"_index":201,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_imports",{"_index":200,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["cluster_configurationmodule_providers",{"_index":202,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_guardsmodule",{"_index":463,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_exports",{"_index":464,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_imports",{"_index":466,"title":{},"body":{"modules/GuardsModule.html":{}}}],["cluster_guardsmodule_providers",{"_index":465,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_healthmodule",{"_index":531,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_imports",{"_index":532,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_pipesmodule",{"_index":633,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_pipesmodule_imports",{"_index":634,"title":{},"body":{"modules/PipesModule.html":{}}}],["cluster_pipesmodule_providers",{"_index":635,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":860,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":861,"title":{},"body":{"modules/UsersModule.html":{}}}],["cmd",{"_index":698,"title":{},"body":{"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["compodoc/compodoc",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":216,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.get",{"_index":241,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow",{"_index":231,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configuration",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration/configuration.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["configuration/injectionnames.enum",{"_index":80,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["configurationmodule",{"_index":146,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["configured",{"_index":341,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["conflictexception",{"_index":620,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":681,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connected",{"_index":688,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connection",{"_index":588,"title":{},"body":{"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["connection_string",{"_index":664,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(message",{"_index":631,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":632,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":86,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constants",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_min_length",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_min_length",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":47,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constructor(@inject(injectionnames.api_key",{"_index":84,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(client",{"_index":336,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["constructor(databaseservice",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(hashrounds",{"_index":483,"title":{},"body":{"injectables/HashPipe.html":{}}}],["constructor(loggingservice",{"_index":645,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["constructor(serviceapikey",{"_index":48,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(user",{"_index":726,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":758,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":395,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":41,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.getargs().find((args",{"_index":136,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["controller",{"_index":409,"title":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["controller('health",{"_index":513,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('users",{"_index":841,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["controller.interface",{"_index":381,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["controller.interface.ts",{"_index":563,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["controller.interface.ts:17",{"_index":564,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:24",{"_index":567,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:32",{"_index":568,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:41",{"_index":573,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:49",{"_index":572,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:57",{"_index":570,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controllers",{"_index":410,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"index.html":{}}}],["controllers/users",{"_index":865,"title":{},"body":{"modules/UsersModule.html":{}}}],["coverage",{"_index":905,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":50,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["create(@body",{"_index":844,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["create(createuserdto",{"_index":612,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":346,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["create(user",{"_index":597,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":599,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["creates",{"_index":339,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["createuserdto",{"_index":278,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["creating",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":413,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["current",{"_index":64,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["data",{"_index":135,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":785,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":496,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":499,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":528,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":770,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":596,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":598,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":600,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":602,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":605,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:47",{"_index":603,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":867,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":757,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:12",{"_index":760,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:28",{"_index":763,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:46",{"_index":764,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:57",{"_index":765,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:70",{"_index":767,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:88",{"_index":766,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":741,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaultvalue",{"_index":699,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete",{"_index":366,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete(':guid",{"_index":851,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":825,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["deleted",{"_index":604,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["deleted.'})@apiresponse({status",{"_index":826,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["depedency",{"_index":618,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":142,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":607,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":9,"title":{},"body":{"classes/ApiKeyDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["diers",{"_index":1041,"title":{},"body":{"properties.html":{}}}],["different",{"_index":1002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":855,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["display",{"_index":711,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["display_name_max_length",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["documenation",{"_index":529,"title":{},"body":{"controllers/HealthController.html":{}}}],["document",{"_index":718,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["document.save",{"_index":773,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":519,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["documentbuilder",{"_index":223,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["documents",{"_index":779,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":781,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["dto",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":456,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/api",{"_index":901,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["dto/create",{"_index":428,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/guid.dto",{"_index":434,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/update",{"_index":429,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/user",{"_index":435,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ef3aa7fd1bc5",{"_index":737,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":812,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["email",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["email_max_length",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emails",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":363,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["entities/user.entity",{"_index":430,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["entity",{"_index":725,"title":{},"body":{"classes/User-1.html":{}}}],["enum",{"_index":660,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":968,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":256,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["environment",{"_index":226,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":676,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["err.code",{"_index":777,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.name",{"_index":775,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":678,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":557,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":854,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["eslint/no",{"_index":858,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["establish",{"_index":687,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["exception.interceptor",{"_index":438,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exception.interceptor.ts",{"_index":539,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":548,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":731,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":783,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execute",{"_index":359,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["execution",{"_index":65,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":58,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":606,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["exists",{"_index":490,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exports",{"_index":183,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{}}}],["express",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/UpdateUserDto.html":{}}}],["factory",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fails",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":111,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":447,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["find",{"_index":351,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["find((arg",{"_index":88,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["findall",{"_index":331,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findall(data",{"_index":566,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone",{"_index":332,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(data",{"_index":417,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(guid",{"_index":354,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["firstvaluefrom",{"_index":373,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["firstvaluefrom(response",{"_index":400,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["forbidden",{"_index":807,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":797,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found",{"_index":817,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found.'})@apiresponse({status",{"_index":830,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["function",{"_index":859,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":993,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":1000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":846,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get(':guid')@apioperation({description",{"_index":809,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check",{"_index":853,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check')@apioperation({description",{"_index":821,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@apioperation({description",{"_index":802,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@healthcheck",{"_index":504,"title":{},"body":{"controllers/HealthController.html":{}}}],["getapikey",{"_index":642,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getargs",{"_index":87,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["getconnectionstring",{"_index":643,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gets",{"_index":649,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":644,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":651,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gh",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":480,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":639,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":1034,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":40,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["grpc.controller",{"_index":868,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":412,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:100",{"_index":419,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:49",{"_index":415,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":416,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":418,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":423,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":421,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard",{"_index":440,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{}}}],["grpc.guard.ts",{"_index":36,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"coverage.html":{}}}],["grpc.guard.ts:11",{"_index":49,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:25",{"_index":59,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc/grpc",{"_index":77,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["grpc_config",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_port",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_client",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_service_name",{"_index":387,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grpcconfig",{"_index":192,"title":{},"body":{"modules/ClientsModule.html":{}}}],["grpcmethod",{"_index":414,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersclient",{"_index":184,"title":{"injectables/GrpcUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"coverage.html":{}}}],["grpcusersservice",{"_index":388,"title":{"controllers/GrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guard",{"_index":37,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":97,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["guards/api",{"_index":439,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guards/guards.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["guardsmodule",{"_index":147,"title":{"modules/GuardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuardsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["guid",{"_index":357,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guiddto",{"_index":376,"title":{"classes/GuidDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["handler",{"_index":552,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":487,"title":{},"body":{"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":482,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":441,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["hashrounds",{"_index":485,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":493,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":497,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":500,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":74,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["headernames",{"_index":73,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["headernames.x_api_key",{"_index":273,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["headers",{"_index":125,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"controllers/HealthController.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":127,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["health",{"_index":361,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["health.controller",{"_index":537,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["health_check_documentation_address",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["health_check_rest_address",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["healthcheck",{"_index":333,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["healthcheck(data",{"_index":569,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["healthcheckdocumentationaddress",{"_index":518,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckrestaddress",{"_index":516,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":511,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":509,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":501,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":148,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["healthy",{"_index":823,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["helper.ts",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["host",{"_index":276,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["http",{"_index":61,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["http.controller",{"_index":866,"title":{},"body":{"modules/UsersModule.html":{}}}],["http.controller.ts",{"_index":791,"title":{},"body":{"controllers/UsersHttpController.html":{},"coverage.html":{}}}],["http.controller.ts:126",{"_index":831,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:149",{"_index":827,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:162",{"_index":824,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:59",{"_index":801,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:75",{"_index":808,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:99",{"_index":820,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.guard",{"_index":468,"title":{},"body":{"modules/GuardsModule.html":{}}}],["http.guard.ts",{"_index":120,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["http.guard.ts:10",{"_index":122,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:24",{"_index":123,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["httpcode",{"_index":835,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpcode(201",{"_index":842,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpexception",{"_index":542,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":436,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":549,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httphealthindicator",{"_index":510,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":534,"title":{},"body":{"modules/HealthModule.html":{}}}],["id",{"_index":356,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["identifier",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["igrpcusersservice",{"_index":370,"title":{"interfaces/IGrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["iloggingservice",{"_index":574,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":114,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["imports",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":68,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["includes",{"_index":565,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":694,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["initialized",{"_index":729,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":71,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["inject(injectionnames.api_key",{"_index":390,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.client_grpc_proxy",{"_index":389,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["inject(injectionnames.client_tcp_proxy",{"_index":695,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.hash_rounds",{"_index":495,"title":{},"body":{"injectables/HashPipe.html":{}}}],["inject(injectionnames.health_check_documentation_address",{"_index":521,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.health_check_rest_address",{"_index":520,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.project_name",{"_index":667,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(logging_service",{"_index":666,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(users_database_service",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":454,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["injectable",{"_index":32,"title":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":34,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":608,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectionnames",{"_index":79,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["injectionnames.api_key",{"_index":203,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.client_grpc_proxy",{"_index":178,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.client_tcp_proxy",{"_index":179,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.connection_string",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.enum",{"_index":220,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["injectionnames.grpc_config",{"_index":194,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_port",{"_index":204,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_users_client",{"_index":180,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.hash_rounds",{"_index":205,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_documentation_address",{"_index":206,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_rest_address",{"_index":207,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.project_name",{"_index":208,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.rest_port",{"_index":209,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.secrets_from_env",{"_index":210,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.swagger_config",{"_index":211,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_config",{"_index":197,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_port",{"_index":212,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_users_client",{"_index":181,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.use_swagger",{"_index":213,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectmodel",{"_index":768,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":771,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":52,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["instanceof",{"_index":90,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["intercept",{"_index":544,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":545,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":540,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":437,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["interface",{"_index":560,"title":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":561,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":769,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":433,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["invalid",{"_index":843,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":799,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["isconnected",{"_index":680,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["isemail",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["isstring()@isuuid",{"_index":20,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["isstring()@isuuid(constants.uuid_version",{"_index":472,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":26,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{}}}],["isuuid(constants.uuid_version",{"_index":477,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersclient",{"_index":382,"title":{"interfaces/IUsersClient.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["iusersdatabaseservice",{"_index":595,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":431,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["jane",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":218,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["join(__dirname",{"_index":263,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["js",{"_index":78,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["key",{"_index":11,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["key.dto",{"_index":134,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{}}}],["key.dto.ts",{"_index":7,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["key.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["key.guard",{"_index":81,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["key.guard.ts",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:20",{"_index":105,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:37",{"_index":112,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:8",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["known",{"_index":754,"title":{},"body":{"classes/UserListDto.html":{}}}],["latest",{"_index":653,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["length(constants.display_name_min_length",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.password_min_length",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1037,"title":{},"body":{"properties.html":{}}}],["line",{"_index":856,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["list",{"_index":601,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["list.dto",{"_index":386,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["list.dto.ts",{"_index":751,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:10",{"_index":753,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":805,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["loader",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":581,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":577,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":578,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":576,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":626,"title":{},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{}}}],["logging.service",{"_index":628,"title":{},"body":{"modules/LoggingModule.html":{}}}],["logging/logging.interface",{"_index":658,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["logging/logging.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["logging_service",{"_index":585,"title":{},"body":{"interfaces/ILoggingService.html":{},"modules/LoggingModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingmodule",{"_index":149,"title":{"modules/LoggingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"index.html":{},"modules.html":{}}}],["loggingservice",{"_index":627,"title":{"injectables/LoggingService.html":{}},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["logic",{"_index":611,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":641,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.service",{"_index":222,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["manager.service.ts",{"_index":638,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:18",{"_index":647,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:31",{"_index":656,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:37",{"_index":648,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:45",{"_index":650,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:54",{"_index":652,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":582,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["messagepattern",{"_index":900,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["messagepattern({cmd",{"_index":893,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":93,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["method",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":44,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["michael",{"_index":1040,"title":{},"body":{"properties.html":{}}}],["microserviceconfigname",{"_index":999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minimum",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":967,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1038,"title":{},"body":{"properties.html":{}}}],["model",{"_index":759,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":139,"title":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":141,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":515,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":719,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosehealthindicator",{"_index":508,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":870,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":776,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":75,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["names.ts",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":553,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/axios",{"_index":535,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":72,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":188,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":224,"title":{},"body":{"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":512,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["new",{"_index":51,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":546,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["next.handle().pipe",{"_index":555,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["non",{"_index":255,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["notfoundexception",{"_index":623,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":236,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":481,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":109,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{}}}],["operations",{"_index":453,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["optional",{"_index":55,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":260,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{}}}],["options.headers[headernames.x_api_key",{"_index":522,"title":{},"body":{"controllers/HealthController.html":{}}}],["otherwise",{"_index":70,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["output",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1025,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":261,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/ConfigurationModule.html":{}}}],["pages",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":82,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["param('guid",{"_index":847,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["parameter",{"_index":12,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["parseint",{"_index":243,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseint(rounds",{"_index":239,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseuuidpipe",{"_index":834,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["part",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":704,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":705,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["password_max_length",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":833,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid",{"_index":849,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":828,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["path",{"_index":219,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["pipe",{"_index":443,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{}}}],["pipe.ts",{"_index":479,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:23",{"_index":489,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:9",{"_index":484,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":442,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["pipes/pipes.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["pipesmodule",{"_index":166,"title":{"modules/PipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PipesModule.html":{},"index.html":{},"modules.html":{}}}],["pipetransform",{"_index":492,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":258,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["post",{"_index":250,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/UsersHttpController.html":{}}}],["post()@httpcode(201)@apioperation({description",{"_index":792,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["pre",{"_index":248,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["predefined",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":225,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/variables.html":{}}}],["pre}${restport}${post",{"_index":252,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["private",{"_index":328,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["processed",{"_index":571,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["project_name",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projectname",{"_index":646,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["projects/${this.projectname}/secrets/${secretname}/versions/latest",{"_index":671,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":108,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":461,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["prop",{"_index":716,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":708,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["protected",{"_index":45,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["proto/users.proto",{"_index":264,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["protopath",{"_index":262,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":39,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":190,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":452,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["providing",{"_index":752,"title":{},"body":{"classes/UserListDto.html":{}}}],["proxy",{"_index":340,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rcp",{"_index":62,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["read",{"_index":60,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersHttpController.html":{}}}],["readapikey",{"_index":46,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readapikey(context",{"_index":57,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readonly",{"_index":116,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["reflect",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":334,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(data",{"_index":420,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(guid",{"_index":364,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":69,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":126,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["requests",{"_index":63,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["required",{"_index":721,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resolve",{"_index":462,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["response",{"_index":397,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rest",{"_index":517,"title":{},"body":{"controllers/HealthController.html":{}}}],["rest_port",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["restport",{"_index":247,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["result",{"_index":349,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["result.acknowledged",{"_index":786,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":789,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.matchedcount",{"_index":787,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":30,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":550,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":541,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":91,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["returned",{"_index":818,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["rounds",{"_index":237,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{}}}],["rpcexception",{"_index":543,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":559,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rxjs",{"_index":113,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"dependencies.html":{}}}],["schema",{"_index":707,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":717,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":723,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":221,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["secretmanagerservice",{"_index":214,"title":{"injectables/SecretManagerService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"index.html":{}}}],["secretmanagerservice.getconnectionstring",{"_index":235,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["secretmanagerserviceclient",{"_index":655,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":654,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":661,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":659,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets_from_env",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secretsfromenv",{"_index":233,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["send",{"_index":697,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["sent",{"_index":344,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["server",{"_index":343,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["service",{"_index":269,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["serviceapikey",{"_index":56,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["services",{"_index":121,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"miscellaneous/functions.html":{}}}],["setdescription('the",{"_index":268,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["settitle('usersservice",{"_index":267,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["setup",{"_index":997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.0",{"_index":270,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["simple",{"_index":360,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["single",{"_index":471,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["src/.../configuration.module.ts",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grpc",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../header",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../injectionnames.enum.ts",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1044,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["src/clients/clients.module.ts",{"_index":182,"title":{},"body":{"modules/ClientsModule.html":{}}}],["src/clients/grpc",{"_index":325,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/clients/tcp",{"_index":679,"title":{},"body":{"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["src/configuration/configuration.module.ts",{"_index":215,"title":{},"body":{"modules/ConfigurationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/injectionnames.enum.ts",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/secret",{"_index":637,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":35,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/guards/guards.module.ts",{"_index":467,"title":{},"body":{"modules/GuardsModule.html":{}}}],["src/header",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/health/health.controller.ts",{"_index":502,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:43",{"_index":505,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":533,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/interceptors/http",{"_index":538,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/logging/logging.interface.ts",{"_index":575,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logging/logging.interface.ts:15",{"_index":580,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/logging/logging.module.ts",{"_index":625,"title":{},"body":{"modules/LoggingModule.html":{}}}],["src/logging/logging.service.ts",{"_index":629,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/logging/logging.service.ts:14",{"_index":630,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/main.ts",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":478,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/pipes/pipes.module.ts",{"_index":636,"title":{},"body":{"modules/PipesModule.html":{}}}],["src/users/constants.ts",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/controllers/users",{"_index":411,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["src/users/database/user.schema.ts",{"_index":706,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":710,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":712,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":713,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:36",{"_index":715,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/api",{"_index":6,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":470,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:13",{"_index":473,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/update",{"_index":702,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":750,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":724,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":728,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":730,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":732,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":738,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":739,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":562,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":610,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":613,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":614,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":615,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:43",{"_index":617,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:50",{"_index":616,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":756,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["src/users/users.module.ts",{"_index":862,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:104",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":579,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":507,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["stopatfirsterror",{"_index":444,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super(serviceapikey",{"_index":85,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["support",{"_index":1031,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1032,"title":{},"body":{"modules.html":{}}}],["swagger_config",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["tcp",{"_index":130,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["tcp.controller",{"_index":869,"title":{},"body":{"modules/UsersModule.html":{}}}],["tcp.controller.ts",{"_index":892,"title":{},"body":{"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["tcp.controller.ts:103",{"_index":897,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:50",{"_index":894,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:60",{"_index":895,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:72",{"_index":896,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:83",{"_index":899,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:93",{"_index":898,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard",{"_index":469,"title":{},"body":{"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{}}}],["tcp.guard.ts",{"_index":129,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["tcp.guard.ts:10",{"_index":131,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:24",{"_index":132,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp_config",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_port",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_users_client",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcpconfig",{"_index":195,"title":{},"body":{"modules/ClientsModule.html":{}}}],["tcpusersclient",{"_index":189,"title":{"injectables/TcpUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":536,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../client.tester.ts",{"_index":995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/client.tester.ts",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/test",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":928,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":929,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["this.apikey",{"_index":523,"title":{},"body":{"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client",{"_index":670,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.accesssecretversion",{"_index":673,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.close",{"_index":408,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.connect",{"_index":701,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.clientservice",{"_index":391,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.create(data",{"_index":399,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findall",{"_index":401,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findone(dto",{"_index":403,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.healthcheck",{"_index":407,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.remove(dto",{"_index":406,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.update(dto",{"_index":405,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.connect",{"_index":696,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.databaseservice.create(user",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":742,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":744,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.api_key",{"_index":668,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":669,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.guid",{"_index":748,"title":{},"body":{"classes/User-1.html":{}}}],["this.hashrounds",{"_index":498,"title":{},"body":{"injectables/HashPipe.html":{}}}],["this.healthcheckdocumentationaddress",{"_index":530,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckrestaddress",{"_index":526,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckservice.check",{"_index":524,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httphealthindicator.pingcheck",{"_index":525,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isconnected",{"_index":700,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":677,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.metadata",{"_index":393,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.metadata.add(headernames.x_api_key",{"_index":394,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.mongoosehealthindicator.pingcheck('users",{"_index":527,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.password",{"_index":746,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":117,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.serviceapikey",{"_index":118,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.usermodel(user",{"_index":772,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":788,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":780,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":782,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":784,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":845,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.create(data",{"_index":455,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findall",{"_index":457,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":458,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(guid",{"_index":848,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":460,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.remove(guid",{"_index":852,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.update(data.guid",{"_index":459,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.update(guid",{"_index":850,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["throw",{"_index":558,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":621,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":619,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{}}}],["transform(value",{"_index":488,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":491,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["transport",{"_index":217,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.grpc",{"_index":259,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.tcp",{"_index":275,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["true",{"_index":110,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":672,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1042,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":857,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["undefined",{"_index":67,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["undefined})@apiresponse({status",{"_index":806,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["unique",{"_index":709,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":446,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["unqiue",{"_index":714,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unused",{"_index":903,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["update",{"_index":335,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(data",{"_index":422,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(guid",{"_index":367,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":404,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["updated.'})@apiresponse({status",{"_index":829,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["updateuserdto",{"_index":368,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["updating",{"_index":703,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":265,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["use",{"_index":684,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["use_swagger",{"_index":989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":198,"title":{},"body":{"modules/ClientsModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":486,"title":{},"body":{"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{}}}],["useguards",{"_index":424,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useguards(apikeygrpcguard",{"_index":449,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeytcpguard",{"_index":902,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["useinterceptors",{"_index":425,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useinterceptors(new",{"_index":448,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["usepipes",{"_index":426,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user",{"_index":283,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":811,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.'})@apiresponse({status",{"_index":793,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.displayname",{"_index":743,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":375,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user.dto.ts",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":745,"title":{},"body":{"classes/User-1.html":{}}}],["user.name",{"_index":871,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":747,"title":{},"body":{"classes/User-1.html":{}}}],["usercontroller",{"_index":450,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["userdatabase",{"_index":727,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":749,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":720,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":762,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":774,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":384,"title":{"classes/UserListDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["userlistdto.users",{"_index":402,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["usermodel",{"_index":761,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":185,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users.'})@apiresponse({status",{"_index":803,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["users.service",{"_index":864,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/api",{"_index":133,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["users/dto/create",{"_index":374,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/guid.dto",{"_index":377,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["users/dto/update",{"_index":378,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/user",{"_index":385,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/entities/user.entity",{"_index":379,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/interfaces/users",{"_index":380,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/users.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["users_database_service",{"_index":609,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service",{"_index":432,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service_",{"_index":229,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["users_service_prefix",{"_index":228,"title":{},"body":{"modules/ConfigurationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service_prefix}${injectionnames.api_key",{"_index":232,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.connection_string",{"_index":234,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.grpc_port",{"_index":245,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.hash_rounds",{"_index":238,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.health_check_documentation_address",{"_index":253,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.health_check_rest_address}_post",{"_index":251,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.health_check_rest_address}_pre",{"_index":249,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.project_name",{"_index":240,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.rest_port",{"_index":244,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.secrets_from_env",{"_index":242,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.tcp_port",{"_index":246,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["users_service_prefix}${injectionnames.use_swagger",{"_index":254,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["userschema",{"_index":722,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdatabaseservice",{"_index":755,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usershttpcontroller",{"_index":790,"title":{"controllers/UsersHttpController.html":{}},"body":{"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":150,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":451,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usersserviceapikey",{"_index":663,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["usersserviceconnectionstring",{"_index":665,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["userstcpcontroller",{"_index":863,"title":{"controllers/UsersTcpController.html":{}},"body":{"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user})@apiresponse({status",{"_index":795,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["using",{"_index":327,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["uuid",{"_index":474,"title":{},"body":{"classes/GuidDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuids",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":740,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":83,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validate",{"_index":106,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validated",{"_index":396,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["validating",{"_index":38,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validation",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":427,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"dependencies.html":{}}}],["value",{"_index":23,"title":{},"body":{"classes/ApiKeyDto.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["values",{"_index":257,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["variable",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":227,"title":{"miscellaneous/variables.html":{}},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":904,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["version",{"_index":475,"title":{},"body":{"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version.payload.data.tostring",{"_index":674,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":584,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":445,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["whose",{"_index":348,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["x",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":583,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiKeyDto.html":{"url":"classes/ApiKeyDto.html","title":"class - ApiKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/api-key.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes an api key parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/api-key.dto.ts:12\n                        \n                    \n\n            \n                \n                    The value of the api key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * Describes an api key parameter.\n */\nexport default class ApiKeyDto {\n  /**\n   * The value of the api key.\n   */\n  @IsString()\n  @IsUUID()\n  apiKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyGrpcGuard.html":{"url":"injectables/ApiKeyGrpcGuard.html","title":"injectable - ApiKeyGrpcGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyGrpcGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-grpc.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key in GRPC context.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-grpc.guard.ts:11\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:25\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key in GRPC context.\n */\n@Injectable()\nexport class ApiKeyGrpcGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const metadata: Metadata = context\n      .getArgs()\n      .find((arg) => arg instanceof Metadata);\n    if (!metadata) {\n      return;\n    }\n\n    const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n    if (!apiKeys || apiKeys.length !== 1) {\n      return;\n    }\n\n    return apiKeys[0].toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Base guard for validating api keys.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Protected\n                                    Abstract\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key.guard.ts:8\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:20\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Abstract\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:37\n                \n            \n\n\n            \n                \n                    Read the api key from requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Base guard for validating api keys.\n */\n@Injectable()\nexport abstract class ApiKeyGuard implements CanActivate {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(private readonly serviceApiKey: string) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected abstract readApiKey(context: ExecutionContext): string | undefined;\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyHttpGuard.html":{"url":"injectables/ApiKeyHttpGuard.html","title":"injectable - ApiKeyHttpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyHttpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-http.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for http services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-http.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { HeaderNames } from '../header-names';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for http services.\n */\n@Injectable()\nexport class ApiKeyHttpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const headers = request?.headers;\n\n    if (!headers) {\n      return;\n    }\n\n    return headers[HeaderNames.X_API_KEY];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyTcpGuard.html":{"url":"injectables/ApiKeyTcpGuard.html","title":"injectable - ApiKeyTcpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyTcpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-tcp.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for tcp services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-tcp.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport ApiKeyDto from '../users/dto/api-key.dto';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for tcp services.\n */\n@Injectable()\nexport class ApiKeyTcpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const data = context.getArgs().find((args) => (args as ApiKeyDto).apiKey);\n    if (data) {\n      return (data as ApiKeyDto).apiKey;\n    }\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggingModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { LoggingModule } from './logging/logging.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { HealthModule } from './health/health.module';\nimport { ClientsModule } from './clients/clients.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { GuardsModule } from './guards/guards.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { InjectionNames } from './configuration/InjectionNames.enum';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      useFactory: (connectionString: string) => {\n        return { uri: connectionString };\n      },\n      inject: [InjectionNames.CONNECTION_STRING],\n      imports: [ConfigurationModule],\n    }),\n    LoggingModule,\n    UsersModule,\n    HealthModule,\n    ClientsModule,\n    ConfigurationModule,\n    GuardsModule,\n    PipesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientsModule.html":{"url":"modules/ClientsModule.html","title":"module - ClientsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_imports\n\n\n\ncluster_ClientsModule_exports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nClientsModule\n\nClientsModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/clients/clients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.CLIENT_GRPC_PROXY\n                        \n                        \n                            InjectionNames.CLIENT_TCP_PROXY\n                        \n                        \n                            InjectionNames.GRPC_USERS_CLIENT\n                        \n                        \n                            InjectionNames.TCP_USERS_CLIENT\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GrpcUsersClient } from './grpc-users-client';\nimport { ClientProxyFactory } from '@nestjs/microservices';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { TcpUsersClient } from './tcp-users-client';\n\n@Module({\n  exports: [\n    InjectionNames.GRPC_USERS_CLIENT,\n    InjectionNames.TCP_USERS_CLIENT,\n    InjectionNames.CLIENT_GRPC_PROXY,\n    InjectionNames.CLIENT_TCP_PROXY,\n  ],\n  imports: [ConfigurationModule],\n  providers: [\n    {\n      provide: InjectionNames.CLIENT_GRPC_PROXY,\n      useFactory: (grpcConfig: any) => ClientProxyFactory.create(grpcConfig),\n      inject: [InjectionNames.GRPC_CONFIG],\n    },\n    {\n      provide: InjectionNames.CLIENT_TCP_PROXY,\n      useFactory: (tcpConfig: any) => {\n        return ClientProxyFactory.create(tcpConfig);\n      },\n      inject: [InjectionNames.TCP_CONFIG],\n    },\n    {\n      provide: InjectionNames.GRPC_USERS_CLIENT,\n      useClass: GrpcUsersClient,\n    },\n    {\n      provide: InjectionNames.TCP_USERS_CLIENT,\n      useClass: TcpUsersClient,\n    },\n  ],\n})\nexport class ClientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_imports\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nLoggingModule\n\nLoggingModule\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT  -->\n\nConfigurationModule->InjectionNames.GRPC_PORT \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT  -->\n\nConfigurationModule->InjectionNames.REST_PORT \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT  -->\n\nConfigurationModule->InjectionNames.TCP_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecretManagerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.API_KEY\n                        \n                        \n                            InjectionNames.CONNECTION_STRING\n                        \n                        \n                            InjectionNames.GRPC_CONFIG\n                        \n                        \n                            InjectionNames.GRPC_PORT\n                        \n                        \n                            InjectionNames.HASH_ROUNDS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_REST_ADDRESS\n                        \n                        \n                            InjectionNames.PROJECT_NAME\n                        \n                        \n                            InjectionNames.REST_PORT\n                        \n                        \n                            InjectionNames.SECRETS_FROM_ENV\n                        \n                        \n                            InjectionNames.SWAGGER_CONFIG\n                        \n                        \n                            InjectionNames.TCP_CONFIG\n                        \n                        \n                            InjectionNames.TCP_PORT\n                        \n                        \n                            InjectionNames.USE_SWAGGER\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Transport } from '@nestjs/microservices';\nimport { join } from 'path';\nimport { LoggingModule } from '../logging/logging.module';\nimport { InjectionNames } from './InjectionNames.enum';\nimport { SecretManagerService } from './secret-manager.service';\nimport { DocumentBuilder } from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\n\n/**\n * Prefix for environment variables.\n */\nconst USERS_SERVICE_PREFIX = 'USERS_SERVICE_';\n\n@Module({\n  exports: [\n    InjectionNames.API_KEY,\n    InjectionNames.GRPC_CONFIG,\n    InjectionNames.TCP_CONFIG,\n    InjectionNames.USE_SWAGGER,\n    InjectionNames.HASH_ROUNDS,\n    InjectionNames.PROJECT_NAME,\n    InjectionNames.SECRETS_FROM_ENV,\n    InjectionNames.CONNECTION_STRING,\n    InjectionNames.SWAGGER_CONFIG,\n    InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n    InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n    InjectionNames.REST_PORT,\n    InjectionNames.GRPC_PORT,\n    InjectionNames.TCP_PORT,\n  ],\n  imports: [ConfigModule.forRoot({}), LoggingModule],\n  providers: [\n    SecretManagerService,\n    {\n      provide: InjectionNames.API_KEY,\n      useFactory: async (configService: ConfigService): Promise => {\n        return configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.API_KEY}`,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.CONNECTION_STRING,\n      useFactory: async (\n        secretsFromEnv: boolean,\n        configService: ConfigService,\n        secretManagerService: SecretManagerService,\n      ): Promise => {\n        if (secretsFromEnv) {\n          return configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.CONNECTION_STRING}`,\n          );\n        }\n\n        return secretManagerService.getConnectionString();\n      },\n      inject: [\n        InjectionNames.SECRETS_FROM_ENV,\n        ConfigService,\n        SecretManagerService,\n      ],\n    },\n    {\n      provide: InjectionNames.HASH_ROUNDS,\n      useFactory: (configService: ConfigService): number => {\n        const rounds = configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HASH_ROUNDS}`,\n        );\n        return parseInt(rounds);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.PROJECT_NAME,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.PROJECT_NAME}`,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SECRETS_FROM_ENV,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.SECRETS_FROM_ENV}`,\n        );\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.REST_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(\n          configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.REST_PORT}`,\n          ),\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.GRPC_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(\n          configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.GRPC_PORT}`,\n          ),\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.TCP_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(\n          configService.getOrThrow(\n            `${USERS_SERVICE_PREFIX}${InjectionNames.TCP_PORT}`,\n          ),\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n      useFactory: (configService: ConfigService, restPort: number): string => {\n        const pre = configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_REST_ADDRESS}_PRE`,\n        );\n        const post = configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_REST_ADDRESS}_POST`,\n        );\n        return `${pre}${restPort}${post}`;\n      },\n      inject: [ConfigService, InjectionNames.REST_PORT],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS}`,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.USE_SWAGGER,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(\n          `${USERS_SERVICE_PREFIX}${InjectionNames.USE_SWAGGER}`,\n        );\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    /**\n     * NON ENV VALUES\n     */\n    {\n      provide: InjectionNames.GRPC_CONFIG,\n      useFactory: (configService: ConfigService, port: number) => {\n        return {\n          transport: Transport.GRPC,\n          options: {\n            package: ['users'],\n            protoPath: [join(__dirname, '../proto/users.proto')],\n            url: `0.0.0.0:${port}`,\n          },\n        };\n      },\n      inject: [ConfigService, InjectionNames.GRPC_PORT],\n    },\n    {\n      provide: InjectionNames.SWAGGER_CONFIG,\n      useFactory: () => {\n        return new DocumentBuilder()\n          .setTitle('UsersService')\n          .setDescription('The api of the users service.')\n          .setVersion('1.0')\n          .addTag('users')\n          .addApiKey(\n            { type: 'apiKey', name: HeaderNames.X_API_KEY, in: 'header' },\n            HeaderNames.X_API_KEY,\n          )\n          .build();\n      },\n    },\n    {\n      provide: InjectionNames.TCP_CONFIG,\n      useFactory: (configService: ConfigService, port: number): any => {\n        return {\n          transport: Transport.TCP,\n          options: {\n            host: '0.0.0.0',\n            port,\n          },\n        };\n      },\n      inject: [ConfigService, InjectionNames.TCP_PORT],\n    },\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GrpcUsersClient.html":{"url":"injectables/GrpcUsersClient.html","title":"injectable - GrpcUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GrpcUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/grpc-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using grpc.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clientService\n                            \n                            \n                                    Private\n                                    Readonly\n                                metadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientGrpcProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/grpc-users-client.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a new instance of GrpcUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientGrpcProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The grpc client proxy that is configured to access the server by grpc.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:124\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:66\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:77\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:116\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:90\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clientService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IGrpcUsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:28\n                        \n                    \n\n            \n                \n                    Service for accessing the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Metadata\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:33\n                        \n                    \n\n            \n                \n                    The default metadata that is sent to the server.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientGrpcProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport GuidDto from '../users/dto/guid.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport { User } from '../users/entities/user.entity';\nimport { IGrpcUsersService } from '../users/interfaces/users-grpc-controller.interface';\nimport IUsersClient from '../users/interfaces/users-client.interface';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * The name of the grpc users service.\n */\nconst GRPC_USERS_SERVICE_NAME = 'GrpcUsersService';\n\n/**\n * Client for the users service using grpc.\n */\n@Injectable()\nexport class GrpcUsersClient implements IUsersClient {\n  /**\n   * Service for accessing the server.\n   */\n  private readonly clientService: IGrpcUsersService;\n\n  /**\n   * The default metadata that is sent to the server.\n   */\n  private readonly metadata: Metadata;\n\n  /**\n   * Creates a new instance of GrpcUsersClient.\n   * @param client The grpc client proxy that is configured to access the server by grpc.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_GRPC_PROXY)\n    private readonly client: ClientGrpcProxy,\n    @Inject(InjectionNames.API_KEY) apiKey: string,\n  ) {\n    this.clientService = client.getService(\n      GRPC_USERS_SERVICE_NAME,\n    );\n    this.metadata = new Metadata();\n    this.metadata.add(HeaderNames.X_API_KEY, apiKey);\n  }\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const response = await this.clientService.create(data, this.metadata);\n    return await firstValueFrom(response);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await this.clientService.findAll({}, this.metadata);\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const dto: GuidDto = { guid };\n    const response = await this.clientService.findOne(dto, this.metadata);\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const dto: UpdateUserDto & GuidDto = {\n      guid,\n      ...data,\n    };\n    const response = await this.clientService.update(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const dto: GuidDto = {\n      guid,\n    };\n    const response = await this.clientService.remove(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await this.clientService.healthCheck({}, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:100\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyGrpcGuard } from '../../guards/api-key-grpc.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGrpcGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  healthCheck(): Promise {\n    return new Promise((resolve) => resolve());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuardsModule.html":{"url":"modules/GuardsModule.html","title":"module - GuardsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_GuardsModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guards/guards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { ApiKeyGrpcGuard } from './api-key-grpc.guard';\nimport { ApiKeyHttpGuard } from './api-key-http.guard';\nimport { ApiKeyTcpGuard } from './api-key-tcp.guard';\n\n@Module({\n  exports: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n  imports: [ConfigurationModule],\n  providers: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n})\nexport class GuardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID(Constants.UUID_VERSION)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:13\n                        \n                    \n\n            \n                \n                    An uuid in version 4.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { Constants } from '../constants';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  /**\n   * An uuid in version 4.\n   */\n  @IsString()\n  @IsUUID(Constants.UUID_VERSION)\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashRounds: number)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:9\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        hashRounds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of used hash rounds.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:23\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, Inject } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param hashRounds The number of used hash rounds.\n   */\n  constructor(\n    @Inject(InjectionNames.HASH_ROUNDS) private readonly hashRounds: number,\n  ) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    if (data.email) {\n      data.email = hashSync(data.email, this.hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, this.hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                A controller for checking the application health.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:43\n                \n            \n\n\n            \n                \n                    Execute health checks for the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The health status of the server.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport {\n  MongooseHealthIndicator,\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  HealthCheckResult,\n} from '@nestjs/terminus';\nimport { HeaderNames } from '../header-names';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * A controller for checking the application health.\n */\n@Controller('health')\nexport class HealthController {\n  /**\n   * Creates a new instance of HealthController.\n   * @param healthCheckService Service for checking the application health.\n   * @param httpHealthIndicator Http-based health checks.\n   * @param mongooseHealthIndicator Check the health of the mongodb.\n   * @param apiKey The api key that used for requests.\n   * @param healthCheckRestAddress The address for the rest health check.\n   * @param healthCheckDocumentationAddress The address of the users service documentation.\n   */\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private httpHealthIndicator: HttpHealthIndicator,\n    private mongooseHealthIndicator: MongooseHealthIndicator,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n    @Inject(InjectionNames.HEALTH_CHECK_REST_ADDRESS)\n    private readonly healthCheckRestAddress: string,\n    @Inject(InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS)\n    private readonly healthCheckDocumentationAddress: string,\n  ) {}\n\n  /**\n   * Execute health checks for the application.\n   * @returns The health status of the server.\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    const options = { headers: {} };\n    options.headers[HeaderNames.X_API_KEY] = this.apiKey;\n\n    return this.healthCheckService.check([\n      async () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service REST',\n          this.healthCheckRestAddress,\n          options,\n        ),\n      async () =>\n        this.mongooseHealthIndicator.pingCheck('Users Service Database'),\n      () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service Documenation',\n          this.healthCheckDocumentationAddress,\n        ),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  imports: [TerminusModule, HttpModule, ConfigurationModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrpcUsersService.html":{"url":"interfaces/IGrpcUsersService.html","title":"interface - IGrpcUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-grpc-controller.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service interface for the GRPC service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:17\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:24\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:32\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:57\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data is not processed.\n\n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:49\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:41\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport GuidDto from '../dto/guid.dto';\nimport { Observable } from 'rxjs';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Service interface for the GRPC service.\n */\nexport interface IGrpcUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto, metadata: Metadata): Observable;\n\n  /**\n   * Find all users of the application.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(data: any, metadata: Metadata): Observable;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  update(data: UpdateUserDto & GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  remove(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Execute a simple health check.\n   * @param data The data is not processed.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(data: any, metadata: Metadata): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersClient.html":{"url":"interfaces/IUsersClient.html","title":"interface - IUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-client.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface that describes operations on users for controller and client.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:53\n                \n            \n\n\n            \n                \n                    Close the client connection.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:14\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:20\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:27\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:48\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:42\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:35\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Interface that describes operations on users for controller and client.\n */\nexport default interface IUsersClient {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto): Promise;\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  update(guid: string, data: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  remove(guid: string): Promise;\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(): Promise;\n\n  /**\n   * Close the client connection.\n   */\n  close(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:47\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:50\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:43\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingModule.html":{"url":"modules/LoggingModule.html","title":"module - LoggingModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logging/logging.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\n\n@Module({\n  exports: [LOGGING_SERVICE],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n  ],\n})\nexport class LoggingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_imports\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/pipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HashPipe\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { HashPipe } from './hash-pipe';\n\n@Module({\n  exports: [HashPipe],\n  imports: [ConfigurationModule],\n  providers: [HashPipe],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getApiKey\n                            \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, projectName: string)\n                    \n                \n                        \n                            \n                                Defined in src/configuration/secret-manager.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        projectName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApiKey()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:37\n                \n            \n\n\n            \n                \n                    Gets the api key for the users service.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The api key.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:45\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:54\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/configuration/secret-manager.service.ts:31\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ILoggingService, LOGGING_SERVICE } from '../logging/logging.interface';\nimport { InjectionNames } from './InjectionNames.enum';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  API_KEY = 'UsersServiceApiKey',\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    @Inject(InjectionNames.PROJECT_NAME) private readonly projectName: string,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the api key for the users service.\n   * @returns The api key.\n   */\n  async getApiKey(): Promise {\n    return this.getSecretAsync(SecretNames.API_KEY);\n  }\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.projectName}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TcpUsersClient.html":{"url":"injectables/TcpUsersClient.html","title":"injectable - TcpUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TcpUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/tcp-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using tcp.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isConnected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/tcp-users-client.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the TcpUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A client proxy that is configured to use tcp.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:127\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:135\n                \n            \n\n\n            \n                \n                    Establish a connection to the server.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The proxy client that is connected to the server.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:71\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:117\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:105\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:86\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/clients/tcp-users-client.ts:19\n                        \n                    \n\n            \n                \n                    Indicates if the client is connected.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { User } from '../users/entities/user.entity';\nimport IUsersClient from '../users/interfaces/users-client.interface';\n\n/**\n * Client for the users service using tcp.\n */\n@Injectable()\nexport class TcpUsersClient implements IUsersClient {\n  /**\n   * Indicates if the client is connected.\n   */\n  private isConnected = false;\n\n  /**\n   * Creates a new instance of the TcpUsersClient.\n   * @param client A client proxy that is configured to use tcp.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_TCP_PROXY)\n    private readonly client: ClientProxy,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const user = await firstValueFrom(\n      await (\n        await this.connect()\n      ).send(\n        { cmd: 'create' },\n        {\n          ...data,\n          apiKey: this.apiKey,\n        },\n      ),\n    );\n\n    return user;\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findAll' }, { apiKey: this.apiKey });\n\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findOne' }, { guid, apiKey: this.apiKey });\n\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const response = await (\n      await this.connect()\n    ).send(\n      { cmd: 'update' },\n      {\n        guid,\n        ...data,\n        apiKey: this.apiKey,\n      },\n    );\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'remove' }, { guid, apiKey: this.apiKey });\n\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'healthCheck' }, { apiKey: this.apiKey });\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n\n  /**\n   * Establish a connection to the server.\n   * @returns The proxy client that is connected to the server.\n   */\n  private async connect(): Promise {\n    if (!this.isConnected) {\n      await this.client.connect();\n    }\n\n    return this.client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the schema for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:36\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * The document type for users.\n */\nexport type UserDocument = User & Document;\n\n/**\n * Describes the schema for users.\n */\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\n/**\n * The mongodb schema for users.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:10\n                        \n                    \n\n            \n                \n                    All known users of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  /**\n   * All known users of the application.\n   */\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            Create a new instance of UsersDatabaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The model for database operations on users.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:28\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:46\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:57\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:88\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:70\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  /**\n   * Create a new instance of UsersDatabaseService.\n   * @param userModel The model for database operations on users.\n   */\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersHttpController.html":{"url":"controllers/UsersHttpController.html","title":"controller - UsersHttpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersHttpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-http.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:59\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:99\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health/check')@ApiOperation({description: 'Execute a simple health check.'})@ApiResponse({status: 200, description: 'The service is healthy.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:162\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:149\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:126\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../../header-names';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersHttpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post()\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   */\n  @Get('health/check')\n  @ApiOperation({ description: 'Execute a simple health check.' })\n  @ApiResponse({ status: 200, description: 'The service is healthy.' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersHttpController\n                        \n                        \n                            GrpcUsersService\n                        \n                        \n                            UsersTcpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersHttpController } from './controllers/users-http.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './controllers/users-grpc.controller';\nimport { UsersTcpController } from './controllers/users-tcp.controller';\nimport { GuardsModule } from '../guards/guards.module';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  controllers: [UsersHttpController, GrpcUsersService, UsersTcpController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    GuardsModule,\n    ConfigurationModule,\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\nimport { IUsersService } from './interfaces/users.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService implements IUsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersTcpController.html":{"url":"controllers/UsersTcpController.html","title":"controller - UsersTcpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersTcpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-tcp.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                TCP CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'create'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:50\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(data: ApiKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findAll'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ApiKeyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findOne'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:72\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'healthCheck'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:103\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'remove'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:93\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'update'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyTcpGuard } from '../../guards/api-key-tcp.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\nimport ApiKeyDto from '../dto/api-key.dto';\n\n/**\n * TCP CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyTcpGuard)\n@Controller()\nexport class UsersTcpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'create' })\n  create(data: CreateUserDto & ApiKeyDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @MessagePattern({ cmd: 'findAll' })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findAll(data: ApiKeyDto): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'findOne' })\n  findOne(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'update' })\n  update(data: UpdateUserDto & GuidDto & ApiKeyDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'remove' })\n  remove(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'healthCheck' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            injectable\n            GrpcUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            variable\n            GRPC_USERS_SERVICE_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/clients/tcp-users-client.ts\n            \n            injectable\n            TcpUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/configuration/configuration.module.ts\n            \n            variable\n            USERS_SERVICE_PREFIX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/guards/api-key-grpc.guard.ts\n            \n            injectable\n            ApiKeyGrpcGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-http.guard.ts\n            \n            injectable\n            ApiKeyHttpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-tcp.guard.ts\n            \n            injectable\n            ApiKeyTcpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/logging/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/constants.ts\n            \n            variable\n            Constants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/controllers/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-http.controller.ts\n            \n            controller\n            UsersHttpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-tcp.controller.ts\n            \n            controller\n            UsersTcpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/api-key.dto.ts\n            \n            class\n            ApiKeyDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-client.interface.ts\n            \n            interface\n            IUsersClient\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-grpc-controller.interface.ts\n            \n            interface\n            IGrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                test/client.tester.ts\n            \n            function\n            clientTest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/axios : ^0.1.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gh-pages : ^4.0.0\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            InjectionNames   (src/.../InjectionNames.enum.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/configuration/InjectionNames.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        InjectionNames\n                    \n                \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : API_KEY\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 REST_PORT\n                            \n                        \n                        \n                            \n                                Value : REST_PORT\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : TCP_PORT\n                            \n                        \n                        \n                            \n                                 GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                 CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                 TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                Value : GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                 TCP_CONFIG\n                            \n                        \n                        \n                            \n                                Value : TCP_CONFIG\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                Value : SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n            \n        \n\n    src/configuration/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : UsersServiceApiKey\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            clientTest   (test/.../client.tester.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The application setup.\n\n\n                \n            \n        \n    \n    test/client.tester.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        clientTest\n                        \n                    \n                \n            \n            \n                \nclientTest(clientInjectionName: string, microserviceConfigName: string)\n                \n            \n\n\n\n\n            \n                \n                    A generic test for different clients and services: GRPC, TCP\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clientInjectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for the client.\n\n                                    \n                                \n                                \n                                    microserviceConfigName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for client configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT \n\nInjectionNames.GRPC_PORT  -->\n\nConfigurationModule->InjectionNames.GRPC_PORT \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT \n\nInjectionNames.REST_PORT  -->\n\nConfigurationModule->InjectionNames.REST_PORT \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT \n\nInjectionNames.TCP_PORT  -->\n\nConfigurationModule->InjectionNames.TCP_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A service that provides CRUD operations on users.\n        \n            License : MIT\n        \n            Author : Michael Diers\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The document type for users.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            GRPC_USERS_SERVICE_NAME   (src/.../grpc-users-client.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            USERS_SERVICE_PREFIX   (src/.../configuration.module.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The minimum length for display names.\n   */\n  DISPLAY_NAME_MIN_LENGTH: 3,\n\n  /**\n   * The maximum length for display names.\n   */\n  DISPLAY_NAME_MAX_LENGTH: 256,\n\n  /**\n   * The minimum length for emails.\n   */\n  EMAIL_MIN_LENGTH: 5,\n\n  /**\n   * The maximum length for emails.\n   */\n  EMAIL_MAX_LENGTH: 2048,\n\n  /**\n   * The minimum length for passwords.\n   */\n  PASSWORD_MIN_LENGTH: 8,\n\n  /**\n   * The maximum length for passwords.\n   */\n  PASSWORD_MAX_LENGTH: 4096,\n\n  /**\n   * The expected version for uuids.\n   */\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n            \n                \n                    Predefined validation constants.\n\n                \n            \n\n        \n    \n\n    src/clients/grpc-users-client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GRPC_USERS_SERVICE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GrpcUsersService'\n                    \n                \n\n            \n                \n                    The name of the grpc users service.\n\n                \n            \n\n        \n    \n\n    src/logging/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/configuration/configuration.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE_'\n                    \n                \n\n            \n                \n                    Prefix for environment variables.\n\n                \n            \n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The mongodb schema for users.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
