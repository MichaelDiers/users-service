var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiKeyDto.html",[0,0.131,1,2.189]],["body/classes/ApiKeyDto.html",[0,0.22,1,3.669,2,2.401,3,0.329,4,0.329,5,0.291,6,5.031,7,4.142,8,0.584,9,3.381,10,2.373,11,2.105,12,5.914,13,0.494,14,2.395,15,2.935,16,0.539,17,0.023,18,1.019,19,2.243,20,4.868,21,0.732,22,4.868,23,2.251,24,0.369,25,4.45,26,5.031,27,3.306,28,0.329,29,2.243,30,0.019,31,0.019]],["title/injectables/ApiKeyGrpcGuard.html",[32,0.649,33,2.016]],["body/injectables/ApiKeyGrpcGuard.html",[0,0.134,3,0.243,4,0.243,5,0.214,8,0.584,10,2.372,11,2.156,13,0.364,15,1.654,16,0.538,17,0.023,18,1.064,21,0.731,24,0.467,28,0.243,30,0.016,31,0.016,32,0.895,33,2.78,34,1.366,35,3.421,36,3.054,37,2.576,38,3.302,39,2.78,40,2.398,41,4.039,42,3.302,43,3.53,44,1.08,45,3.744,46,3.302,47,1.141,48,2.438,49,3.59,50,1.294,51,0.895,52,1.545,53,1.016,54,0.731,55,1.016,56,3.302,57,3.302,58,3.666,59,3.59,60,3.017,61,3.302,62,3.659,63,3.017,64,3.017,65,3.017,66,1.016,67,2.915,68,3.302,69,2.576,70,2.398,71,1.141,72,0.619,73,1.902,74,2.052,75,1.654,76,4.193,77,2.438,78,2.438,79,1.366,80,1.654,81,2.702,82,1.016,83,2.438,84,2.702,85,2.702,86,1.219,87,3.59,88,3.59,89,3.59,90,3.054,91,1.467,92,4.862,93,3.59,94,3.59,95,2.438,96,3.59]],["title/guards/ApiKeyGuard.html",[37,1.869,43,2.016]],["body/guards/ApiKeyGuard.html",[0,0.128,3,0.233,4,0.233,5,0.206,8,0.648,10,2.435,11,2.115,13,0.35,15,2.677,16,0.597,17,0.023,18,1.049,21,0.811,24,0.358,28,0.233,30,0.015,31,0.015,32,0.87,35,3.605,37,2.506,38,3.211,39,2.703,41,4.129,43,3.321,44,1.051,45,3.666,46,3.211,47,1.095,48,2.34,50,1.258,51,0.87,52,1.503,53,1.128,54,0.811,55,1.128,56,3.211,57,3.211,58,3.996,60,2.934,63,2.934,64,3.605,65,3.605,66,1.214,67,2.866,68,3.211,69,3.078,70,2.866,72,0.594,82,1.128,83,3.666,86,0.864,91,1.258,97,3.447,98,2.932,99,4.729,100,4.729,101,6.088,102,5.81,103,3.447,104,3.447,105,3.447,106,4.729,107,4.023,108,1.416,109,4.062,110,1.915,111,2.86,112,3.447,113,1.97,114,1.7,115,3.447,116,1.487,117,3.447,118,3.447]],["title/injectables/ApiKeyHttpGuard.html",[32,0.649,119,2.189]],["body/injectables/ApiKeyHttpGuard.html",[0,0.139,3,0.252,4,0.252,5,0.223,8,0.599,10,2.393,11,2.172,13,0.379,15,1.72,16,0.552,17,0.023,18,1.078,21,0.75,24,0.454,28,0.252,30,0.016,31,0.016,32,0.918,34,1.42,35,3.489,37,2.644,38,3.389,39,2.853,41,3.725,42,3.389,43,3.577,44,1.109,45,3.818,46,3.389,47,1.186,48,2.534,50,1.328,51,0.918,52,1.586,53,1.043,54,0.75,55,1.043,56,3.389,57,3.389,58,3.725,60,3.097,61,4.077,62,3.756,63,3.097,64,3.097,65,3.097,66,1.043,67,2.961,68,3.389,69,2.979,70,2.462,71,1.186,72,0.643,73,1.977,74,2.133,75,1.72,79,1.42,80,1.72,81,2.808,82,1.043,83,2.534,84,2.808,85,2.808,86,1.251,91,1.328,119,3.097,120,3.175,121,3.756,122,3.732,123,3.732,124,3.732,125,3.756,126,3.732,127,3.732]],["title/injectables/ApiKeyTcpGuard.html",[32,0.649,128,2.016]],["body/injectables/ApiKeyTcpGuard.html",[0,0.139,1,2.324,3,0.253,4,0.253,5,0.224,8,0.601,10,2.395,11,2.174,13,0.38,15,1.726,16,0.553,17,0.023,18,1.08,21,0.752,24,0.455,28,0.253,30,0.016,31,0.016,32,0.921,34,1.426,35,3.495,37,2.651,38,3.398,39,2.86,41,3.73,42,3.398,43,3.581,44,1.112,45,3.826,46,3.398,47,1.19,48,2.544,50,1.331,51,0.921,52,1.59,53,1.045,54,0.752,55,1.045,56,3.398,57,3.398,58,3.73,60,3.104,61,3.398,62,3.765,63,3.104,64,3.104,65,3.104,66,1.045,67,2.966,68,3.398,69,2.651,70,2.468,71,1.19,72,0.646,79,1.426,80,1.726,81,2.819,82,1.045,83,2.544,84,2.819,85,2.819,86,0.939,91,1.331,121,3.765,128,2.86,129,3.187,130,3.104,131,3.746,132,3.746,133,3.746,134,3.187,135,1.79,136,3.746,137,3.746,138,5.003]],["title/modules/AppModule.html",[139,1.056,140,2.395]],["body/modules/AppModule.html",[0,0.148,3,0.268,4,0.268,5,0.237,17,0.024,18,0.684,24,0.527,28,0.268,30,0.017,31,0.017,71,1.262,72,0.684,79,1.512,80,1.83,91,1.057,110,1.608,139,1.558,140,4.843,141,1.608,142,2.244,143,3.379,144,3.379,145,4.065,146,2.881,147,3.745,148,4.065,149,3.745,150,4.065,151,2.565,152,1.959,153,1.959,154,3.971,155,3.072,156,3.971,157,3.379,158,3.379,159,2.464,160,3.379,161,2.988,162,3.971,163,3.971,164,2.27,165,3.379,166,3.226,167,3.971,168,3.379,169,3.971,170,3.971,171,2.988,172,5.2,173,3.971,174,2.988]],["title/modules/ClientsModule.html",[139,1.056,145,2.189]],["body/modules/ClientsModule.html",[0,0.151,3,0.274,4,0.274,5,0.242,17,0.023,24,0.499,28,0.274,30,0.017,31,0.017,40,1.999,71,1.674,72,0.698,79,1.542,80,1.867,91,1.078,130,2.514,139,1.578,141,1.641,142,2.274,145,4.303,146,2.843,151,2.599,152,1.999,153,1.999,155,2.792,164,2.317,171,3.965,175,3.448,176,4.052,177,3.448,178,5.707,179,5.707,180,5.707,181,5.707,182,4.052,183,3.269,184,3.578,185,1.101,186,3.012,187,4.052,188,1.999,189,3.578,190,2.317,191,4.21,192,4.052,193,4.052,194,3.049,195,4.052,196,4.052,197,3.049,198,3.965]],["title/modules/ConfigurationModule.html",[139,1.056,146,1.522]],["body/modules/ConfigurationModule.html",[0,0.089,3,0.162,4,0.162,5,0.143,10,0.859,15,1.106,16,0.265,17,0.024,18,0.414,23,1.868,24,0.47,28,0.162,30,0.012,31,0.012,51,0.442,54,0.361,71,2.004,72,0.414,73,1.271,74,2.08,75,1.677,79,0.913,86,1.322,91,1.738,107,4.175,108,1.09,110,1.474,111,1.928,139,1.09,141,0.972,142,1.571,146,2.936,149,3.174,151,1.795,152,1.184,153,1.184,155,1.928,157,2.041,160,2.041,161,1.806,168,2.041,171,4.81,174,4.341,183,2.258,185,0.76,188,1.184,190,2.08,191,4.341,194,4.341,197,4.341,199,2.041,200,2.041,201,2.4,202,2.041,203,4.908,204,4.908,205,4.908,206,4.908,207,4.908,208,5.177,209,4.908,210,4.908,211,4.908,212,3.966,213,2.4,214,7.085,215,4.397,216,2.4,217,2.4,218,2.041,219,2.4,220,2.041,221,2.041,222,2.4,223,3.639,224,1.372,225,1.677,226,4.907,227,2.4,228,2.4,229,2.4,230,2.4,231,4.397,232,2.4,233,2.4,234,3.096,235,1.806,236,2.4,237,2.4,238,2.4,239,2.4,240,2.4,241,3.693,242,2.041,243,2.4,244,2.4,245,2.4,246,2.4,247,2.4,248,2.4,249,2.4,250,2.4,251,2.4,252,0.763,253,2.4,254,2.4,255,2.4,256,3.639,257,2.4,258,2.4,259,2.4,260,2.4,261,2.4,262,2.4,263,2.4]],["title/classes/CreateUserDto.html",[0,0.131,264,1.19]],["body/classes/CreateUserDto.html",[0,0.208,2,1.827,3,0.25,4,0.25,5,0.221,8,0.445,13,0.376,14,2.011,16,0.62,17,0.023,18,1.107,19,2.581,21,0.842,23,1.41,24,0.453,25,4.215,27,2.515,28,0.25,30,0.016,31,0.016,51,0.914,54,0.746,67,3.169,224,2.117,264,1.675,265,5.092,266,2.787,267,1.89,268,4.225,269,1.575,270,3.804,271,4.072,272,4.238,273,3.704,274,3.704,275,4.225,276,4.225,277,5.466,278,5.466,279,3.704,280,4.966,281,4.966,282,3.704,283,3.704,284,3.151,285,4.966,286,3.704,287,4.225,288,5.092,289,5.985,290,3.704,291,3.704,292,4.966,293,3.704,294,4.966,295,2.787,296,4.225,297,2.787,298,3.372,299,5.092,300,3.704,301,4.966,302,4.215,303,3.704,304,3.704,305,4.966,306,3.704,307,3.704,308,3.704,309,4.966,310,3.704]],["title/injectables/GrpcUsersClient.html",[32,0.649,184,2.395]],["body/injectables/GrpcUsersClient.html",[0,0.074,3,0.134,4,0.134,5,0.119,8,0.581,10,1.127,11,1,13,0.202,14,1.275,15,2.229,16,0.596,17,0.024,18,1.053,21,0.885,24,0.469,28,0.134,29,1.451,30,0.01,31,0.01,32,0.579,34,0.757,40,2.756,44,0.7,47,1,50,1.182,51,0.89,52,1,53,1.011,54,0.773,55,1.011,66,1.296,71,0.632,72,0.343,73,1.054,74,1.138,75,0.917,76,3.906,77,1.351,78,1.351,79,0.757,80,0.917,82,1.126,86,1.533,91,1.039,108,2.037,113,1.138,114,0.982,116,2.325,135,1.828,184,3.015,185,1.34,186,3.288,188,0.982,225,3.064,252,1.537,264,1.631,267,1.69,269,1.593,311,4.522,312,1.351,313,2.678,314,2.325,315,3.906,316,3.871,317,1.798,318,1.275,319,2.19,320,1.275,321,1.798,322,1.693,323,4.44,324,3.148,325,1.451,326,2.678,327,2.678,328,2.369,329,4.204,330,3.778,331,1.99,332,1.8,333,1.693,334,2.083,335,2.475,336,1.99,337,1.275,338,1.359,339,1.275,340,1.553,341,1.99,342,2.11,343,1.94,344,1.99,345,1.553,346,1.668,347,1.553,348,1.553,349,2.725,350,1.553,351,1.99,352,1.275,353,1.553,354,1.958,355,1.99,356,2.652,357,1.99,358,2.369,359,1.693,360,1.693,361,1.275,362,2.353,363,1.99,364,1.693,365,1.693,366,2.678,367,1.99,368,1.953,369,1.693,370,1.668,371,1.693,372,1.351,373,2.369,374,1.138,375,1.99,376,1.498,377,1.99,378,1.99,379,5.388,380,1.99,381,0.982,382,1.054,383,4.376,384,3.239,385,1.99,386,4.376,387,1.99,388,1.693,389,1.99,390,0.806,391,1.99,392,1.99,393,1.99,394,1.693]],["title/controllers/GrpcUsersService.html",[374,2.016,395,1.522]],["body/controllers/GrpcUsersService.html",[0,0.094,3,0.171,4,0.171,5,0.151,8,0.304,11,0.804,13,0.257,16,0.502,17,0.024,19,2.611,21,0.851,24,0.483,28,0.171,30,0.012,31,0.012,33,1.447,40,1.869,44,0.842,47,0.804,50,1.341,51,1.043,52,0.804,53,1.053,54,0.758,55,1.053,66,1.351,71,0.804,72,0.436,82,1.184,86,0.635,91,1.508,108,2.084,110,1.534,116,1.092,135,1.962,185,1.128,188,1.249,225,2.092,252,0.804,264,1.821,267,1.728,269,1.611,314,1.092,317,2.042,318,1.534,319,2.487,320,1.839,321,2.042,325,1.166,332,2.166,334,2.295,335,2.619,337,1.534,338,1.635,339,1.534,342,2.104,343,1.532,345,1.869,346,2.008,347,1.869,348,1.869,349,3.002,352,1.534,354,1.728,361,1.534,362,3.2,370,2.008,372,1.719,374,2.166,381,1.249,382,1.341,384,1.341,390,1.025,395,2.176,396,1.341,397,3.989,398,2.154,399,2.596,400,6.538,401,2.531,402,2.531,403,2.851,404,2.531,405,2.531,406,2.851,407,2.531,408,2.851,409,2.531,410,2.154,411,2.154,412,3.224,413,3.224,414,1.249,415,1.341,416,1.166,417,2.008,418,1.341,419,1.571,420,1.905,421,2.154,422,2.351,423,2.154,424,2.154,425,2.154,426,2.154,427,2.008,428,2.154,429,1.905,430,2.154,431,2.154,432,2.154,433,1.905,434,2.154,435,2.531,436,1.905,437,2.008,438,1.447,439,1.447,440,1.905,441,2.154,442,2.154,443,1.905,444,2.154,445,2.154,446,2.154,447,2.531,448,2.531]],["title/modules/GuardsModule.html",[139,1.056,147,2.016]],["body/modules/GuardsModule.html",[0,0.159,3,0.288,4,0.288,5,0.254,10,2.148,11,1.906,17,0.023,24,0.494,28,0.288,30,0.017,31,0.017,33,4.046,72,0.734,119,4.392,128,4.046,139,1.63,141,1.726,142,2.349,146,2.882,147,4.096,151,2.685,152,2.102,153,2.102,155,2.884,164,2.436,183,3.377,190,3.111,426,3.626,449,3.626,450,3.626,451,4.261,452,3.626,453,4.261,454,4.261,455,3.626]],["title/classes/GuidDto.html",[0,0.131,362,1.869]],["body/classes/GuidDto.html",[0,0.22,2,2.396,3,0.328,4,0.328,5,0.29,8,0.583,13,0.493,14,2.391,16,0.537,17,0.023,18,1.018,19,2.238,21,0.73,24,0.447,25,4.443,26,4.132,27,3.298,28,0.328,29,2.238,30,0.019,31,0.019,267,2.248,298,4.01,343,2.288,362,3.129,456,4.132,457,5.905,458,4.856,459,4.856,460,4.443,461,3.664,462,4.01,463,4.856]],["title/injectables/HashPipe.html",[32,0.649,427,1.869]],["body/injectables/HashPipe.html",[0,0.143,3,0.259,4,0.259,5,0.229,8,0.684,13,0.389,16,0.562,17,0.023,21,0.764,23,2.469,24,0.431,28,0.259,30,0.016,31,0.016,32,0.935,34,1.459,44,1.129,47,1.614,50,1.352,51,0.935,52,1.614,53,1.061,54,0.764,55,1.061,66,1.061,71,1.218,72,0.661,79,1.459,80,1.766,82,1.061,86,0.961,91,1.02,114,1.891,116,1.654,135,1.218,241,4.75,242,4.322,271,3.917,272,4.287,296,5.162,314,1.654,325,2.341,427,3.215,433,3.823,464,4.848,465,3.261,466,3.468,467,4.882,468,6.068,469,3.833,470,3.833,471,5.698,472,3.152,473,3.45,474,5.08,475,3.833,476,2.692,477,5.162,478,5.08,479,3.833,480,3.261,481,3.833,482,5.08,483,3.833,484,5.08,485,5.08,486,3.833]],["title/controllers/HealthController.html",[395,1.522,487,2.395]],["body/controllers/HealthController.html",[0,0.134,3,0.243,4,0.243,5,0.215,8,0.433,10,1.29,11,1.145,13,0.366,15,2.246,17,0.024,18,0.952,19,1.66,21,0.542,24,0.448,28,0.243,30,0.016,31,0.016,44,1.083,47,1.145,51,0.663,52,1.145,61,2.447,63,2.236,66,1.018,71,1.145,72,0.621,73,1.909,74,2.06,75,1.66,79,1.371,80,1.66,82,1.331,86,0.903,91,0.959,108,1.46,116,2.384,125,2.711,185,1.154,225,2.246,234,4.147,252,1.965,287,4.147,314,2.75,319,2.404,325,1.66,329,3.668,338,2.668,345,2.404,347,3.38,348,3.144,376,2.711,395,2.384,396,1.909,472,2.236,487,3.751,488,3.065,489,3.065,490,5.524,491,3.603,492,3.603,493,5.524,494,4.147,495,5.918,496,5.918,497,5.918,498,3.603,499,2.711,500,3.603,501,3.603,502,2.447,503,4.874,504,4.874,505,4.874,506,3.065,507,3.603,508,3.603,509,3.603,510,3.065,511,3.603,512,4.874,513,3.603,514,3.603,515,2.447,516,3.603,517,3.603]],["title/modules/HealthModule.html",[139,1.056,148,2.189]],["body/modules/HealthModule.html",[0,0.179,3,0.326,4,0.326,5,0.288,17,0.023,24,0.512,28,0.326,30,0.019,31,0.019,72,0.831,139,1.761,141,1.952,142,2.537,146,2.972,148,4.272,151,2.9,152,2.378,153,2.378,155,3.115,164,2.756,396,3.115,487,4.307,499,3.628,518,4.821,519,4.821,520,4.821,521,5.879,522,4.102,523,5.879,524,4.821]],["title/injectables/HttpExceptionInterceptor.html",[32,0.649,422,2.189]],["body/injectables/HttpExceptionInterceptor.html",[0,0.154,3,0.28,4,0.28,5,0.247,8,0.641,13,0.42,16,0.458,17,0.023,21,0.622,24,0.448,28,0.28,30,0.017,31,0.017,32,0.983,34,1.575,41,3.877,44,1.187,51,0.761,53,0.864,54,0.622,55,0.864,58,3.877,64,3.313,65,3.313,66,1.116,72,0.713,82,1.116,90,3.52,91,1.101,109,4.868,113,2.365,114,2.041,188,2.041,422,3.313,525,4.543,526,3.52,527,5.34,528,5.34,529,6.249,530,6.469,531,6.249,532,5.34,533,4.985,534,6.249,535,4.137,536,5.34,537,5.34,538,5.34,539,5.34,540,5.34,541,4.137,542,4.137,543,4.137,544,3.313,545,4.019,546,4.137]],["title/interfaces/IGrpcUsersService.html",[356,2.395,547,1.428]],["body/interfaces/IGrpcUsersService.html",[3,0.17,4,0.17,5,0.15,8,0.704,10,2.313,11,2.053,13,0.256,16,0.626,17,0.023,21,0.85,24,0.408,28,0.17,30,0.012,31,0.012,40,3.042,44,0.839,50,1.338,51,0.695,53,1.181,54,0.85,55,1.181,66,1.349,69,3.423,76,4.935,77,1.71,78,1.71,82,1.349,108,1.935,109,4.915,113,1.44,135,2.075,185,0.789,252,1.598,264,1.817,267,0.959,269,1.601,317,1.529,318,1.529,319,1.862,320,1.529,321,2.037,332,2.158,334,2.29,335,2.616,337,1.529,338,1.629,339,1.529,342,2.1,343,1.527,345,1.862,346,2,347,1.862,348,1.862,349,2.996,352,1.529,354,1.723,356,2.563,361,1.529,362,3.195,381,1.242,382,1.334,390,1.02,403,2.84,406,2.84,408,2.84,414,1.242,415,1.334,420,1.895,547,1.833,548,1.44,549,3.638,550,2.143,551,2.518,552,6.46,553,3.211,554,2.518,555,2.518,556,3.775,557,2.518,558,3.775,559,2.518,560,2.518]],["title/interfaces/ILoggingService.html",[547,1.428,561,2.189]],["body/interfaces/ILoggingService.html",[3,0.315,4,0.315,5,0.278,8,0.691,9,3.292,13,0.473,16,0.516,17,0.023,18,1.177,21,0.701,28,0.389,30,0.018,31,0.018,44,1.28,53,0.974,54,0.701,55,0.974,66,0.974,82,1.203,86,1.169,252,1.83,544,4.238,547,1.888,548,2.665,561,3.573,562,3.508,563,4.334,564,4.9,565,4.9,566,5.811,567,4.662,568,4.9,569,5.553,570,3.166,571,3.573,572,3.573]],["title/interfaces/IUsersClient.html",[368,2.189,547,1.428]],["body/interfaces/IUsersClient.html",[3,0.199,4,0.199,5,0.176,8,0.651,9,2.423,13,0.299,16,0.6,17,0.023,18,1.107,21,0.926,24,0.376,28,0.199,29,1.359,30,0.014,31,0.014,44,0.942,50,1.443,51,0.78,53,1.133,54,0.815,55,1.133,66,1.405,82,1.2,108,2.128,135,2.004,185,1.133,186,3.101,264,1.938,267,1.123,269,1.661,316,4.501,317,2.197,318,1.717,319,2.676,320,1.717,321,2.197,332,2.423,334,2.423,335,2.7,337,1.717,338,1.829,339,1.717,340,2.091,342,2.334,343,2.018,345,2.091,346,2.246,347,2.091,348,2.091,349,3.17,350,2.091,352,1.717,353,2.091,354,2.187,361,1.717,368,2.63,381,1.455,382,1.563,390,1.194,395,1.829,414,1.455,415,1.563,416,1.359,439,2.423,547,2.009,548,1.686,549,3.913,573,2.509,574,2.949,575,3.189,576,2.949,577,2.949,578,2.949,579,2.949,580,2.949,581,2.949]],["title/interfaces/IUsersDatabaseService.html",[547,1.428,582,2.189]],["body/interfaces/IUsersDatabaseService.html",[3,0.203,4,0.203,5,0.179,8,0.695,13,0.305,16,0.605,17,0.023,18,1.112,21,0.87,24,0.227,28,0.29,30,0.014,31,0.014,44,0.954,50,1.455,51,0.79,53,1.143,54,0.822,55,1.143,66,1.367,67,2.969,70,3.228,82,1.209,86,0.753,108,2.097,110,2.215,111,2.898,135,1.913,185,1.143,269,1.707,317,2.215,318,1.739,320,1.739,321,2.215,334,2.65,335,2.65,337,1.739,339,1.739,340,2.118,342,2.269,343,2.207,350,2.118,352,1.739,353,2.118,390,2.215,416,1.384,472,1.863,476,2.275,515,4.087,547,1.216,548,1.717,549,3.734,582,2.664,583,2.26,584,3.653,585,3.003,586,4.354,587,3.003,588,2.916,589,3.003,590,3.003,591,3.231,592,3.003,593,3.231,594,2.555,595,2.039,596,2.664]],["title/interfaces/IUsersService.html",[417,1.869,547,1.428]],["body/interfaces/IUsersService.html",[3,0.206,4,0.206,5,0.182,8,0.699,13,0.309,16,0.609,17,0.023,18,1.116,21,0.875,24,0.383,28,0.293,30,0.014,31,0.014,39,1.743,44,0.964,50,1.465,51,1.013,53,1.15,54,0.875,55,1.15,66,1.329,82,1.216,86,0.764,108,2.066,135,1.849,185,1.15,252,1.379,264,2.04,269,1.692,317,2.23,318,1.758,320,1.758,321,2.357,334,2.45,335,2.45,337,2.23,339,1.758,340,2.141,342,2.351,343,2.146,350,2.141,352,1.758,353,2.141,354,2.421,361,1.758,390,1.758,399,2.481,414,1.504,415,1.616,416,1.405,417,2.3,418,2.3,438,2.481,466,2.889,472,1.892,476,2.918,547,1.235,548,1.743,595,2.071,597,2.294,598,3.693,599,3.266,600,3.049,601,3.049,602,3.049,603,3.049,604,3.049,605,2.594,606,4.951,607,2.294,608,4.951,609,2.294,610,4.3,611,2.594]],["title/modules/LoggingModule.html",[139,1.056,149,2.016]],["body/modules/LoggingModule.html",[0,0.192,3,0.349,4,0.349,5,0.308,17,0.023,24,0.494,28,0.349,30,0.02,31,0.02,72,0.889,139,1.834,141,2.09,149,3.501,183,3.201,190,2.95,191,3.504,198,3.883,572,4.052,612,5.16,613,4.39,614,3.8,615,5.16]],["title/injectables/LoggingService.html",[32,0.649,614,2.189]],["body/injectables/LoggingService.html",[0,0.168,3,0.306,4,0.306,5,0.27,8,0.679,9,3.231,13,0.459,16,0.5,17,0.023,18,1.168,21,0.68,24,0.428,28,0.306,29,2.085,30,0.018,31,0.018,32,1.04,34,1.722,44,1.256,53,0.945,54,0.68,55,0.945,66,0.945,72,0.78,82,1.181,114,2.232,252,1.796,544,4.207,561,3.507,563,4.253,564,4.809,565,4.809,566,5.768,568,4.809,569,5.494,570,3.072,571,3.507,613,3.849,614,3.507,616,3.849,617,4.524,618,4.524,619,4.524]],["title/modules/PipesModule.html",[139,1.056,166,2.189]],["body/modules/PipesModule.html",[0,0.18,3,0.327,4,0.327,5,0.289,17,0.023,24,0.481,28,0.327,30,0.019,31,0.019,72,0.835,139,1.766,141,1.962,142,2.545,146,2.975,151,2.908,152,2.39,153,2.39,155,3.124,164,2.769,166,4.37,183,3.006,190,3.371,427,3.697,429,3.645,473,3.29,620,4.122,621,4.122,622,4.845,623,4.845]],["title/injectables/SecretManagerService.html",[32,0.649,212,2.189]],["body/injectables/SecretManagerService.html",[0,0.109,3,0.199,4,0.199,5,0.175,8,0.595,10,1.94,11,1.721,13,0.298,14,1.713,16,0.548,17,0.023,18,1.123,21,0.863,23,1.61,24,0.41,28,0.199,30,0.014,31,0.014,32,0.778,34,1.119,44,0.94,47,1.344,51,0.912,52,1.344,53,0.884,54,0.898,55,0.884,66,1.248,67,2.672,70,2.672,71,0.934,72,0.507,75,1.355,79,1.119,82,0.884,86,1.242,91,1.441,108,1.79,116,1.825,185,0.884,186,3.281,212,3.361,220,2.502,221,5.764,225,2.957,252,1.344,314,2.719,325,1.949,328,4.076,358,3.183,384,1.558,461,3.561,476,2.87,502,3.678,544,2.624,561,3.361,563,3.183,572,1.824,575,4.076,614,3.073,624,4.497,625,2.213,626,4.883,627,4.23,628,4.883,629,5.417,630,5.417,631,4.953,632,2.941,633,4.953,634,2.941,635,2.941,636,5.417,637,2.941,638,2.941,639,2.941,640,5.417,641,4.953,642,5.417,643,2.941,644,2.502,645,2.941,646,2.502,647,2.941,648,2.502,649,2.502,650,2.502,651,2.502,652,2.502,653,2.941,654,2.941,655,2.941,656,2.941,657,3.598,658,2.941,659,2.502,660,2.941,661,2.941,662,2.502,663,2.502,664,2.941,665,2.941]],["title/injectables/TcpUsersClient.html",[32,0.649,189,2.395]],["body/injectables/TcpUsersClient.html",[0,0.072,3,0.131,4,0.131,5,0.116,8,0.574,10,1.107,11,0.982,13,0.197,14,1.252,15,2.696,16,0.529,17,0.024,18,1.047,21,0.879,23,0.74,24,0.432,28,0.131,29,0.896,30,0.01,31,0.01,32,0.569,34,0.74,44,0.687,47,0.982,50,1.273,51,0.807,52,0.982,53,0.999,54,0.719,55,0.999,66,1.32,71,0.618,72,0.335,79,0.74,80,0.896,82,1.116,86,1.389,91,1.166,108,2.046,110,1.558,111,1.638,113,1.112,114,0.96,116,1.334,130,2.72,135,1.859,185,1.32,186,3.526,188,0.96,189,2.977,225,3.099,252,0.982,264,1.613,267,0.74,269,1.601,312,1.321,313,2.63,314,2.392,316,3.833,317,1.937,318,1.558,319,2.36,320,1.558,321,1.937,322,1.655,325,1.425,326,3.73,327,2.63,329,3.833,330,2.63,332,1.767,333,1.655,334,2.063,335,2.461,337,1.252,338,1.334,339,1.252,340,1.525,342,2.095,343,1.926,345,1.525,346,1.638,347,1.525,348,1.525,349,2.699,350,1.525,352,1.252,353,1.525,354,1.821,359,2.63,360,1.655,361,1.252,364,1.655,365,1.655,366,1.655,368,1.918,369,1.655,370,1.638,371,1.655,372,1.321,376,1.464,381,0.96,382,1.031,383,4.07,384,3.466,386,4.07,388,1.655,390,0.788,394,1.655,510,4.333,575,2.327,657,1.655,666,5.081,667,3.848,668,4.384,669,4.384,670,3.092,671,3.092,672,1.945,673,1.945,674,3.092,675,4.384,676,1.945,677,1.945,678,1.945,679,1.945,680,1.945,681,3.092,682,1.945,683,5.093,684,5.093,685,4.333,686,3.848,687,1.945,688,1.945]],["title/classes/UpdateUserDto.html",[0,0.131,354,1.343]],["body/classes/UpdateUserDto.html",[0,0.193,2,2.559,3,0.351,4,0.351,5,0.31,8,0.623,17,0.023,24,0.465,28,0.351,30,0.02,31,0.02,42,3.522,50,1.38,224,2.965,264,1.749,266,3.903,267,2.338,269,1.45,354,2.338,361,2.101,689,4.413,690,6.143,691,5.187,692,5.187]],["title/classes/User.html",[0,0.131,269,0.833]],["body/classes/User.html",[0,0.14,2,1.862,3,0.255,4,0.255,5,0.225,8,0.453,9,2.875,13,0.383,14,2.037,16,0.715,17,0.024,18,1.154,19,2.779,21,0.906,23,2.295,24,0.381,28,0.382,30,0.016,31,0.016,54,0.756,86,0.946,110,2.816,159,2.342,185,1.26,269,1.631,270,3.84,271,3.897,272,4.265,342,1.801,343,1.907,473,4.095,502,2.563,693,2.563,694,4.726,695,6.031,696,5.131,697,3.775,698,3.784,699,3.775,700,3.775,701,4.278,702,3.775,703,6.281,704,3.775,705,4.255,706,2.84,707,2.84,708,6.031,709,2.563,710,3.211]],["title/classes/User-1.html",[0,0.11,95,2.003,269,0.697]],["body/classes/User-1.html",[0,0.172,2,1.64,3,0.225,4,0.225,5,0.198,8,0.747,9,2.637,13,0.337,14,1.868,16,0.665,17,0.024,18,1.121,19,2.636,21,0.903,23,2.178,24,0.455,28,0.225,30,0.015,31,0.015,47,1.057,51,0.849,52,1.466,53,0.695,54,0.903,55,0.695,82,0.695,86,0.834,135,1.818,224,1.901,264,1.93,269,1.685,270,3.597,271,3.729,272,4.082,275,3.925,276,3.925,284,3.925,297,2.502,299,4.507,302,3.472,325,2.126,342,2.049,343,1.787,361,1.347,414,1.64,460,2.502,466,2.637,473,3.885,570,2.258,696,4.868,698,4.306,701,3.925,711,2.829,712,4.613,713,4.613,714,5.292,715,3.325,716,4.613,717,3.325,718,6.011,719,3.325,720,4.613,721,4.613,722,4.613,723,4.613,724,4.613,725,3.325,726,3.325,727,4.613,728,2.502,729,3.325,730,3.325,731,3.325,732,3.325,733,3.325,734,3.325,735,3.325,736,3.325]],["title/classes/UserListDto.html",[0,0.131,370,1.869]],["body/classes/UserListDto.html",[0,0.184,2,2.443,3,0.335,4,0.335,5,0.296,8,0.595,13,0.503,14,2.42,16,0.548,17,0.023,21,0.744,24,0.375,28,0.335,29,2.283,30,0.019,31,0.019,185,1.425,267,2.275,269,1.61,338,2.579,370,3.166,416,2.283,588,4.058,737,5.084,738,4.214,739,5.976,740,4.954,741,5.976]],["title/injectables/UsersDatabaseService.html",[32,0.649,742,2.395]],["body/injectables/UsersDatabaseService.html",[0,0.087,3,0.158,4,0.158,5,0.139,8,0.659,13,0.237,16,0.576,17,0.024,18,1.04,21,0.825,24,0.416,28,0.158,30,0.011,31,0.011,32,0.655,34,0.888,44,0.791,47,1.132,50,1.461,51,1.111,52,1.132,53,1.088,54,0.783,55,1.088,66,1.286,67,2.708,70,3.038,72,0.402,82,1.147,86,1.306,91,1.461,95,2.418,108,2.029,110,1.958,111,2.562,114,1.15,135,1.745,159,1.447,185,1.147,225,3.021,269,1.669,314,1.006,317,1.958,318,1.442,320,1.442,321,1.958,334,2.494,335,2.572,337,1.442,339,1.442,340,1.757,342,2.109,343,2.168,350,1.757,352,1.442,353,1.757,384,2.76,390,1.958,416,1.074,439,2.036,476,1.887,515,3.999,545,3.251,582,2.209,584,3.03,586,3.919,588,2.418,591,2.68,593,2.68,607,2.68,659,3.03,662,3.03,663,4.114,705,3.251,706,1.755,707,1.755,714,1.984,728,1.755,742,3.284,743,4.859,744,1.984,745,2.332,746,5.491,747,2.332,748,4.32,749,4.836,750,2.332,751,2.332,752,2.332,753,2.332,754,2.332,755,2.332,756,1.755,757,1.755,758,2.332,759,2.332,760,2.332,761,4.32,762,3.561,763,3.561,764,3.561,765,3.561,766,2.332,767,2.332,768,2.332,769,2.332,770,3.561,771,2.332,772,2.332,773,3.561,774,2.332,775,2.332,776,2.332]],["title/controllers/UsersHttpController.html",[395,1.522,777,2.395]],["body/controllers/UsersHttpController.html",[0,0.062,3,0.113,4,0.113,5,0.1,8,0.852,13,0.17,16,0.618,17,0.023,18,0.935,19,2.195,21,0.716,24,0.38,28,0.113,30,0.009,31,0.009,44,0.61,47,0.533,50,1.267,51,1.028,52,0.533,53,0.841,54,0.755,55,0.841,60,1.703,66,1.195,69,2.779,71,0.533,72,0.289,73,0.889,74,0.959,75,0.773,82,1.05,91,1.181,108,1.921,116,0.724,135,1.854,185,1.134,224,0.959,252,1.107,264,1.695,267,1.045,269,1.664,270,2.732,271,2.496,302,3.584,314,0.724,317,1.629,318,1.41,319,1.985,320,1.41,321,2.036,325,0.773,328,4.202,334,1.929,335,2.261,337,1.112,338,1.185,339,1.112,340,0.828,342,2.328,343,2.061,345,1.985,346,2.132,347,1.985,348,1.718,349,2.351,350,0.828,352,1.797,353,0.828,354,2.066,361,1.112,381,1.354,382,1.454,390,1.797,395,1.503,396,0.889,397,3.414,399,1.991,414,0.828,415,0.889,416,0.773,417,1.454,418,0.889,419,1.041,436,1.263,437,1.454,438,0.959,439,0.959,440,1.263,443,1.263,461,2.161,462,2.365,466,2.998,476,2.132,489,1.428,494,5.456,533,1.263,571,1.703,586,2.066,588,1.864,591,1.263,593,2.066,599,1.263,609,3.028,777,1.864,778,1.428,779,1.678,780,4.024,781,2.745,782,2.745,783,5.584,784,4.024,785,5.245,786,4.024,787,4.024,788,1.678,789,1.678,790,1.678,791,5.584,792,2.745,793,1.678,794,4.763,795,1.678,796,1.678,797,4.763,798,3.483,799,4.763,800,4.763,801,4.763,802,4.763,803,4.763,804,5.027,805,2.745,806,4.763,807,1.678,808,1.678,809,1.678,810,2.745,811,1.678,812,1.678,813,1.678,814,1.678,815,1.678,816,1.678,817,1.678,818,1.678,819,2.745,820,2.745,821,1.678,822,4.024,823,1.678,824,5.027,825,4.024,826,6.459,827,1.678,828,1.678,829,1.678,830,1.678,831,4.024,832,1.678,833,1.678,834,1.678,835,3.483,836,1.678,837,1.678,838,1.678,839,1.678,840,1.678,841,1.678,842,1.428,843,1.428,844,1.428,845,1.428,846,1.428,847,1.14]],["title/modules/UsersModule.html",[139,1.056,150,2.189]],["body/modules/UsersModule.html",[0,0.152,3,0.276,4,0.276,5,0.244,17,0.024,24,0.533,28,0.276,30,0.017,31,0.017,54,0.614,72,0.704,139,1.587,141,1.655,142,2.286,146,2.85,147,3.775,150,4.227,151,2.613,152,2.015,153,2.015,155,2.807,158,3.476,159,2.535,164,2.336,165,3.476,185,0.854,190,2.336,191,3.597,198,3.986,269,0.965,374,3.361,396,2.807,418,2.807,419,2.535,437,2.807,596,3.287,694,3.075,709,3.597,728,3.075,742,3.597,756,3.075,757,3.075,777,3.992,848,4.086,849,4.086,850,4.086,851,3.992,852,4.086,853,5.879,854,4.086,855,4.086,856,4.086,857,4.086,858,4.086,859,4.086]],["title/injectables/UsersService.html",[32,0.649,437,1.869]],["body/injectables/UsersService.html",[0,0.091,3,0.165,4,0.165,5,0.146,8,0.671,13,0.248,16,0.588,17,0.024,18,1.054,21,0.84,23,1.884,24,0.423,28,0.165,30,0.012,31,0.012,32,0.678,34,0.929,39,1.395,44,0.819,47,1.172,50,1.317,51,1.181,52,1.172,53,1.11,54,0.799,55,1.11,66,1.248,71,0.776,72,0.421,82,1.168,86,1.401,91,1.182,108,1.996,110,0.989,111,1.953,114,1.204,116,1.053,135,1.844,185,1.034,225,2.956,252,1.573,264,1.885,269,1.663,314,1.053,317,2.005,318,1.493,320,1.493,321,2.152,334,2.263,335,2.698,337,2.005,339,1.493,340,1.819,342,2.232,343,2.015,350,1.819,352,1.493,353,1.819,354,2.274,358,2.774,361,1.493,384,2.623,390,1.493,399,2.108,414,1.204,415,1.293,416,1.125,417,1.953,419,1.514,437,2.623,438,2.108,466,2.54,476,2.623,515,2.504,545,3.999,582,3.071,596,1.514,598,3.137,599,2.774,606,4.521,607,3.343,608,4.521,609,1.837,610,4.937,611,3.78,756,1.837,757,1.837,860,2.077,861,2.441,862,2.441,863,3.687,864,4.443,865,2.441,866,2.441,867,2.441,868,2.441,869,2.441,870,2.441,871,2.441,872,2.441,873,2.441,874,2.441,875,4.443,876,2.441,877,2.441,878,2.441,879,2.441]],["title/controllers/UsersTcpController.html",[395,1.522,851,2.395]],["body/controllers/UsersTcpController.html",[0,0.089,1,3.68,3,0.161,4,0.161,5,0.142,8,0.286,11,0.758,13,0.242,16,0.264,17,0.024,19,2.552,21,0.832,24,0.483,28,0.161,30,0.012,31,0.012,44,0.805,47,0.758,50,1.474,51,0.968,52,0.758,53,1.099,54,0.791,55,1.099,66,1.334,71,0.758,72,0.411,82,1.157,86,0.598,91,1.4,108,2.054,110,1.467,116,1.029,128,1.363,130,2.248,134,2.029,135,1.968,185,1.099,188,1.177,225,2.019,252,0.758,264,1.477,267,1.667,269,1.597,314,1.029,317,1.981,318,1.981,319,2.732,320,2.131,321,2.243,325,1.099,332,2.071,334,2.243,335,2.585,337,1.467,338,1.563,339,1.467,342,2.062,343,1.477,345,1.787,346,1.92,347,1.787,348,1.787,349,3.05,352,1.467,354,1.667,361,1.467,362,2.592,370,1.92,372,1.62,381,1.177,382,1.264,384,1.264,390,0.966,395,2.111,396,1.264,397,3.909,399,2.504,403,2.726,406,2.726,408,2.726,410,2.029,411,2.029,412,3.082,413,3.082,414,1.177,415,1.264,416,1.099,417,1.92,418,1.264,419,1.48,420,1.795,421,2.029,422,2.248,423,2.029,424,2.029,425,2.029,427,1.92,428,2.029,429,1.795,430,2.029,431,2.029,432,2.029,433,1.795,434,2.029,436,1.795,437,1.92,438,1.363,439,1.363,440,1.795,441,2.029,442,2.029,443,1.795,444,2.029,445,2.029,446,2.029,455,2.029,533,2.726,553,3.082,571,2.248,685,4.713,842,3.082,843,3.082,844,3.082,845,3.082,846,3.082,847,1.62,851,2.46,880,2.029,881,5.539,882,2.385,883,2.385,884,2.385,885,2.385,886,2.385,887,2.385,888,5.757,889,2.385,890,2.385,891,2.385,892,2.385]],["title/coverage.html",[893,4.087]],["body/coverage.html",[0,0.234,1,1.952,5,0.188,6,2.676,7,2.676,11,1.634,16,0.348,17,0.023,30,0.014,31,0.014,32,1.23,33,1.798,35,3.465,36,2.676,37,1.667,40,1.552,43,1.798,51,0.579,98,2.676,119,1.952,120,2.676,128,1.798,129,2.676,184,2.136,185,1.074,189,2.136,212,1.952,264,1.061,265,2.676,266,3.339,269,1.048,298,2.136,311,3.339,312,3.492,354,1.197,356,2.136,362,1.667,368,1.952,370,1.667,373,2.367,374,1.798,395,2.41,397,3.492,398,2.676,417,1.667,418,1.667,422,1.952,427,1.667,437,1.667,456,2.676,464,2.676,465,2.676,487,2.136,488,2.676,506,2.676,525,2.676,526,2.676,547,2.385,549,3.465,550,2.676,561,1.952,562,3.339,572,1.952,573,2.676,582,1.952,583,3.339,596,1.952,597,3.339,614,1.952,616,2.676,624,2.367,625,2.367,666,2.676,689,2.676,693,3.014,709,2.136,711,2.676,737,2.676,738,2.676,742,2.136,743,2.676,744,2.676,777,2.136,778,2.676,847,4.15,851,2.136,860,2.676,880,2.676,893,2.676,894,3.146,895,3.146,896,7.277,897,4.438,898,6.111,899,6.802,900,5.585,901,5.585,902,4.438,903,6.28,904,2.676,905,2.676,906,2.676,907,6.111,908,3.146,909,3.146,910,2.676,911,2.676,912,4.751,913,4.751,914,2.676,915,2.676,916,2.676,917,2.676,918,3.146,919,3.146]],["title/dependencies.html",[142,1.83,235,2.22]],["body/dependencies.html",[0,0.211,17,0.023,27,3.1,30,0.018,31,0.018,72,0.787,76,3.1,77,3.1,78,3.1,113,2.61,142,1.97,159,2.833,161,3.436,188,2.252,224,2.61,297,3.436,460,3.436,480,3.884,499,3.436,522,3.884,626,3.884,628,3.884,644,3.884,706,3.436,920,4.566,921,4.566,922,4.566,923,4.566,924,4.566,925,4.566,926,4.566,927,4.566,928,6.479,929,4.566,930,4.566,931,4.566,932,4.566,933,4.566,934,4.566,935,4.566,936,4.566,937,4.566,938,4.566,939,4.566,940,4.566,941,4.566,942,4.566,943,4.566,944,4.566,945,4.566,946,4.566,947,4.566,948,4.566,949,4.566,950,4.566,951,4.566,952,4.566,953,4.566,954,4.566]],["title/miscellaneous/enumerations.html",[955,1.455,956,3.607]],["body/miscellaneous/enumerations.html",[10,1.411,11,1.252,13,0.4,17,0.023,23,2.782,30,0.017,31,0.017,69,2.087,73,2.741,75,2.661,79,1.969,125,2.965,218,4.401,624,2.965,625,3.893,646,3.352,648,4.401,649,5.218,650,3.352,651,5.419,652,3.352,955,1.943,956,3.352,957,3.94,958,6.133,959,3.94,960,3.94,961,3.94,962,3.94,963,3.94,964,2.965,965,5.776,966,3.94,967,5.776,968,3.94,969,5.776,970,3.94,971,3.94,972,5.776,973,3.94,974,3.94,975,3.94,976,3.94,977,3.94,978,6.133,979,6.133,980,6.133,981,3.94,982,3.94,983,3.94,984,3.94,985,5.173,986,5.173,987,5.173,988,5.173,989,5.173,990,5.173,991,5.173]],["title/miscellaneous/functions.html",[955,1.455,992,3.607]],["body/miscellaneous/functions.html",[8,0.711,13,0.366,16,0.721,17,0.022,18,1.215,23,1.858,29,2.249,30,0.016,31,0.016,40,1.781,50,0.961,51,0.664,53,1.292,54,1.01,55,1.292,66,1.237,70,1.781,108,1.081,110,1.462,111,2.586,121,2.716,130,2.24,135,1.147,186,2.79,241,4.798,267,2.427,268,3.071,277,4.152,278,4.152,288,4.704,295,4.655,338,1.558,381,1.781,466,2.79,467,3.672,477,3.071,544,3.675,570,2.451,571,3.028,595,3.314,847,3.314,904,3.071,905,4.704,910,3.071,911,4.152,912,3.071,913,5.264,914,4.152,915,4.152,916,4.152,917,4.152,955,1.781,992,3.071,993,3.61,994,3.61,995,5.923,996,3.61,997,3.61,998,4.88,999,3.61,1000,5.923,1001,3.61,1002,3.61,1003,3.61,1004,3.61,1005,3.61,1006,5.529,1007,3.61,1008,3.61,1009,3.61,1010,6.377,1011,4.88,1012,4.704,1013,5.923,1014,4.152,1015,3.61,1016,3.61,1017,6.187,1018,4.88,1019,3.61,1020,3.61,1021,3.61,1022,3.61,1023,3.61]],["title/index.html",[13,0.358,1024,3.001]],["body/index.html",[2,1.654,17,0.023,30,0.015,31,0.015,33,3.655,34,1.276,37,1.777,95,2.277,119,3.967,128,3.655,140,4.696,141,1.358,142,2.003,143,2.853,144,2.853,145,4.104,146,3.09,147,3.975,148,3.741,149,3.283,150,3.967,151,2.289,152,1.654,153,1.654,166,3.869,174,4.321,175,2.853,177,2.853,178,4.886,179,4.886,180,4.886,181,4.886,194,4.321,197,4.321,199,2.853,200,2.853,202,2.853,203,4.886,204,4.886,205,4.886,206,4.886,207,4.886,208,4.886,209,4.886,210,4.886,211,4.886,212,3.302,396,1.777,427,2.819,449,2.853,450,2.853,452,2.853,462,2.277,548,1.917,620,2.853,621,2.853,1024,2.853,1025,2.853,1026,3.353,1027,3.353,1028,2.853]],["title/modules.html",[141,1.946]],["body/modules.html",[17,0.019,30,0.019,31,0.019,140,3.468,141,2.068,145,3.168,146,2.204,147,2.919,148,3.168,149,2.919,150,3.168,166,3.168,1029,7.053,1030,7.053,1031,7.053,1032,7.109,1033,5.107,1034,5.107]],["title/properties.html",[14,1.717,235,2.22]],["body/properties.html",[8,0.65,14,2.192,17,0.023,30,0.02,31,0.02,185,1.131,252,1.72,399,3.095,438,3.095,439,3.095,461,3.359,1035,5.413,1036,5.413,1037,5.413,1038,5.413,1039,5.413,1040,5.413]],["title/miscellaneous/typealiases.html",[955,1.455,1041,4.24]],["body/miscellaneous/typealiases.html",[13,0.56,16,0.705,17,0.02,30,0.02,31,0.02,185,1.153,693,3.748,705,4.153,707,4.793,955,2.722,1042,5.519,1043,4.695]],["title/miscellaneous/variables.html",[955,1.455,964,3.19]],["body/miscellaneous/variables.html",[13,0.402,16,0.706,17,0.023,18,1.059,23,2.492,29,3.017,30,0.017,31,0.017,40,1.955,54,0.781,75,2.393,185,1.284,252,1.259,295,4.928,298,3.934,311,2.982,312,3.527,373,3.908,374,2.266,418,3.069,461,2.459,462,2.691,467,2.982,472,3.594,502,2.691,549,2.459,562,2.982,572,3.594,583,3.908,594,4.418,595,3.934,596,3.594,597,2.982,605,3.372,693,2.691,694,2.982,698,3.908,709,3.527,710,3.372,906,3.372,955,1.955,964,2.982,1012,3.372,1014,3.372,1025,3.372,1028,3.372,1043,3.372,1044,3.963,1045,3.963,1046,3.963,1047,3.963,1048,3.963,1049,5.793,1050,3.963,1051,3.963,1052,5.793,1053,3.963,1054,3.963,1055,5.193,1056,3.963,1057,3.963,1058,3.963,1059,5.193,1060,3.963,1061,3.963,1062,3.963,1063,3.963,1064,3.963,1065,3.963,1066,3.963]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0.0.0.0",{"_index":261,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.0.0.0:${port",{"_index":240,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["0.1.0",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":95,"title":{"classes/User-1.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/UsersDatabaseService.html":{},"index.html":{}}}],["1.0.0",{"_index":1035,"title":{},"body":{"properties.html":{}}}],["1.1.19",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1026,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":765,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["2.2.0",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":791,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["201",{"_index":781,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["2048",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["304f",{"_index":721,"title":{},"body":{"classes/User-1.html":{}}}],["34c277d61480",{"_index":803,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4",{"_index":462,"title":{},"body":{"classes/GuidDto.html":{},"controllers/UsersHttpController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":785,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4027",{"_index":722,"title":{},"body":{"classes/User-1.html":{}}}],["403",{"_index":783,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["404",{"_index":806,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["409",{"_index":787,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["4096",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4c2a",{"_index":801,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["5",{"_index":1028,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["6.1.2",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1027,"title":{},"body":{"index.html":{}}}],["7.2.0",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1025,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["8.3.4",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["9871",{"_index":800,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["ab9d",{"_index":802,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["abstract",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["access",{"_index":328,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{}}}],["accessing",{"_index":358,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersService.html":{}}}],["addapikey",{"_index":255,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["address",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/HealthController.html":{}}}],["addtag('users",{"_index":254,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["aliases",{"_index":1042,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":609,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":10,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["api_key",{"_index":649,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["apikeydto",{"_index":1,"title":{"classes/ApiKeyDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["apikeydto).apikey",{"_index":138,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["apikeygrpcguard",{"_index":33,"title":{"injectables/ApiKeyGrpcGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeyguard",{"_index":43,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["apikeyhttpguard",{"_index":119,"title":{"injectables/ApiKeyHttpGuard.html":{}},"body":{"injectables/ApiKeyHttpGuard.html":{},"modules/GuardsModule.html":{},"coverage.html":{},"index.html":{}}}],["apikeys",{"_index":92,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys.length",{"_index":94,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeys[0].tostring",{"_index":96,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["apikeytcpguard",{"_index":128,"title":{"injectables/ApiKeyTcpGuard.html":{}},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["apioperation",{"_index":824,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiparam",{"_index":825,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apiproperty",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiproperty({example",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["apiresponse",{"_index":826,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity",{"_index":827,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["apisecurity(headernames.x_api_key",{"_index":828,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["application",{"_index":338,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":140,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":89,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["args",{"_index":137,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["array",{"_index":339,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["async",{"_index":225,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["author",{"_index":1038,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1034,"title":{},"body":{"modules.html":{}}}],["await",{"_index":384,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ba47",{"_index":723,"title":{},"body":{"classes/User-1.html":{}}}],["badrequestexception",{"_index":611,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["based",{"_index":501,"title":{},"body":{"controllers/HealthController.html":{}}}],["bcrypt",{"_index":480,"title":{},"body":{"injectables/HashPipe.html":{},"dependencies.html":{}}}],["body",{"_index":820,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{}}}],["bootstrap",{"_index":905,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1032,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1029,"title":{},"body":{"modules.html":{}}}],["build",{"_index":257,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["call",{"_index":538,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["callhandler",{"_index":534,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["canactivate",{"_index":101,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["canactivate(context",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["catch",{"_index":662,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["catcherror",{"_index":541,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":543,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["ccac5fc4",{"_index":720,"title":{},"body":{"classes/User-1.html":{}}}],["ceeates",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":797,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["check",{"_index":348,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["check.'})@apiresponse({status",{"_index":809,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["checking",{"_index":490,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks",{"_index":493,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":0,"title":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"index.html":{}}}],["client",{"_index":186,"title":{},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/functions.html":{}}}],["client.getservice",{"_index":378,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.interface",{"_index":369,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.interface.ts",{"_index":573,"title":{},"body":{"interfaces/IUsersClient.html":{},"coverage.html":{}}}],["client.interface.ts:14",{"_index":576,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:20",{"_index":577,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:27",{"_index":578,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:35",{"_index":581,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:42",{"_index":580,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:48",{"_index":579,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.interface.ts:53",{"_index":574,"title":{},"body":{"interfaces/IUsersClient.html":{}}}],["client.ts",{"_index":312,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.ts:104",{"_index":351,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:105",{"_index":679,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:116",{"_index":344,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:117",{"_index":678,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:124",{"_index":331,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:127",{"_index":672,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:135",{"_index":673,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:19",{"_index":670,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:28",{"_index":357,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:33",{"_index":324,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:37",{"_index":676,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:57",{"_index":333,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["client.ts:66",{"_index":336,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:71",{"_index":677,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:77",{"_index":341,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client.ts:86",{"_index":680,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["client.ts:90",{"_index":355,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["client_grpc_proxy",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["client_tcp_proxy",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clientgrpcproxy",{"_index":323,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientinjectionname",{"_index":1003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clientproxy",{"_index":669,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["clientproxyfactory",{"_index":187,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(grpcconfig",{"_index":193,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientproxyfactory.create(tcpconfig",{"_index":196,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clients",{"_index":1002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clients/clients.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["clientservice",{"_index":315,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["clientsmodule",{"_index":145,"title":{"modules/ClientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"index.html":{},"modules.html":{}}}],["clienttest",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["clienttest(clientinjectionname",{"_index":997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":316,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["cloud",{"_index":627,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["cloud/secret",{"_index":644,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["cls",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_clientsmodule",{"_index":175,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_exports",{"_index":177,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["cluster_clientsmodule_imports",{"_index":176,"title":{},"body":{"modules/ClientsModule.html":{}}}],["cluster_configurationmodule",{"_index":199,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_exports",{"_index":200,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_imports",{"_index":201,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["cluster_configurationmodule_providers",{"_index":202,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_guardsmodule",{"_index":449,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_exports",{"_index":452,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_guardsmodule_imports",{"_index":451,"title":{},"body":{"modules/GuardsModule.html":{}}}],["cluster_guardsmodule_providers",{"_index":450,"title":{},"body":{"modules/GuardsModule.html":{},"index.html":{}}}],["cluster_healthmodule",{"_index":518,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_imports",{"_index":519,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_pipesmodule",{"_index":620,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_pipesmodule_imports",{"_index":622,"title":{},"body":{"modules/PipesModule.html":{}}}],["cluster_pipesmodule_providers",{"_index":621,"title":{},"body":{"modules/PipesModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":848,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":849,"title":{},"body":{"modules/UsersModule.html":{}}}],["cmd",{"_index":685,"title":{},"body":{"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["compodoc/compodoc",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":214,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.get(envnames.secrets_from_env",{"_index":249,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow",{"_index":245,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.api_key",{"_index":227,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.connection_string",{"_index":229,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.grpc_port",{"_index":232,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.hash_rounds",{"_index":243,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.health_check_rest_address",{"_index":247,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.project_name",{"_index":248,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.tcp_port",{"_index":258,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice.getorthrow(envnames.use_swagger",{"_index":262,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configuration",{"_index":1004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configuration/configuration.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["configuration/injectionnames.enum",{"_index":80,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["configurationmodule",{"_index":146,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["configured",{"_index":327,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["conflictexception",{"_index":607,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":668,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connected",{"_index":675,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["connection",{"_index":575,"title":{},"body":{"interfaces/IUsersClient.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["connection_string",{"_index":651,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["connectionstring",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(message",{"_index":618,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(stack",{"_index":619,"title":{},"body":{"injectables/LoggingService.html":{}}}],["const",{"_index":86,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constants",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.display_name_max_length",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_max_length)@apiproperty({example",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.display_name_min_length",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_max_length)@transform",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.email_min_length",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_max_length)@apiproperty({example",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constants.password_min_length",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":47,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["constructor(@inject(injectionnames.api_key",{"_index":84,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(client",{"_index":322,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["constructor(databaseservice",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(hashrounds",{"_index":469,"title":{},"body":{"injectables/HashPipe.html":{}}}],["constructor(loggingservice",{"_index":632,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["constructor(serviceapikey",{"_index":48,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["constructor(user",{"_index":713,"title":{},"body":{"classes/User-1.html":{}}}],["constructor(usermodel",{"_index":745,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["contains",{"_index":381,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":41,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["context.getargs().find((args",{"_index":136,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":124,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["controller",{"_index":395,"title":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["controller('health",{"_index":500,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('users",{"_index":829,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["controller.interface",{"_index":367,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["controller.interface.ts",{"_index":550,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["controller.interface.ts:17",{"_index":551,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:24",{"_index":554,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:32",{"_index":555,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:41",{"_index":560,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:49",{"_index":559,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controller.interface.ts:57",{"_index":557,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["controllers",{"_index":396,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"index.html":{}}}],["controllers/users",{"_index":853,"title":{},"body":{"modules/UsersModule.html":{}}}],["coverage",{"_index":893,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":50,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["create(@body",{"_index":832,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["create(createuserdto",{"_index":599,"title":{},"body":{"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":332,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["create(user",{"_index":584,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{}}}],["created",{"_index":586,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["creates",{"_index":325,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["createuserdto",{"_index":264,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["creating",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["crud",{"_index":399,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["current",{"_index":64,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["data",{"_index":135,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["data).exec",{"_index":772,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["data.email",{"_index":482,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data.password",{"_index":485,"title":{},"body":{"injectables/HashPipe.html":{}}}],["data[key",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":515,"title":{},"body":{"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["database.interface",{"_index":757,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database.interface.ts",{"_index":583,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database.interface.ts:18",{"_index":585,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:24",{"_index":587,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:32",{"_index":589,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:40",{"_index":592,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.interface.ts:47",{"_index":590,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{}}}],["database.service",{"_index":855,"title":{},"body":{"modules/UsersModule.html":{}}}],["database.service.ts",{"_index":744,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["database.service.ts:12",{"_index":747,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:28",{"_index":750,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:46",{"_index":751,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:57",{"_index":752,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:70",{"_index":754,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database.service.ts:88",{"_index":753,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["database/user.schema",{"_index":728,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultcharacter",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaultvalue",{"_index":686,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete",{"_index":352,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["delete(':guid",{"_index":839,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["delete(':guid')@apioperation({description",{"_index":812,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["deleted",{"_index":591,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["deleted.'})@apiresponse({status",{"_index":813,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["depedency",{"_index":605,"title":{},"body":{"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":142,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":594,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":9,"title":{},"body":{"classes/ApiKeyDto.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"injectables/LoggingService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["diers",{"_index":1040,"title":{},"body":{"properties.html":{}}}],["different",{"_index":1001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":843,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["display",{"_index":698,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["display_name_max_length",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name_min_length",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayed",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["displayname",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["documenation",{"_index":516,"title":{},"body":{"controllers/HealthController.html":{}}}],["document",{"_index":705,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["document.save",{"_index":760,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documentation",{"_index":506,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["documentbuilder",{"_index":223,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["documents",{"_index":766,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["documents.map((document",{"_index":768,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["doe",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["dto",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/UserListDto.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["dto.users",{"_index":442,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/api",{"_index":889,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["dto/create",{"_index":414,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/guid.dto",{"_index":420,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/update",{"_index":415,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["dto/user",{"_index":421,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["ef3aa7fd1bc5",{"_index":724,"title":{},"body":{"classes/User-1.html":{}}}],["efb10bbb",{"_index":799,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["email",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["email_max_length",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_min_length",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emails",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":349,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["entities/user.entity",{"_index":416,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["entity",{"_index":712,"title":{},"body":{"classes/User-1.html":{}}}],["enum",{"_index":647,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["enumerations",{"_index":956,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":219,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["environment",{"_index":963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["envnames",{"_index":218,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/enumerations.html":{}}}],["envnames.health_check_documentation_address",{"_index":246,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["err",{"_index":663,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["err.code",{"_index":764,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.name",{"_index":762,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["err.stack",{"_index":665,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["error",{"_index":544,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":842,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["eslint/no",{"_index":846,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["establish",{"_index":674,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["example",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{}}}],["exception.interceptor",{"_index":424,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exception.interceptor.ts",{"_index":526,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["exception.interceptor.ts:22",{"_index":535,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["exclude",{"_index":718,"title":{},"body":{"classes/User-1.html":{}}}],["exec",{"_index":770,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["execute",{"_index":345,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["execution",{"_index":65,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["executioncontext",{"_index":58,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["existing",{"_index":593,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["exists",{"_index":476,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["expected",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["exports",{"_index":183,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{}}}],["express",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/UpdateUserDto.html":{}}}],["factory",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fails",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":111,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":433,"title":{},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/UsersTcpController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["find",{"_index":337,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["find((arg",{"_index":88,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["findall",{"_index":317,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findall(data",{"_index":553,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone",{"_index":318,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(data",{"_index":403,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["findone(guid",{"_index":340,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["firstvaluefrom",{"_index":359,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["firstvaluefrom(response",{"_index":386,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["forbidden",{"_index":794,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":784,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found",{"_index":804,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["found.'})@apiresponse({status",{"_index":817,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["function",{"_index":847,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":992,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(':guid",{"_index":834,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get(':guid')@apioperation({description",{"_index":796,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check",{"_index":841,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get('health/check')@apioperation({description",{"_index":808,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@apioperation({description",{"_index":789,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["get()@healthcheck",{"_index":491,"title":{},"body":{"controllers/HealthController.html":{}}}],["getapikey",{"_index":629,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getargs",{"_index":87,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["getconnectionstring",{"_index":630,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gets",{"_index":636,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync",{"_index":631,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["getsecretasync(secretname",{"_index":638,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["gh",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":466,"title":{},"body":{"injectables/HashPipe.html":{},"interfaces/IUsersService.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":626,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["graph",{"_index":1033,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":40,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["grpc.controller",{"_index":856,"title":{},"body":{"modules/UsersModule.html":{}}}],["grpc.controller.ts",{"_index":398,"title":{},"body":{"controllers/GrpcUsersService.html":{},"coverage.html":{}}}],["grpc.controller.ts:100",{"_index":405,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:49",{"_index":401,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:58",{"_index":402,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:70",{"_index":404,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:81",{"_index":409,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.controller.ts:91",{"_index":407,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpc.guard",{"_index":426,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{}}}],["grpc.guard.ts",{"_index":36,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"coverage.html":{}}}],["grpc.guard.ts:11",{"_index":49,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc.guard.ts:25",{"_index":59,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["grpc/grpc",{"_index":77,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["grpc_config",{"_index":989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_port",{"_index":974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_client",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["grpc_users_service_name",{"_index":373,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grpcconfig",{"_index":192,"title":{},"body":{"modules/ClientsModule.html":{}}}],["grpcmethod",{"_index":400,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["grpcusersclient",{"_index":184,"title":{"injectables/GrpcUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/GrpcUsersClient.html":{},"coverage.html":{}}}],["grpcusersservice",{"_index":374,"title":{"controllers/GrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guard",{"_index":37,"title":{"guards/ApiKeyGuard.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":97,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["guards/api",{"_index":425,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guards/guards.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["guardsmodule",{"_index":147,"title":{"modules/GuardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuardsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["guid",{"_index":343,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["guiddto",{"_index":362,"title":{"classes/GuidDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["handler",{"_index":539,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["haserror",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash",{"_index":473,"title":{},"body":{"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["hash_rounds",{"_index":965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hashes",{"_index":468,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashpipe",{"_index":427,"title":{"injectables/HashPipe.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"index.html":{}}}],["hashrounds",{"_index":471,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync",{"_index":479,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.email",{"_index":483,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hashsync(data.password",{"_index":486,"title":{},"body":{"injectables/HashPipe.html":{}}}],["hasupdate",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["header",{"_index":74,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["headernames",{"_index":73,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["headernames.x_api_key",{"_index":256,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["headers",{"_index":125,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"controllers/HealthController.html":{},"miscellaneous/enumerations.html":{}}}],["headers[headernames.x_api_key",{"_index":127,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["health",{"_index":347,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["health.controller",{"_index":524,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["health_check_documentation_address",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["health_check_rest_address",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["healthcheck",{"_index":319,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["healthcheck(data",{"_index":556,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["healthcheckdocumentationaddress",{"_index":505,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckrestaddress",{"_index":503,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":498,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":496,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":487,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":148,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["healthy",{"_index":810,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["helper.ts",{"_index":913,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hgfdrtzhjkoiuzt",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["host",{"_index":260,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["http",{"_index":61,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["http.controller",{"_index":854,"title":{},"body":{"modules/UsersModule.html":{}}}],["http.controller.ts",{"_index":778,"title":{},"body":{"controllers/UsersHttpController.html":{},"coverage.html":{}}}],["http.controller.ts:126",{"_index":818,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:149",{"_index":814,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:162",{"_index":811,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:59",{"_index":788,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:75",{"_index":795,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.controller.ts:99",{"_index":807,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["http.guard",{"_index":454,"title":{},"body":{"modules/GuardsModule.html":{}}}],["http.guard.ts",{"_index":120,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"coverage.html":{}}}],["http.guard.ts:10",{"_index":122,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["http.guard.ts:24",{"_index":123,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["httpcode",{"_index":823,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpcode(201",{"_index":830,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["httpexception",{"_index":529,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httpexceptioninterceptor",{"_index":422,"title":{"injectables/HttpExceptionInterceptor.html":{}},"body":{"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["httpexceptions",{"_index":536,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["httphealthindicator",{"_index":497,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":521,"title":{},"body":{"modules/HealthModule.html":{}}}],["id",{"_index":342,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["identifier",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["igrpcusersservice",{"_index":356,"title":{"interfaces/IGrpcUsersService.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"coverage.html":{}}}],["iloggingservice",{"_index":561,"title":{"interfaces/ILoggingService.html":{}},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["implements",{"_index":114,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["imports",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":68,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["includes",{"_index":552,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":681,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["initialized",{"_index":716,"title":{},"body":{"classes/User-1.html":{}}}],["inject",{"_index":71,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["inject(injectionnames.api_key",{"_index":376,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.client_grpc_proxy",{"_index":375,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["inject(injectionnames.client_tcp_proxy",{"_index":682,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["inject(injectionnames.hash_rounds",{"_index":481,"title":{},"body":{"injectables/HashPipe.html":{}}}],["inject(injectionnames.health_check_documentation_address",{"_index":508,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.health_check_rest_address",{"_index":507,"title":{},"body":{"controllers/HealthController.html":{}}}],["inject(injectionnames.project_name",{"_index":654,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(logging_service",{"_index":653,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["inject(users_database_service",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":440,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["injectable",{"_index":32,"title":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":34,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injection",{"_index":595,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectionnames",{"_index":79,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"miscellaneous/enumerations.html":{}}}],["injectionnames.api_key",{"_index":203,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.client_grpc_proxy",{"_index":178,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.client_tcp_proxy",{"_index":179,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.connection_string",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.enum",{"_index":220,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["injectionnames.grpc_config",{"_index":194,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.grpc_users_client",{"_index":180,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.hash_rounds",{"_index":204,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_documentation_address",{"_index":205,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.health_check_rest_address",{"_index":206,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.project_name",{"_index":207,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.secrets_from_env",{"_index":208,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.swagger_config",{"_index":209,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_config",{"_index":197,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.tcp_users_client",{"_index":181,"title":{},"body":{"modules/ClientsModule.html":{},"index.html":{}}}],["injectionnames.use_swagger",{"_index":211,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectionnames.users_rest_port",{"_index":210,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["injectmodel",{"_index":755,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["injectmodel(userdatabase.name",{"_index":758,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["instance",{"_index":52,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["instanceof",{"_index":90,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/HttpExceptionInterceptor.html":{}}}],["instead",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["intercept",{"_index":531,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["intercept(context",{"_index":532,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptor",{"_index":527,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["interceptors/http",{"_index":423,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["interface",{"_index":547,"title":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{}},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":548,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"index.html":{}}}],["interfaces/users",{"_index":756,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.interface",{"_index":419,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["invalid",{"_index":831,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["invalid.'})@apiresponse({status",{"_index":786,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["isconnected",{"_index":667,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["isemail",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@length(constants.email_min_length",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{}}}],["isstring()@isuuid",{"_index":20,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["isstring()@isuuid(constants.uuid_version",{"_index":458,"title":{},"body":{"classes/GuidDto.html":{}}}],["isstring()@length(constants.display_name_min_length",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(constants.password_min_length",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":26,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/GuidDto.html":{}}}],["isuuid(constants.uuid_version",{"_index":463,"title":{},"body":{"classes/GuidDto.html":{}}}],["iusersclient",{"_index":368,"title":{"interfaces/IUsersClient.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["iusersdatabaseservice",{"_index":582,"title":{"interfaces/IUsersDatabaseService.html":{}},"body":{"interfaces/IUsersDatabaseService.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":417,"title":{"interfaces/IUsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["jane",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["jane.doe@example.com",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":216,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["join(__dirname",{"_index":237,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["js",{"_index":78,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["key",{"_index":11,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["key.dto",{"_index":134,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersTcpController.html":{}}}],["key.dto.ts",{"_index":7,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["key.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["key.guard",{"_index":81,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["key.guard.ts",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:20",{"_index":105,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:37",{"_index":112,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:8",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["known",{"_index":741,"title":{},"body":{"classes/UserListDto.html":{}}}],["latest",{"_index":640,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["length",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["length(constants.display_name_min_length",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.email_min_length",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(constants.password_min_length",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1036,"title":{},"body":{"properties.html":{}}}],["line",{"_index":844,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["list",{"_index":588,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{}}}],["list.dto",{"_index":372,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{}}}],["list.dto.ts",{"_index":738,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:10",{"_index":740,"title":{},"body":{"classes/UserListDto.html":{}}}],["listed",{"_index":792,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["loader",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":568,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror",{"_index":564,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logerror(message",{"_index":565,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["logger",{"_index":563,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{}}}],["logging.interface",{"_index":613,"title":{},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{}}}],["logging.service",{"_index":615,"title":{},"body":{"modules/LoggingModule.html":{}}}],["logging/logging.interface",{"_index":645,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["logging/logging.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{}}}],["logging_service",{"_index":572,"title":{},"body":{"interfaces/ILoggingService.html":{},"modules/LoggingModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggingmodule",{"_index":149,"title":{"modules/LoggingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"index.html":{},"modules.html":{}}}],["loggingservice",{"_index":614,"title":{"injectables/LoggingService.html":{}},"body":{"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{}}}],["logic",{"_index":598,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["manager",{"_index":628,"title":{},"body":{"injectables/SecretManagerService.html":{},"dependencies.html":{}}}],["manager.service",{"_index":222,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["manager.service.ts",{"_index":625,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["manager.service.ts:18",{"_index":634,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:31",{"_index":643,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:37",{"_index":635,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:45",{"_index":637,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["manager.service.ts:54",{"_index":639,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":569,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["messagepattern",{"_index":888,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["messagepattern({cmd",{"_index":881,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/GrpcUsersClient.html":{},"interfaces/IGrpcUsersService.html":{},"dependencies.html":{}}}],["metadata.get(headernames.x_api_key",{"_index":93,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{}}}],["method",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":44,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["michael",{"_index":1039,"title":{},"body":{"properties.html":{}}}],["microserviceconfigname",{"_index":998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minimum",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":955,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1037,"title":{},"body":{"properties.html":{}}}],["model",{"_index":746,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["module",{"_index":139,"title":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":141,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mongodb",{"_index":502,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":706,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"dependencies.html":{}}}],["mongoosehealthindicator",{"_index":495,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":858,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":763,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":75,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["names.ts",{"_index":958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nestinterceptor",{"_index":540,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["nestjs/axios",{"_index":522,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":72,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":188,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":224,"title":{},"body":{"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":499,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["new",{"_index":51,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["next",{"_index":533,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["next.handle().pipe",{"_index":542,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["notfoundexception",{"_index":610,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":241,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":467,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(updateuserdto).foreach(([key",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":109,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{}}}],["operations",{"_index":439,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["optional",{"_index":55,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":234,"title":{},"body":{"modules/ConfigurationModule.html":{},"controllers/HealthController.html":{}}}],["options.headers[headernames.x_api_key",{"_index":509,"title":{},"body":{"controllers/HealthController.html":{}}}],["otherwise",{"_index":70,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["output",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1024,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":235,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/ConfigurationModule.html":{}}}],["pages",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["param",{"_index":82,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["param('guid",{"_index":835,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["parameter",{"_index":12,"title":{},"body":{"classes/ApiKeyDto.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["parseint(configservice.getorthrow(envnames.users_rest_port",{"_index":263,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseint(rounds",{"_index":244,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["parseuuidpipe",{"_index":822,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["part",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partialtype",{"_index":691,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":692,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["password_max_length",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_min_length",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":821,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid",{"_index":837,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["patch(':guid')@apioperation({description",{"_index":815,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["path",{"_index":217,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["pipe",{"_index":429,"title":{},"body":{"controllers/GrpcUsersService.html":{},"modules/PipesModule.html":{},"controllers/UsersTcpController.html":{}}}],["pipe.ts",{"_index":465,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["pipe.ts:23",{"_index":475,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipe.ts:9",{"_index":470,"title":{},"body":{"injectables/HashPipe.html":{}}}],["pipes/hash",{"_index":428,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["pipes/pipes.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["pipesmodule",{"_index":166,"title":{"modules/PipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PipesModule.html":{},"index.html":{},"modules.html":{}}}],["pipetransform",{"_index":478,"title":{},"body":{"injectables/HashPipe.html":{}}}],["plain",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":231,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["post",{"_index":819,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["post()@httpcode(201)@apioperation({description",{"_index":779,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["predefined",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":489,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["private",{"_index":314,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["processed",{"_index":558,"title":{},"body":{"interfaces/IGrpcUsersService.html":{}}}],["project_name",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projectname",{"_index":633,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["projects/${this.projectname}/secrets/${secretname}/versions/latest",{"_index":658,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["promise",{"_index":108,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":447,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["prop",{"_index":703,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":695,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"properties.html":{}}}],["protected",{"_index":45,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["proto/users.proto",{"_index":238,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["protopath",{"_index":236,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":39,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":190,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/LoggingModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":438,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{}}}],["providing",{"_index":739,"title":{},"body":{"classes/UserListDto.html":{}}}],["proxy",{"_index":326,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rcp",{"_index":62,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["read",{"_index":60,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/UsersHttpController.html":{}}}],["readapikey",{"_index":46,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readapikey(context",{"_index":57,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["readonly",{"_index":116,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["reflect",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":320,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(data",{"_index":406,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["remove(guid",{"_index":350,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":69,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"miscellaneous/enumerations.html":{}}}],["request?.headers",{"_index":126,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{}}}],["requests",{"_index":63,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"controllers/HealthController.html":{}}}],["required",{"_index":708,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resolve",{"_index":448,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["response",{"_index":383,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["rest",{"_index":504,"title":{},"body":{"controllers/HealthController.html":{}}}],["result",{"_index":335,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["result.acknowledged",{"_index":773,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.deletedcount",{"_index":776,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["result.matchedcount",{"_index":774,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["resulting",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":30,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":537,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rethrowing",{"_index":528,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["return",{"_index":91,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["returned",{"_index":805,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["rounds",{"_index":242,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/HashPipe.html":{}}}],["rpcexception",{"_index":530,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rpcexception(error",{"_index":546,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{}}}],["rxjs",{"_index":113,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/GrpcUsersClient.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"dependencies.html":{}}}],["schema",{"_index":694,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":704,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":710,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":221,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{}}}],["secretmanagerservice",{"_index":212,"title":{"injectables/SecretManagerService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/SecretManagerService.html":{},"coverage.html":{},"index.html":{}}}],["secretmanagerservice.getapikey",{"_index":228,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["secretmanagerservice.getconnectionstring",{"_index":230,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["secretmanagerserviceclient",{"_index":642,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretname",{"_index":641,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["secretnames",{"_index":648,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets",{"_index":646,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["secrets_from_env",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secretsfromenv",{"_index":226,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["send",{"_index":684,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["sent",{"_index":330,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["server",{"_index":329,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["service",{"_index":252,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["serviceapikey",{"_index":56,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["services",{"_index":121,"title":{},"body":{"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"miscellaneous/functions.html":{}}}],["setdescription('the",{"_index":251,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["settitle('usersservice",{"_index":250,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["setup",{"_index":996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.0",{"_index":253,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["simple",{"_index":346,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["single",{"_index":457,"title":{},"body":{"classes/GuidDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"modules/GuardsModule.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"modules/LoggingModule.html":{},"injectables/LoggingService.html":{},"modules/PipesModule.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["src/.../constants.ts",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env",{"_index":957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../grpc",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../header",{"_index":959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../injectionnames.enum.ts",{"_index":960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logging.interface.ts",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret",{"_index":961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1043,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.interface.ts",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["src/clients/clients.module.ts",{"_index":182,"title":{},"body":{"modules/ClientsModule.html":{}}}],["src/clients/grpc",{"_index":311,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/clients/tcp",{"_index":666,"title":{},"body":{"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["src/configuration/configuration.module.ts",{"_index":213,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/configuration/env",{"_index":962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/injectionnames.enum.ts",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/configuration/secret",{"_index":624,"title":{},"body":{"injectables/SecretManagerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/guards/api",{"_index":35,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["src/guards/guards.module.ts",{"_index":453,"title":{},"body":{"modules/GuardsModule.html":{}}}],["src/header",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/health/health.controller.ts",{"_index":488,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:43",{"_index":492,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":520,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/interceptors/http",{"_index":525,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"coverage.html":{}}}],["src/logging/logging.interface.ts",{"_index":562,"title":{},"body":{"interfaces/ILoggingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logging/logging.interface.ts:15",{"_index":567,"title":{},"body":{"interfaces/ILoggingService.html":{}}}],["src/logging/logging.module.ts",{"_index":612,"title":{},"body":{"modules/LoggingModule.html":{}}}],["src/logging/logging.service.ts",{"_index":616,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/logging/logging.service.ts:14",{"_index":617,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/main.ts",{"_index":904,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/hash",{"_index":464,"title":{},"body":{"injectables/HashPipe.html":{},"coverage.html":{}}}],["src/pipes/pipes.module.ts",{"_index":623,"title":{},"body":{"modules/PipesModule.html":{}}}],["src/users/constants.ts",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/controllers/users",{"_index":397,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["src/users/database/user.schema.ts",{"_index":693,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/database/user.schema.ts:18",{"_index":697,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:24",{"_index":699,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:30",{"_index":700,"title":{},"body":{"classes/User.html":{}}}],["src/users/database/user.schema.ts:36",{"_index":702,"title":{},"body":{"classes/User.html":{}}}],["src/users/dto/api",{"_index":6,"title":{},"body":{"classes/ApiKeyDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts",{"_index":456,"title":{},"body":{"classes/GuidDto.html":{},"coverage.html":{}}}],["src/users/dto/guid.dto.ts:13",{"_index":459,"title":{},"body":{"classes/GuidDto.html":{}}}],["src/users/dto/update",{"_index":689,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":737,"title":{},"body":{"classes/UserListDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":711,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":715,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":717,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":719,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":725,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":726,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/interfaces/users",{"_index":549,"title":{},"body":{"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts",{"_index":597,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/users.interface.ts:20",{"_index":600,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:26",{"_index":601,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:34",{"_index":602,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:43",{"_index":604,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/interfaces/users.interface.ts:50",{"_index":603,"title":{},"body":{"interfaces/IUsersService.html":{}}}],["src/users/users",{"_index":743,"title":{},"body":{"injectables/UsersDatabaseService.html":{},"coverage.html":{}}}],["src/users/users.module.ts",{"_index":850,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:104",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":566,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{}}}],["statements",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":494,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UsersHttpController.html":{}}}],["stopatfirsterror",{"_index":430,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"classes/GuidDto.html":{},"controllers/HealthController.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringoflength",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringoflength(length",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super(serviceapikey",{"_index":85,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["support",{"_index":1030,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1031,"title":{},"body":{"modules.html":{}}}],["swagger_config",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["tcp",{"_index":130,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["tcp.controller",{"_index":857,"title":{},"body":{"modules/UsersModule.html":{}}}],["tcp.controller.ts",{"_index":880,"title":{},"body":{"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["tcp.controller.ts:103",{"_index":885,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:50",{"_index":882,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:60",{"_index":883,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:72",{"_index":884,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:83",{"_index":887,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.controller.ts:93",{"_index":886,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["tcp.guard",{"_index":455,"title":{},"body":{"modules/GuardsModule.html":{},"controllers/UsersTcpController.html":{}}}],["tcp.guard.ts",{"_index":129,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{},"coverage.html":{}}}],["tcp.guard.ts:10",{"_index":131,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp.guard.ts:24",{"_index":132,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["tcp_config",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_port",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcp_users_client",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tcpconfig",{"_index":195,"title":{},"body":{"modules/ClientsModule.html":{}}}],["tcpusersclient",{"_index":189,"title":{"injectables/TcpUsersClient.html":{}},"body":{"modules/ClientsModule.html":{},"injectables/TcpUsersClient.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":523,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../client.tester.ts",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../test",{"_index":995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/client.tester.ts",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/test",{"_index":912,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidation(cls",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationforlength",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationforlength(__namedparameters",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testdtovalidationformissingfield(cls",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["this.apikey",{"_index":510,"title":{},"body":{"controllers/HealthController.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client",{"_index":657,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.accesssecretversion",{"_index":660,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.client.close",{"_index":394,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["this.client.connect",{"_index":688,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.clientservice",{"_index":377,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.create(data",{"_index":385,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findall",{"_index":387,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.findone(dto",{"_index":389,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.healthcheck",{"_index":393,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.remove(dto",{"_index":392,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.clientservice.update(dto",{"_index":391,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.connect",{"_index":683,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.databaseservice.create(user",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findall",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.findone(guid",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.remove(guid",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.databaseservice.update(guid",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.displayname",{"_index":729,"title":{},"body":{"classes/User-1.html":{}}}],["this.email",{"_index":731,"title":{},"body":{"classes/User-1.html":{}}}],["this.getsecretasync(secretnames.api_key",{"_index":655,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.getsecretasync(secretnames.connection_string",{"_index":656,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.guid",{"_index":735,"title":{},"body":{"classes/User-1.html":{}}}],["this.hashrounds",{"_index":484,"title":{},"body":{"injectables/HashPipe.html":{}}}],["this.healthcheckdocumentationaddress",{"_index":517,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckrestaddress",{"_index":513,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthcheckservice.check",{"_index":511,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httphealthindicator.pingcheck",{"_index":512,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isconnected",{"_index":687,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["this.loggingservice.logerror(err.message",{"_index":664,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["this.metadata",{"_index":379,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.metadata.add(headernames.x_api_key",{"_index":380,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["this.mongoosehealthindicator.pingcheck('users",{"_index":514,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.password",{"_index":733,"title":{},"body":{"classes/User-1.html":{}}}],["this.readapikey(context",{"_index":117,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.serviceapikey",{"_index":118,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.usermodel(user",{"_index":759,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.deleteone",{"_index":775,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.find().exec",{"_index":767,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.findone",{"_index":769,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usermodel.updateone",{"_index":771,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":833,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.create(data",{"_index":441,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findall",{"_index":443,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(data.guid",{"_index":444,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.findone(guid",{"_index":836,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.remove(data.guid",{"_index":446,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.remove(guid",{"_index":840,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["this.usersservice.update(data.guid",{"_index":445,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["this.usersservice.update(guid",{"_index":838,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["throw",{"_index":545,"title":{},"body":{"injectables/HttpExceptionInterceptor.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":608,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":606,"title":{},"body":{"interfaces/IUsersService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{}}}],["transform(value",{"_index":474,"title":{},"body":{"injectables/HashPipe.html":{}}}],["transformed",{"_index":477,"title":{},"body":{"injectables/HashPipe.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["transport",{"_index":215,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.grpc",{"_index":233,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["transport.tcp",{"_index":259,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["true",{"_index":110,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":659,"title":{},"body":{"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/ApiKeyDto.html":{},"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"classes/GuidDto.html":{},"injectables/HashPipe.html":{},"injectables/HttpExceptionInterceptor.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/ILoggingService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/LoggingService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1041,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":845,"title":{},"body":{"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["undefined",{"_index":67,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/IUsersDatabaseService.html":{},"injectables/SecretManagerService.html":{},"injectables/UsersDatabaseService.html":{}}}],["undefined})@apiresponse({status",{"_index":793,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["unique",{"_index":696,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unknown",{"_index":432,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["unqiue",{"_index":701,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["unused",{"_index":891,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["update",{"_index":321,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(data",{"_index":408,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["update(guid",{"_index":353,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":390,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["updated.'})@apiresponse({status",{"_index":816,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["updateuserdto",{"_index":354,"title":{"classes/UpdateUserDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["updating",{"_index":690,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["uri",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":239,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["use",{"_index":671,"title":{},"body":{"injectables/TcpUsersClient.html":{}}}],["use_swagger",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":198,"title":{},"body":{"modules/ClientsModule.html":{},"modules/LoggingModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":472,"title":{},"body":{"injectables/HashPipe.html":{},"controllers/HealthController.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{}}}],["useguards",{"_index":410,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useguards(apikeygrpcguard",{"_index":435,"title":{},"body":{"controllers/GrpcUsersService.html":{}}}],["useguards(apikeytcpguard",{"_index":890,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["useinterceptors",{"_index":411,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["useinterceptors(new",{"_index":434,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["usepipes",{"_index":412,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user",{"_index":269,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user(createuserdto",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.'})@apiparam({name",{"_index":798,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.'})@apiresponse({status",{"_index":780,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["user.displayname",{"_index":730,"title":{},"body":{"classes/User-1.html":{}}}],["user.dto",{"_index":361,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["user.dto.ts",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":732,"title":{},"body":{"classes/User-1.html":{}}}],["user.name",{"_index":859,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":734,"title":{},"body":{"classes/User-1.html":{}}}],["usercontroller",{"_index":436,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["userdatabase",{"_index":714,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersDatabaseService.html":{}}}],["userdatabase.guid",{"_index":736,"title":{},"body":{"classes/User-1.html":{}}}],["userdocument",{"_index":707,"title":{},"body":{"classes/User.html":{},"injectables/UsersDatabaseService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":749,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userentity(document",{"_index":761,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["userlistdto",{"_index":370,"title":{"classes/UserListDto.html":{}},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"injectables/TcpUsersClient.html":{},"classes/UserListDto.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["userlistdto.users",{"_index":388,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["usermodel",{"_index":748,"title":{},"body":{"injectables/UsersDatabaseService.html":{}}}],["users",{"_index":185,"title":{},"body":{"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"controllers/HealthController.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/UserListDto.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users.'})@apiresponse({status",{"_index":790,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["users.service",{"_index":852,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/api",{"_index":133,"title":{},"body":{"injectables/ApiKeyTcpGuard.html":{}}}],["users/dto/create",{"_index":360,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/guid.dto",{"_index":363,"title":{},"body":{"injectables/GrpcUsersClient.html":{}}}],["users/dto/update",{"_index":364,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/dto/user",{"_index":371,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/entities/user.entity",{"_index":365,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/interfaces/users",{"_index":366,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["users/users.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["users_api_key",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_database_service",{"_index":596,"title":{},"body":{"interfaces/IUsersDatabaseService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_grpc_port",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_hash_rounds",{"_index":966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_project_name",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_rest_port",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_secrets_from_env",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_service",{"_index":418,"title":{},"body":{"controllers/GrpcUsersService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_tcp_port",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users_use_swagger",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userschema",{"_index":709,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersdatabaseservice",{"_index":742,"title":{"injectables/UsersDatabaseService.html":{}},"body":{"injectables/UsersDatabaseService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usershttpcontroller",{"_index":777,"title":{"controllers/UsersHttpController.html":{}},"body":{"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":150,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":437,"title":{"injectables/UsersService.html":{}},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersHttpController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["usersserviceapikey",{"_index":650,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["usersserviceconnectionstring",{"_index":652,"title":{},"body":{"injectables/SecretManagerService.html":{},"miscellaneous/enumerations.html":{}}}],["userstcpcontroller",{"_index":851,"title":{"controllers/UsersTcpController.html":{}},"body":{"modules/UsersModule.html":{},"controllers/UsersTcpController.html":{},"coverage.html":{}}}],["user})@apiresponse({status",{"_index":782,"title":{},"body":{"controllers/UsersHttpController.html":{}}}],["using",{"_index":313,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"injectables/TcpUsersClient.html":{}}}],["uuid",{"_index":460,"title":{},"body":{"classes/GuidDto.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["uuid_version",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuids",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidversion",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v4",{"_index":727,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":83,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validate",{"_index":106,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validated",{"_index":382,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"injectables/TcpUsersClient.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{}}}],["validating",{"_index":38,"title":{},"body":{"injectables/ApiKeyGrpcGuard.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApiKeyHttpGuard.html":{},"injectables/ApiKeyTcpGuard.html":{}}}],["validation",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":413,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ApiKeyDto.html":{},"classes/CreateUserDto.html":{},"classes/GuidDto.html":{},"dependencies.html":{}}}],["value",{"_index":23,"title":{},"body":{"classes/ApiKeyDto.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"injectables/HashPipe.html":{},"injectables/SecretManagerService.html":{},"injectables/TcpUsersClient.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["variable",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":964,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":892,"title":{},"body":{"controllers/UsersTcpController.html":{}}}],["version",{"_index":461,"title":{},"body":{"classes/GuidDto.html":{},"injectables/SecretManagerService.html":{},"controllers/UsersHttpController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version.payload.data.tostring",{"_index":661,"title":{},"body":{"injectables/SecretManagerService.html":{}}}],["void",{"_index":571,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"controllers/UsersHttpController.html":{},"controllers/UsersTcpController.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":431,"title":{},"body":{"controllers/GrpcUsersService.html":{},"controllers/UsersTcpController.html":{}}}],["whose",{"_index":334,"title":{},"body":{"injectables/GrpcUsersClient.html":{},"controllers/GrpcUsersService.html":{},"interfaces/IGrpcUsersService.html":{},"interfaces/IUsersClient.html":{},"interfaces/IUsersDatabaseService.html":{},"interfaces/IUsersService.html":{},"injectables/TcpUsersClient.html":{},"injectables/UsersDatabaseService.html":{},"controllers/UsersHttpController.html":{},"injectables/UsersService.html":{},"controllers/UsersTcpController.html":{}}}],["x",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x_api_key",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":570,"title":{},"body":{"interfaces/ILoggingService.html":{},"injectables/LoggingService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/ClientsModule.html":{},"modules/ConfigurationModule.html":{},"modules/GuardsModule.html":{},"modules/HealthModule.html":{},"modules/PipesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiKeyDto.html":{"url":"classes/ApiKeyDto.html","title":"class - ApiKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/api-key.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes an api key parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/api-key.dto.ts:12\n                        \n                    \n\n            \n                \n                    The value of the api key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\n\n/**\n * Describes an api key parameter.\n */\nexport default class ApiKeyDto {\n  /**\n   * The value of the api key.\n   */\n  @IsString()\n  @IsUUID()\n  apiKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyGrpcGuard.html":{"url":"injectables/ApiKeyGrpcGuard.html","title":"injectable - ApiKeyGrpcGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyGrpcGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-grpc.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key in GRPC context.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-grpc.guard.ts:11\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-grpc.guard.ts:25\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { HeaderNames } from '../header-names';\nimport { Metadata } from '@grpc/grpc-js';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key in GRPC context.\n */\n@Injectable()\nexport class ApiKeyGrpcGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const metadata: Metadata = context\n      .getArgs()\n      .find((arg) => arg instanceof Metadata);\n    if (!metadata) {\n      return;\n    }\n\n    const apiKeys = metadata.get(HeaderNames.X_API_KEY);\n    if (!apiKeys || apiKeys.length !== 1) {\n      return;\n    }\n\n    return apiKeys[0].toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/api-key.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Base guard for validating api keys.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Protected\n                                    Abstract\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key.guard.ts:8\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:20\n                \n            \n\n\n            \n                \n                    Validate the provided api key of the request.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        True if the api key is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Abstract\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key.guard.ts:37\n                \n            \n\n\n            \n                \n                    Read the api key from requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Base guard for validating api keys.\n */\n@Injectable()\nexport abstract class ApiKeyGuard implements CanActivate {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(private readonly serviceApiKey: string) {}\n\n  /**\n   * Validate the provided api key of the request.\n   * @param context The current execution context.\n   * @returns True if the api key is valid and false otherwise.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const apiKey = this.readApiKey(context);\n\n    if (!apiKey) {\n      return false;\n    }\n\n    return this.serviceApiKey === apiKey;\n  }\n\n  /**\n   * Read the api key from requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected abstract readApiKey(context: ExecutionContext): string | undefined;\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyHttpGuard.html":{"url":"injectables/ApiKeyHttpGuard.html","title":"injectable - ApiKeyHttpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyHttpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-http.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for http services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-http.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-http.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { HeaderNames } from '../header-names';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for http services.\n */\n@Injectable()\nexport class ApiKeyHttpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const headers = request?.headers;\n\n    if (!headers) {\n      return;\n    }\n\n    return headers[HeaderNames.X_API_KEY];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyTcpGuard.html":{"url":"injectables/ApiKeyTcpGuard.html","title":"injectable - ApiKeyTcpGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyTcpGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/api-key-tcp.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard for validating the provided api key for tcp services.\n\n            \n\n            \n                Extends\n            \n            \n                        ApiKeyGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                readApiKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceApiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/guards/api-key-tcp.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Create a new instance of ApiKeyGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceApiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        readApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    readApiKey(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/api-key-tcp.guard.ts:24\n                \n            \n\n\n            \n                \n                    Read the api key from http and rcp requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        The api key if it is included in the request and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, Inject } from '@nestjs/common';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport ApiKeyDto from '../users/dto/api-key.dto';\nimport { ApiKeyGuard } from './api-key.guard';\n\n/**\n * Guard for validating the provided api key for tcp services.\n */\n@Injectable()\nexport class ApiKeyTcpGuard extends ApiKeyGuard {\n  /**\n   * Create a new instance of ApiKeyGuard.\n   * @param apiKey A valid api key.\n   */\n  constructor(@Inject(InjectionNames.API_KEY) serviceApiKey: string) {\n    super(serviceApiKey);\n  }\n\n  /**\n   * Read the api key from http and rcp requests.\n   * @param context The current execution context.\n   * @returns The api key if it is included in the request and undefined otherwise.\n   */\n  protected readApiKey(context: ExecutionContext): string | undefined {\n    const data = context.getArgs().find((args) => (args as ApiKeyDto).apiKey);\n    if (data) {\n      return (data as ApiKeyDto).apiKey;\n    }\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggingModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { LoggingModule } from './logging/logging.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { HealthModule } from './health/health.module';\nimport { ClientsModule } from './clients/clients.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { GuardsModule } from './guards/guards.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { InjectionNames } from './configuration/InjectionNames.enum';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      useFactory: (connectionString: string) => {\n        return { uri: connectionString };\n      },\n      inject: [InjectionNames.CONNECTION_STRING],\n      imports: [ConfigurationModule],\n    }),\n    LoggingModule,\n    UsersModule,\n    HealthModule,\n    ClientsModule,\n    ConfigurationModule,\n    GuardsModule,\n    PipesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientsModule.html":{"url":"modules/ClientsModule.html","title":"module - ClientsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_imports\n\n\n\ncluster_ClientsModule_exports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nClientsModule\n\nClientsModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/clients/clients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.CLIENT_GRPC_PROXY\n                        \n                        \n                            InjectionNames.CLIENT_TCP_PROXY\n                        \n                        \n                            InjectionNames.GRPC_USERS_CLIENT\n                        \n                        \n                            InjectionNames.TCP_USERS_CLIENT\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GrpcUsersClient } from './grpc-users-client';\nimport { ClientProxyFactory } from '@nestjs/microservices';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { TcpUsersClient } from './tcp-users-client';\n\n@Module({\n  exports: [\n    InjectionNames.GRPC_USERS_CLIENT,\n    InjectionNames.TCP_USERS_CLIENT,\n    InjectionNames.CLIENT_GRPC_PROXY,\n    InjectionNames.CLIENT_TCP_PROXY,\n  ],\n  imports: [ConfigurationModule],\n  providers: [\n    {\n      provide: InjectionNames.CLIENT_GRPC_PROXY,\n      useFactory: (grpcConfig: any) => ClientProxyFactory.create(grpcConfig),\n      inject: [InjectionNames.GRPC_CONFIG],\n    },\n    {\n      provide: InjectionNames.CLIENT_TCP_PROXY,\n      useFactory: (tcpConfig: any) => {\n        return ClientProxyFactory.create(tcpConfig);\n      },\n      inject: [InjectionNames.TCP_CONFIG],\n    },\n    {\n      provide: InjectionNames.GRPC_USERS_CLIENT,\n      useClass: GrpcUsersClient,\n    },\n    {\n      provide: InjectionNames.TCP_USERS_CLIENT,\n      useClass: TcpUsersClient,\n    },\n  ],\n})\nexport class ClientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_imports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nLoggingModule\n\nLoggingModule\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.USERS_REST_PORT \n\nInjectionNames.USERS_REST_PORT \n\nInjectionNames.USERS_REST_PORT  -->\n\nConfigurationModule->InjectionNames.USERS_REST_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SecretManagerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InjectionNames.API_KEY\n                        \n                        \n                            InjectionNames.CONNECTION_STRING\n                        \n                        \n                            InjectionNames.GRPC_CONFIG\n                        \n                        \n                            InjectionNames.HASH_ROUNDS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                        \n                        \n                            InjectionNames.HEALTH_CHECK_REST_ADDRESS\n                        \n                        \n                            InjectionNames.PROJECT_NAME\n                        \n                        \n                            InjectionNames.SECRETS_FROM_ENV\n                        \n                        \n                            InjectionNames.SWAGGER_CONFIG\n                        \n                        \n                            InjectionNames.TCP_CONFIG\n                        \n                        \n                            InjectionNames.USERS_REST_PORT\n                        \n                        \n                            InjectionNames.USE_SWAGGER\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Transport } from '@nestjs/microservices';\nimport { join } from 'path';\nimport { EnvNames } from './env-names';\nimport { LoggingModule } from '../logging/logging.module';\nimport { InjectionNames } from './InjectionNames.enum';\nimport { SecretManagerService } from './secret-manager.service';\nimport { DocumentBuilder } from '@nestjs/swagger';\nimport { HeaderNames } from '../header-names';\n\n@Module({\n  exports: [\n    InjectionNames.API_KEY,\n    InjectionNames.GRPC_CONFIG,\n    InjectionNames.TCP_CONFIG,\n    InjectionNames.USE_SWAGGER,\n    InjectionNames.HASH_ROUNDS,\n    InjectionNames.PROJECT_NAME,\n    InjectionNames.SECRETS_FROM_ENV,\n    InjectionNames.CONNECTION_STRING,\n    InjectionNames.SWAGGER_CONFIG,\n    InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n    InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n    InjectionNames.USERS_REST_PORT,\n  ],\n  imports: [ConfigModule.forRoot({}), LoggingModule],\n  providers: [\n    SecretManagerService,\n    {\n      provide: InjectionNames.API_KEY,\n      useFactory: async (\n        secretsFromEnv: boolean,\n        configService: ConfigService,\n        secretManagerService: SecretManagerService,\n      ): Promise => {\n        if (secretsFromEnv) {\n          return configService.getOrThrow(EnvNames.API_KEY);\n        }\n\n        return secretManagerService.getApiKey();\n      },\n      inject: [\n        InjectionNames.SECRETS_FROM_ENV,\n        ConfigService,\n        SecretManagerService,\n      ],\n    },\n    {\n      provide: InjectionNames.CONNECTION_STRING,\n      useFactory: async (\n        secretsFromEnv: boolean,\n        configService: ConfigService,\n        secretManagerService: SecretManagerService,\n      ): Promise => {\n        if (secretsFromEnv) {\n          return configService.getOrThrow(EnvNames.CONNECTION_STRING);\n        }\n\n        return secretManagerService.getConnectionString();\n      },\n      inject: [\n        InjectionNames.SECRETS_FROM_ENV,\n        ConfigService,\n        SecretManagerService,\n      ],\n    },\n    {\n      provide: InjectionNames.GRPC_CONFIG,\n      useFactory: (configService: ConfigService) => {\n        const port = configService.getOrThrow(EnvNames.GRPC_PORT);\n        return {\n          transport: Transport.GRPC,\n          options: {\n            package: ['users'],\n            protoPath: [join(__dirname, '../proto/users.proto')],\n            url: `0.0.0.0:${port}`,\n          },\n        };\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HASH_ROUNDS,\n      useFactory: (configService: ConfigService): number => {\n        const rounds = configService.getOrThrow(EnvNames.HASH_ROUNDS);\n        return parseInt(rounds);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n      useFactory: (configService: ConfigService): number => {\n        return configService.getOrThrow(\n          EnvNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS,\n        );\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.HEALTH_CHECK_REST_ADDRESS,\n      useFactory: (configService: ConfigService): number => {\n        return configService.getOrThrow(EnvNames.HEALTH_CHECK_REST_ADDRESS);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.PROJECT_NAME,\n      useFactory: (configService: ConfigService): string => {\n        return configService.getOrThrow(EnvNames.PROJECT_NAME);\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SECRETS_FROM_ENV,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.get(EnvNames.SECRETS_FROM_ENV);\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.SWAGGER_CONFIG,\n      useFactory: () => {\n        return new DocumentBuilder()\n          .setTitle('UsersService')\n          .setDescription('The api of the users service.')\n          .setVersion('1.0')\n          .addTag('users')\n          .addApiKey(\n            { type: 'apiKey', name: HeaderNames.X_API_KEY, in: 'header' },\n            HeaderNames.X_API_KEY,\n          )\n          .build();\n      },\n    },\n    {\n      provide: InjectionNames.TCP_CONFIG,\n      useFactory: (configService: ConfigService): any => {\n        const port = configService.getOrThrow(EnvNames.TCP_PORT);\n        return {\n          transport: Transport.TCP,\n          options: {\n            host: '0.0.0.0',\n            port,\n          },\n        };\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.USE_SWAGGER,\n      useFactory: (configService: ConfigService): boolean => {\n        const value = configService.getOrThrow(EnvNames.USE_SWAGGER);\n        return value ? true : false;\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: InjectionNames.USERS_REST_PORT,\n      useFactory: (configService: ConfigService): number => {\n        return parseInt(configService.getOrThrow(EnvNames.USERS_REST_PORT));\n      },\n      inject: [ConfigService],\n    }\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)@ApiProperty({example: 'Jane Doe', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user that is displayed instead of the email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)@Transform( => )@ApiProperty({example: 'jane.doe@example.com', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n            \n                \n                    The email address of the user as plain text.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)@ApiProperty({example: 'hgfdrtzhjkoiuzt', minLength: undefined, maxLength: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The password of the user as plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { Constants } from '../constants';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating a new user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user that is displayed instead of the email.\n   */\n  @IsString()\n  @Length(Constants.DISPLAY_NAME_MIN_LENGTH, Constants.DISPLAY_NAME_MAX_LENGTH)\n  @ApiProperty({\n    example: 'Jane Doe',\n    minLength: Constants.DISPLAY_NAME_MIN_LENGTH,\n    maxLength: Constants.DISPLAY_NAME_MAX_LENGTH,\n  })\n  displayName: string;\n\n  /**\n   * The email address of the user as plain text.\n   */\n  @IsEmail()\n  @Length(Constants.EMAIL_MIN_LENGTH, Constants.EMAIL_MAX_LENGTH)\n  @Transform(({ value }) => value.toLowerCase())\n  @ApiProperty({\n    example: 'jane.doe@example.com',\n    minLength: Constants.EMAIL_MIN_LENGTH,\n    maxLength: Constants.EMAIL_MAX_LENGTH,\n  })\n  email: string;\n\n  /**\n   * The password of the user as plain text.\n   */\n  @IsString()\n  @Length(Constants.PASSWORD_MIN_LENGTH, Constants.PASSWORD_MAX_LENGTH)\n  @ApiProperty({\n    example: 'hgfdrtzhjkoiuzt',\n    minLength: Constants.PASSWORD_MIN_LENGTH,\n    maxLength: Constants.PASSWORD_MAX_LENGTH,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GrpcUsersClient.html":{"url":"injectables/GrpcUsersClient.html","title":"injectable - GrpcUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GrpcUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/grpc-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using grpc.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clientService\n                            \n                            \n                                    Private\n                                    Readonly\n                                metadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientGrpcProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/grpc-users-client.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a new instance of GrpcUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientGrpcProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The grpc client proxy that is configured to access the server by grpc.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:124\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:66\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:77\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:116\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/grpc-users-client.ts:90\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clientService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IGrpcUsersService\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:28\n                        \n                    \n\n            \n                \n                    Service for accessing the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Metadata\n\n                    \n                \n                    \n                        \n                                Defined in src/clients/grpc-users-client.ts:33\n                        \n                    \n\n            \n                \n                    The default metadata that is sent to the server.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Metadata } from '@grpc/grpc-js';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientGrpcProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { HeaderNames } from '../header-names';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport GuidDto from '../users/dto/guid.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport { User } from '../users/entities/user.entity';\nimport { IGrpcUsersService } from '../users/interfaces/users-grpc-controller.interface';\nimport IUsersClient from '../users/interfaces/users-client.interface';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * The name of the grpc users service.\n */\nconst GRPC_USERS_SERVICE_NAME = 'GrpcUsersService';\n\n/**\n * Client for the users service using grpc.\n */\n@Injectable()\nexport class GrpcUsersClient implements IUsersClient {\n  /**\n   * Service for accessing the server.\n   */\n  private readonly clientService: IGrpcUsersService;\n\n  /**\n   * The default metadata that is sent to the server.\n   */\n  private readonly metadata: Metadata;\n\n  /**\n   * Creates a new instance of GrpcUsersClient.\n   * @param client The grpc client proxy that is configured to access the server by grpc.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_GRPC_PROXY)\n    private readonly client: ClientGrpcProxy,\n    @Inject(InjectionNames.API_KEY) apiKey: string,\n  ) {\n    this.clientService = client.getService(\n      GRPC_USERS_SERVICE_NAME,\n    );\n    this.metadata = new Metadata();\n    this.metadata.add(HeaderNames.X_API_KEY, apiKey);\n  }\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const response = await this.clientService.create(data, this.metadata);\n    return await firstValueFrom(response);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await this.clientService.findAll({}, this.metadata);\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const dto: GuidDto = { guid };\n    const response = await this.clientService.findOne(dto, this.metadata);\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const dto: UpdateUserDto & GuidDto = {\n      guid,\n      ...data,\n    };\n    const response = await this.clientService.update(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const dto: GuidDto = {\n      guid,\n    };\n    const response = await this.clientService.remove(dto, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await this.clientService.healthCheck({}, this.metadata);\n    await firstValueFrom(response);\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GrpcUsersService.html":{"url":"controllers/GrpcUsersService.html","title":"controller - GrpcUsersService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-grpc.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                GRPC CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:49\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:100\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:91\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-grpc.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyGrpcGuard } from '../../guards/api-key-grpc.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\n\n/**\n * GRPC CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyGrpcGuard)\n@Controller()\nexport class GrpcUsersService {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  create(data: CreateUserDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @GrpcMethod()\n  async findAll(): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @GrpcMethod()\n  findOne(data: GuidDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  update(data: UpdateUserDto & GuidDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  remove(data: GuidDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @GrpcMethod()\n  healthCheck(): Promise {\n    return new Promise((resolve) => resolve());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuardsModule.html":{"url":"modules/GuardsModule.html","title":"module - GuardsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_GuardsModule_imports\n\n\n\ncluster_GuardsModule_exports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guards/guards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApiKeyGrpcGuard\n                        \n                        \n                            ApiKeyHttpGuard\n                        \n                        \n                            ApiKeyTcpGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { ApiKeyGrpcGuard } from './api-key-grpc.guard';\nimport { ApiKeyHttpGuard } from './api-key-http.guard';\nimport { ApiKeyTcpGuard } from './api-key-tcp.guard';\n\n@Module({\n  exports: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n  imports: [ConfigurationModule],\n  providers: [ApiKeyGrpcGuard, ApiKeyHttpGuard, ApiKeyTcpGuard],\n})\nexport class GuardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuidDto.html":{"url":"classes/GuidDto.html","title":"class - GuidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/guid.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for a single guid.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID(Constants.UUID_VERSION)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/guid.dto.ts:13\n                        \n                    \n\n            \n                \n                    An uuid in version 4.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { Constants } from '../constants';\n\n/**\n * DTO for a single guid.\n */\nexport default class GuidDto {\n  /**\n   * An uuid in version 4.\n   */\n  @IsString()\n  @IsUUID(Constants.UUID_VERSION)\n  guid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashPipe.html":{"url":"injectables/HashPipe.html","title":"injectable - HashPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/hash-pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform the email and password of the given object into its hashes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashRounds: number)\n                    \n                \n                        \n                            \n                                Defined in src/pipes/hash-pipe.ts:9\n                            \n                        \n\n                \n                    \n                            Creates a new instance of HashPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        hashRounds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of used hash rounds.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/hash-pipe.ts:23\n                \n            \n\n\n            \n                \n                    Create hashes for email and password if the fields exists in the given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An object that will be transformed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, Inject } from '@nestjs/common';\nimport { hashSync } from 'bcrypt';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * Transform the email and password of the given object into its hashes.\n */\n@Injectable()\nexport class HashPipe implements PipeTransform {\n  /**\n   * Creates a new instance of HashPipe.\n   * @param hashRounds The number of used hash rounds.\n   */\n  constructor(\n    @Inject(InjectionNames.HASH_ROUNDS) private readonly hashRounds: number,\n  ) {}\n\n  /**\n   * Create hashes for email and password if the fields exists in the given value.\n   * @param value An object that will be transformed.\n   * @returns The transformed object.\n   */\n  transform(value: any) {\n    const data = value as { email; password };\n\n    if (data.email) {\n      data.email = hashSync(data.email, this.hashRounds);\n    }\n\n    if (data.password) {\n      data.password = hashSync(data.password, this.hashRounds);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                A controller for checking the application health.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:43\n                \n            \n\n\n            \n                \n                    Execute health checks for the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The health status of the server.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport {\n  MongooseHealthIndicator,\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  HealthCheckResult,\n} from '@nestjs/terminus';\nimport { HeaderNames } from '../header-names';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\n\n/**\n * A controller for checking the application health.\n */\n@Controller('health')\nexport class HealthController {\n  /**\n   * Creates a new instance of HealthController.\n   * @param healthCheckService Service for checking the application health.\n   * @param httpHealthIndicator Http-based health checks.\n   * @param mongooseHealthIndicator Check the health of the mongodb.\n   * @param apiKey The api key that used for requests.\n   * @param healthCheckRestAddress The address for the rest health check.\n   * @param healthCheckDocumentationAddress The address of the users service documentation.\n   */\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private httpHealthIndicator: HttpHealthIndicator,\n    private mongooseHealthIndicator: MongooseHealthIndicator,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n    @Inject(InjectionNames.HEALTH_CHECK_REST_ADDRESS)\n    private readonly healthCheckRestAddress: string,\n    @Inject(InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS)\n    private readonly healthCheckDocumentationAddress: string,\n  ) {}\n\n  /**\n   * Execute health checks for the application.\n   * @returns The health status of the server.\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    const options = { headers: {} };\n    options.headers[HeaderNames.X_API_KEY] = this.apiKey;\n\n    return this.healthCheckService.check([\n      async () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service REST',\n          this.healthCheckRestAddress,\n          options,\n        ),\n      async () =>\n        this.mongooseHealthIndicator.pingCheck('Users Service Database'),\n      () =>\n        this.httpHealthIndicator.pingCheck(\n          'Users Service Documenation',\n          this.healthCheckDocumentationAddress,\n        ),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  imports: [TerminusModule, HttpModule, ConfigurationModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpExceptionInterceptor.html":{"url":"injectables/HttpExceptionInterceptor.html","title":"injectable - HttpExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for rethrowing a HttpException as a RpcException.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/http-exception.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    Intercept HttpExceptions and rethrow as RpcException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current execution context.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next call handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An Observable of any.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { catchError, Observable } from 'rxjs';\n\n/**\n * Interceptor for rethrowing a HttpException as a RpcException.\n */\n@Injectable()\nexport class HttpExceptionInterceptor implements NestInterceptor {\n  /**\n   * Intercept HttpExceptions and rethrow as RpcException.\n   * @param context The current execution context.\n   * @param next The next call handler.\n   * @returns An Observable of any.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof HttpException) {\n          throw new RpcException(error);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrpcUsersService.html":{"url":"interfaces/IGrpcUsersService.html","title":"interface - IGrpcUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGrpcUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-grpc-controller.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service interface for the GRPC service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:17\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:24\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:32\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck(data: any, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:57\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data is not processed.\n\n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: GuidDto, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:49\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                GuidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data, metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-grpc-controller.interface.ts:41\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    metadata\n                                    \n                                            Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request metadata that includes the api key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport GuidDto from '../dto/guid.dto';\nimport { Observable } from 'rxjs';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n * Service interface for the GRPC service.\n */\nexport interface IGrpcUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto, metadata: Metadata): Observable;\n\n  /**\n   * Find all users of the application.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(data: any, metadata: Metadata): Observable;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  update(data: UpdateUserDto & GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  remove(data: GuidDto, metadata: Metadata): Observable;\n\n  /**\n   * Execute a simple health check.\n   * @param data The data is not processed.\n   * @param metadata The request metadata that includes the api key.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(data: any, metadata: Metadata): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggingService.html":{"url":"interfaces/ILoggingService.html","title":"interface - ILoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logError\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.interface.ts:15\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export const LOGGING_SERVICE = 'LOGGING_SERVICE';\n\n/**\n * Describes a logger service.\n */\nexport interface ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersClient.html":{"url":"interfaces/IUsersClient.html","title":"interface - IUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-client.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface that describes operations on users for controller and client.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        healthCheck\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:53\n                \n            \n\n\n            \n                \n                    Close the client connection.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:14\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:20\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:27\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:48\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:42\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-client.interface.ts:35\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Interface that describes operations on users for controller and client.\n */\nexport default interface IUsersClient {\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  create(data: CreateUserDto): Promise;\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  update(guid: string, data: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  remove(guid: string): Promise;\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  healthCheck(): Promise;\n\n  /**\n   * Close the client connection.\n   */\n  close(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersDatabaseService.html":{"url":"interfaces/IUsersDatabaseService.html","title":"interface - IUsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users-database.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:18\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:24\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:32\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:47\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users-database.interface.ts:40\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * Used for dependency injection.\n */\nexport const USERS_DATABASE_SERVICE = 'USERS_DATABASE_SERVICE';\n\n/**\n * Database for users.\n */\nexport interface IUsersDatabaseService {\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  create(user: User): Promise;\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  update(guid: string, data: any): Promise;\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/users.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:20\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:26\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:34\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:50\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interfaces/users.interface.ts:43\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\n\n/**\n * Name used for depedency injection.\n */\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\n/**\n * Service that provides CRUD logic for Users.\n */\nexport interface IUsersService {\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  create(createUserDto: CreateUserDto): Promise;\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise;\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  findOne(guid: string): Promise;\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  update(guid: string, updateUserDto: UpdateUserDto): Promise;\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  remove(guid: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingModule.html":{"url":"modules/LoggingModule.html","title":"module - LoggingModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logging/logging.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LOGGING_SERVICE } from './logging.interface';\nimport LoggingService from './logging.service';\n\n@Module({\n  exports: [LOGGING_SERVICE],\n  providers: [\n    {\n      provide: LOGGING_SERVICE,\n      useClass: LoggingService,\n    },\n  ],\n})\nexport class LoggingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logging/logging.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a logger service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logError\n                        \n                    \n                \n            \n            \n                \nlogError(message: string, stack?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logging/logging.service.ts:14\n                \n            \n\n\n            \n                \n                    Log an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message of the error.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The stack of the error.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ILoggingService } from './logging.interface';\n\n/**\n * Describes a logger service.\n */\n@Injectable()\nexport default class LoggingService implements ILoggingService {\n  /**\n   * Log an error.\n   * @param message The message of the error.\n   * @param stack The stack of the error.\n   */\n  logError(message: string, stack?: string): void {\n    console.log(message);\n    console.log(stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_providers\n\n\n\ncluster_PipesModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/pipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HashPipe\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationModule } from '../configuration/configuration.module';\nimport { HashPipe } from './hash-pipe';\n\n@Module({\n  exports: [HashPipe],\n  imports: [ConfigurationModule],\n  providers: [HashPipe],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecretManagerService.html":{"url":"injectables/SecretManagerService.html","title":"injectable - SecretManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecretManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/secret-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Access for the google cloud secret manager.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getApiKey\n                            \n                            \n                                    Async\n                                getConnectionString\n                            \n                            \n                                    Private\n                                    Async\n                                getSecretAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggingService: ILoggingService, projectName: string)\n                    \n                \n                        \n                            \n                                Defined in src/configuration/secret-manager.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates a new SecretManagerService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingService\n                                                  \n                                                        \n                                                                        ILoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An error logger.\n\n                                                        \n                                                \n                                                \n                                                        projectName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getApiKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApiKey()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:37\n                \n            \n\n\n            \n                \n                    Gets the api key for the users service.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The api key.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionString\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionString()\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:45\n                \n            \n\n\n            \n                \n                    Gets the mongodb connection string.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The mongodb connection string if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getSecretAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSecretAsync(secretName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/secret-manager.service.ts:54\n                \n            \n\n\n            \n                \n                    Access the latest version of a secret.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    secretName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the secret.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The value of the latest version of the secret if the secret exists and undefined otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SecretManagerServiceClient\n\n                    \n                \n                    \n                        \n                                Defined in src/configuration/secret-manager.service.ts:31\n                        \n                    \n\n            \n                \n                    The client for accessing the google secret manager.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { ILoggingService, LOGGING_SERVICE } from '../logging/logging.interface';\nimport { InjectionNames } from './InjectionNames.enum';\n\n/**\n * The names of secrets.\n */\nconst enum SecretNames {\n  API_KEY = 'UsersServiceApiKey',\n  CONNECTION_STRING = 'UsersServiceConnectionString',\n}\n\n/**\n * Access for the google cloud secret manager.\n */\n@Injectable()\nexport class SecretManagerService {\n  /**\n   * Creates a new SecretManagerService instance.\n   * @param loggingService An error logger.\n   */\n  constructor(\n    @Inject(LOGGING_SERVICE) private readonly loggingService: ILoggingService,\n    @Inject(InjectionNames.PROJECT_NAME) private readonly projectName: string,\n  ) {}\n\n  /**\n   * The client for accessing the google secret manager.\n   */\n  private client: SecretManagerServiceClient;\n\n  /**\n   * Gets the api key for the users service.\n   * @returns The api key.\n   */\n  async getApiKey(): Promise {\n    return this.getSecretAsync(SecretNames.API_KEY);\n  }\n\n  /**\n   * Gets the mongodb connection string.\n   * @returns The mongodb connection string if the secret exists and undefined otherwise.\n   */\n  async getConnectionString(): Promise {\n    return this.getSecretAsync(SecretNames.CONNECTION_STRING);\n  }\n\n  /**\n   * Access the latest version of a secret.\n   * @param secretName The name of the secret.\n   * @returns The value of the latest version of the secret if the secret exists and undefined otherwise.\n   */\n  private async getSecretAsync(\n    secretName: string,\n  ): Promise {\n    if (!this.client) {\n      this.client = new SecretManagerServiceClient();\n    }\n\n    const name = `projects/${this.projectName}/secrets/${secretName}/versions/latest`;\n    try {\n      const [version] = await this.client.accessSecretVersion({ name });\n      return version.payload.data.toString();\n    } catch (err) {\n      this.loggingService.logError(err.message, err.stack);\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TcpUsersClient.html":{"url":"injectables/TcpUsersClient.html","title":"injectable - TcpUsersClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TcpUsersClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/clients/tcp-users-client.ts\n        \n\n\n            \n                Description\n            \n            \n                Client for the users service using tcp.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isConnected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                healthCheck\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientProxy, apiKey: string)\n                    \n                \n                        \n                            \n                                Defined in src/clients/tcp-users-client.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the TcpUsersClient.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A client proxy that is configured to use tcp.\n\n                                                        \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The api key that is sent to the server.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:127\n                \n            \n\n\n            \n                \n                    Close the client.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:135\n                \n            \n\n\n            \n                \n                    Establish a connection to the server.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The proxy client that is connected to the server.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:57\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:71\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    healthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:117\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:105\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/clients/tcp-users-client.ts:86\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/clients/tcp-users-client.ts:19\n                        \n                    \n\n            \n                \n                    Indicates if the client is connected.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\nimport { InjectionNames } from '../configuration/InjectionNames.enum';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { UpdateUserDto } from '../users/dto/update-user.dto';\nimport UserListDto from '../users/dto/user-list.dto';\nimport { User } from '../users/entities/user.entity';\nimport IUsersClient from '../users/interfaces/users-client.interface';\n\n/**\n * Client for the users service using tcp.\n */\n@Injectable()\nexport class TcpUsersClient implements IUsersClient {\n  /**\n   * Indicates if the client is connected.\n   */\n  private isConnected = false;\n\n  /**\n   * Creates a new instance of the TcpUsersClient.\n   * @param client A client proxy that is configured to use tcp.\n   * @param apiKey The api key that is sent to the server.\n   */\n  constructor(\n    @Inject(InjectionNames.CLIENT_TCP_PROXY)\n    private readonly client: ClientProxy,\n    @Inject(InjectionNames.API_KEY) private readonly apiKey: string,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  async create(data: CreateUserDto): Promise {\n    const user = await firstValueFrom(\n      await (\n        await this.connect()\n      ).send(\n        { cmd: 'create' },\n        {\n          ...data,\n          apiKey: this.apiKey,\n        },\n      ),\n    );\n\n    return user;\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findAll' }, { apiKey: this.apiKey });\n\n    const userListDto = await firstValueFrom(response);\n    return userListDto.users;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  async findOne(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'findOne' }, { guid, apiKey: this.apiKey });\n\n    const user = await firstValueFrom(response);\n    return user;\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  async update(guid: string, data: UpdateUserDto): Promise {\n    const response = await (\n      await this.connect()\n    ).send(\n      { cmd: 'update' },\n      {\n        guid,\n        ...data,\n        apiKey: this.apiKey,\n      },\n    );\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  async remove(guid: string): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'remove' }, { guid, apiKey: this.apiKey });\n\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  async healthCheck(): Promise {\n    const response = await (\n      await this.connect()\n    ).send({ cmd: 'healthCheck' }, { apiKey: this.apiKey });\n    await firstValueFrom(response, { defaultValue: true });\n  }\n\n  /**\n   * Close the client.\n   */\n  async close(): Promise {\n    this.client.close();\n  }\n\n  /**\n   * Establish a connection to the server.\n   * @returns The proxy client that is connected to the server.\n   */\n  private async connect(): Promise {\n    if (!this.isConnected) {\n      await this.client.connect();\n    }\n\n    return this.client;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an user.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating an user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/database/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the schema for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:24\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:30\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/database/user.schema.ts:36\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * The document type for users.\n */\nexport type UserDocument = User & Document;\n\n/**\n * Describes the schema for users.\n */\n@Schema()\nexport class User {\n  /**\n   * The display name of the user.\n   */\n  @Prop({ required: true, unique: true })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Prop({ required: true })\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @Prop({ required: true, unique: true })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Prop({ required: true })\n  password: string;\n}\n\n/**\n * The mongodb schema for users.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a user entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                guid\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user?: CreateUserDto | UserDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:10\n                            \n                        \n\n                \n                    \n                            Creates a new instance of User.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    CreateUserDto | UserDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Data is initialized from the given data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Jane Doe', description: 'The unique display name of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    The display name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    The email of the user as a hash value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5', description: 'The unique id of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    The unqiue id of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    The password of the user as a hash value.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { v4 } from 'uuid';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { User as UserDatabase } from '../database/user.schema';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Describes a user entity.\n */\nexport class User {\n  /**\n   * Creates a new instance of User.\n   * @param user Data is initialized from the given data.\n   */\n  constructor(user?: CreateUserDto | UserDatabase) {\n    if (user) {\n      this.displayName = user.displayName;\n      this.email = user.email;\n      this.password = user.password;\n\n      const userDatabase = user as UserDatabase;\n      this.guid = userDatabase.guid || v4();\n    }\n  }\n\n  /**\n   * The display name of the user.\n   */\n  @ApiProperty({\n    example: 'Jane Doe',\n    description: 'The unique display name of the user.',\n  })\n  displayName: string;\n\n  /**\n   * The email of the user as a hash value.\n   */\n  @Exclude()\n  email: string;\n\n  /**\n   * The unqiue id of the user.\n   */\n  @ApiProperty({\n    example: 'ccac5fc4-304f-4027-ba47-ef3aa7fd1bc5',\n    description: 'The unique id of the user.',\n  })\n  guid: string;\n\n  /**\n   * The password of the user as a hash value.\n   */\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListDto.html":{"url":"classes/UserListDto.html","title":"class - UserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-list.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for providing a list of User.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-list.dto.ts:10\n                        \n                    \n\n            \n                \n                    All known users of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../entities/user.entity';\n\n/**\n * DTO for providing a list of User.\n */\nexport default class UserListDto {\n  /**\n   * All known users of the application.\n   */\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersDatabaseService.html":{"url":"injectables/UsersDatabaseService.html","title":"injectable - UsersDatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersDatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users-database.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Database for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users-database.service.ts:12\n                            \n                        \n\n                \n                    \n                            Create a new instance of UsersDatabaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The model for database operations on users.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:28\n                \n            \n\n\n            \n                \n                    Create a new user in the database.\n created and undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to be created.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the User if the user is\ncreated and undefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:46\n                \n            \n\n\n            \n                \n                    List all users in the database.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:57\n                \n            \n\n\n            \n                \n                    Find a user by its guid.\n undefined otherwise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is the user if a user with the guid exists and\nundefined otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:88\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is deleted and false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users-database.service.ts:70\n                \n            \n\n\n            \n                \n                    Update an existing user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that will be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is true if the user is updated and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User as UserEntity } from './entities/user.entity';\nimport { User as UserDatabase, UserDocument } from './database/user.schema';\nimport { IUsersDatabaseService } from './interfaces/users-database.interface';\n\n/**\n * Database for users.\n */\n@Injectable()\nexport class UsersDatabaseService implements IUsersDatabaseService {\n  /**\n   * Create a new instance of UsersDatabaseService.\n   * @param userModel The model for database operations on users.\n   */\n  constructor(\n    @InjectModel(UserDatabase.name)\n    private userModel: Model,\n  ) {}\n\n  /**\n   * Create a new user in the database.\n   * @param user The user to be created.\n   * @returns A Promise whose result is the User if the user is\n   *  created and undefined otherwise.\n   */\n  async create(user: UserEntity): Promise {\n    try {\n      const document = new this.userModel(user);\n      await document.save();\n      return new UserEntity(document);\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        return;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * List all users in the database.\n   * @returns A Promise whose result is an array of User.\n   */\n  async findAll(): Promise {\n    const documents = await this.userModel.find().exec();\n    return documents.map((document) => new UserEntity(document));\n  }\n\n  /**\n   * Find a user by its guid.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is the user if a user with the guid exists and\n   *  undefined otherwise.\n   */\n  async findOne(guid: string): Promise {\n    const document = await this.userModel.findOne({ guid }).exec();\n    if (document) {\n      return new UserEntity(document);\n    }\n  }\n\n  /**\n   * Update an existing user.\n   * @param guid The id of the user.\n   * @param data The data that will be updated.\n   * @returns A Promise whose result is true if the user is updated and false otherwise.\n   */\n  async update(guid: string, data: any): Promise {\n    try {\n      const result = await this.userModel.updateOne({ guid }, data).exec();\n      return result.acknowledged && result.matchedCount === 1;\n    } catch (err) {\n      if (err.name === 'MongoServerError' && err.code === 11000) {\n        throw new ConflictException();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is true if the user is deleted and false otherwise.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.userModel.deleteOne({ guid }).exec();\n    return result.acknowledged && result.deletedCount === 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersHttpController.html":{"url":"controllers/UsersHttpController.html","title":"controller - UsersHttpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersHttpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-http.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@ApiOperation({description: 'Create a new user.'})@ApiResponse({status: 201, description: 'The new user is created.', type: User})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 409, description: 'An user with given displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:59\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO that contains the validated user data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'List all existing users.'})@ApiResponse({status: 200, description: 'All users are listed.', type: undefined})@ApiResponse({status: 403, description: 'The access is forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@ApiOperation({description: 'Read the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is found and data is returned.', type: User})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:99\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health/check')@ApiOperation({description: 'Execute a simple health check.'})@ApiResponse({status: 200, description: 'The service is healthy.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:162\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@ApiOperation({description: 'Delete a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is deleted.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:149\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@ApiOperation({description: 'Update the data of a certain user.'})@ApiParam({name: 'guid', example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480', description: 'The id of the user.'})@ApiResponse({status: 200, description: 'The user is updated.'})@ApiResponse({status: 400, description: 'The request is invalid.'})@ApiResponse({status: 403, description: 'The access is forbidden.'})@ApiResponse({status: 404, description: 'No user with given id is found.'})@ApiResponse({status: 409, description: 'An user with updated displayName or email already exists.'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-http.controller.ts:126\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data that should be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Inject,\n  ParseUUIDPipe,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiSecurity,\n} from '@nestjs/swagger';\nimport { HeaderNames } from '../../header-names';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\n\n/**\n * CRUD Controller for users.\n */\n@ApiSecurity(HeaderNames.X_API_KEY)\n@Controller('users')\nexport class UsersHttpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @Post()\n  @HttpCode(201)\n  @ApiOperation({ description: 'Create a new user.' })\n  @ApiResponse({\n    status: 201,\n    description: 'The new user is created.',\n    type: User,\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with given displayName or email already exists.',\n  })\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @Get()\n  @ApiOperation({ description: 'List all existing users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are listed.',\n    type: [User],\n  })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @Get(':guid')\n  @ApiOperation({ description: 'Read the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user is found and data is returned.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  findOne(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.findOne(guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @Patch(':guid')\n  @ApiOperation({ description: 'Update the data of a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is updated.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  @ApiResponse({\n    status: 409,\n    description: 'An user with updated displayName or email already exists.',\n  })\n  update(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.usersService.update(guid, updateUserDto);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @Delete(':guid')\n  @ApiOperation({ description: 'Delete a certain user.' })\n  @ApiParam({\n    name: 'guid',\n    example: 'efb10bbb-9871-4c2a-ab9d-34c277d61480',\n    description: 'The id of the user.',\n  })\n  @ApiResponse({ status: 200, description: 'The user is deleted.' })\n  @ApiResponse({ status: 400, description: 'The request is invalid.' })\n  @ApiResponse({ status: 403, description: 'The access is forbidden.' })\n  @ApiResponse({ status: 404, description: 'No user with given id is found.' })\n  remove(\n    @Param('guid', new ParseUUIDPipe({ version: '4' })) guid: string,\n  ): Promise {\n    return this.usersService.remove(guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   */\n  @Get('health/check')\n  @ApiOperation({ description: 'Execute a simple health check.' })\n  @ApiResponse({ status: 200, description: 'The service is healthy.' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersHttpController\n                        \n                        \n                            GrpcUsersService\n                        \n                        \n                            UsersTcpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            GuardsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersHttpController } from './controllers/users-http.controller';\nimport { UsersDatabaseService } from './users-database.service';\nimport { USERS_DATABASE_SERVICE } from './interfaces/users-database.interface';\nimport { USERS_SERVICE } from './interfaces/users.interface';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './database/user.schema';\nimport { GrpcUsersService } from './controllers/users-grpc.controller';\nimport { UsersTcpController } from './controllers/users-tcp.controller';\nimport { GuardsModule } from '../guards/guards.module';\nimport { ConfigurationModule } from '../configuration/configuration.module';\n\n@Module({\n  controllers: [UsersHttpController, GrpcUsersService, UsersTcpController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    GuardsModule,\n    ConfigurationModule,\n  ],\n  providers: [\n    {\n      provide: USERS_SERVICE,\n      useClass: UsersService,\n    },\n    {\n      provide: USERS_DATABASE_SERVICE,\n      useClass: UsersDatabaseService,\n    },\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides CRUD logic for Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: IUsersDatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            Ceeates a new UsersService instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        IUsersDatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for accessing the database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the new user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Find all users.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Find a User by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(guid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:104\n                \n            \n\n\n            \n                \n                    Delete a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(guid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n                    Update a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the user.\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data of the user to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport {\n  IUsersDatabaseService,\n  USERS_DATABASE_SERVICE,\n} from './interfaces/users-database.interface';\nimport { IUsersService } from './interfaces/users.interface';\n\n/**\n * Service that provides CRUD logic for Users.\n */\n@Injectable()\nexport class UsersService implements IUsersService {\n  /**\n   * Ceeates a new UsersService instance.\n   * @param databaseService Service for accessing the database.\n   */\n  constructor(\n    @Inject(USERS_DATABASE_SERVICE)\n    private readonly databaseService: IUsersDatabaseService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto The data of the new user.\n   * @returns A Promise whose result is a User.\n   * @throws {ConflictException} Is thrown if a user with the id already exists.\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = new User(createUserDto);\n    const result = await this.databaseService.create(user);\n    if (!result) {\n      throw new ConflictException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Find all users.\n   * @returns A Promise whose result is an array of User.\n   */\n  findAll(): Promise {\n    return this.databaseService.findAll();\n  }\n\n  /**\n   * Find a User by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async findOne(guid: string): Promise {\n    const result = await this.databaseService.findOne(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data of the user to be updated.\n   * @throws {BadRequestException} Is thrown if no update data is provided.\n   * @throws {NotFoundException} Is thrown if no user with the given guid exists.\n   */\n  async update(guid: string, updateUserDto: UpdateUserDto): Promise {\n    const data: any = {};\n    let hasUpdate = false;\n\n    Object.entries(updateUserDto).forEach(([key, value]) => {\n      if (value || value === false) {\n        data[key] = value;\n        hasUpdate = true;\n      }\n    });\n\n    if (!hasUpdate) {\n      throw new BadRequestException();\n    }\n\n    const result = await this.databaseService.update(guid, data);\n\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * Delete a user.\n   * @param guid The id of the user.\n   * @throws {NotFoundException} Is thrown if no user with the given id exists.\n   */\n  async remove(guid: string): Promise {\n    const result = await this.databaseService.remove(guid);\n    if (!result) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersTcpController.html":{"url":"controllers/UsersTcpController.html","title":"controller - UsersTcpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersTcpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-tcp.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                TCP CRUD Controller for users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                healthCheck\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'create'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:50\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(data: ApiKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findAll'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:60\n                \n            \n\n\n            \n                \n                    Find all users of the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ApiKeyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is an array of User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'findOne'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:72\n                \n            \n\n\n            \n                \n                    Get a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise whose result is a User.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'healthCheck'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:103\n                \n            \n\n\n            \n                \n                    Execute a simple health check.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'remove'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:93\n                \n            \n\n\n            \n                \n                    Delete a user by its id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'update'})\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-tcp.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update the data of a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise with an empty result.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { IUsersService, USERS_SERVICE } from '../interfaces/users.interface';\nimport GuidDto from '../dto/guid.dto';\nimport UserListDto from '../dto/user-list.dto';\nimport { HttpExceptionInterceptor } from '../../interceptors/http-exception.interceptor';\nimport { ApiKeyTcpGuard } from '../../guards/api-key-tcp.guard';\nimport { HashPipe } from '../../pipes/hash-pipe';\nimport ApiKeyDto from '../dto/api-key.dto';\n\n/**\n * TCP CRUD Controller for users.\n */\n@UsePipes(\n  new ValidationPipe({\n    stopAtFirstError: true,\n    whitelist: true, // remove all unknown fields\n  }),\n  HashPipe,\n)\n@UseInterceptors(new HttpExceptionInterceptor())\n@UseGuards(ApiKeyTcpGuard)\n@Controller()\nexport class UsersTcpController {\n  /**\n   * Creates a new instance of UserController.\n   * @param usersService Service that provides crud operations on users.\n   */\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n  ) {}\n\n  /**\n   * Create a new user.\n   * @param createUserDto DTO that contains the validated user data.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'create' })\n  create(data: CreateUserDto & ApiKeyDto): Promise {\n    return this.usersService.create(data);\n  }\n\n  /**\n   * Find all users of the application.\n   * @returns A Promise whose result is an array of User.\n   */\n  @MessagePattern({ cmd: 'findAll' })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findAll(data: ApiKeyDto): Promise {\n    const dto = new UserListDto();\n    dto.users = await this.usersService.findAll();\n    return dto;\n  }\n\n  /**\n   * Get a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise whose result is a User.\n   */\n  @MessagePattern({ cmd: 'findOne' })\n  findOne(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.findOne(data.guid);\n  }\n\n  /**\n   * Update the data of a user.\n   * @param guid The id of the user.\n   * @param updateUserDto The data that should be updated.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'update' })\n  update(data: UpdateUserDto & GuidDto & ApiKeyDto): Promise {\n    return this.usersService.update(data.guid, data);\n  }\n\n  /**\n   * Delete a user by its id.\n   * @param guid The id of the user.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'remove' })\n  remove(data: GuidDto & ApiKeyDto): Promise {\n    return this.usersService.remove(data.guid);\n  }\n\n  /**\n   * Execute a simple health check.\n   * @returns A Promise with an empty result.\n   */\n  @MessagePattern({ cmd: 'healthCheck' })\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  healthCheck(): void {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            injectable\n            GrpcUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/clients/grpc-users-client.ts\n            \n            variable\n            GRPC_USERS_SERVICE_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/clients/tcp-users-client.ts\n            \n            injectable\n            TcpUsersClient\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/configuration/secret-manager.service.ts\n            \n            injectable\n            SecretManagerService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/guards/api-key-grpc.guard.ts\n            \n            injectable\n            ApiKeyGrpcGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-http.guard.ts\n            \n            injectable\n            ApiKeyHttpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key-tcp.guard.ts\n            \n            injectable\n            ApiKeyTcpGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/http-exception.interceptor.ts\n            \n            injectable\n            HttpExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            interface\n            ILoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logging/logging.interface.ts\n            \n            variable\n            LOGGING_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/logging/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/hash-pipe.ts\n            \n            injectable\n            HashPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/constants.ts\n            \n            variable\n            Constants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/controllers/users-grpc.controller.ts\n            \n            controller\n            GrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-http.controller.ts\n            \n            controller\n            UsersHttpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/controllers/users-tcp.controller.ts\n            \n            controller\n            UsersTcpController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/database/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/api-key.dto.ts\n            \n            class\n            ApiKeyDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dto/guid.dto.ts\n            \n            class\n            GuidDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-list.dto.ts\n            \n            class\n            UserListDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-client.interface.ts\n            \n            interface\n            IUsersClient\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            interface\n            IUsersDatabaseService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-database.interface.ts\n            \n            variable\n            USERS_DATABASE_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/users-grpc-controller.interface.ts\n            \n            interface\n            IGrpcUsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            interface\n            IUsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/interfaces/users.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users-database.service.ts\n            \n            injectable\n            UsersDatabaseService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                test/client.tester.ts\n            \n            function\n            clientTest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            stringOfLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                test/test-helper.ts\n            \n            function\n            testDtoValidationForMissingField\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @google-cloud/secret-manager : ^4.1.2\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @nestjs/axios : ^0.1.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gh-pages : ^4.0.0\n        \n            mongoose : ^6.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvNames   (src/.../env-names.ts)\n                        \n                        \n                            HeaderNames   (src/.../header-names.ts)\n                        \n                        \n                            InjectionNames   (src/.../InjectionNames.enum.ts)\n                        \n                        \n                            SecretNames   (src/.../secret-manager.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configuration/env-names.ts\n    \n        \n            \n                \n                    \n                        \n                        EnvNames\n                    \n                \n                    \n                        \n                            Names of environment variables.\n\n                        \n                    \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : USERS_HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : USERS_PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : USERS_SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : USERS_API_KEY\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USERS_USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 GRPC_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_GRPC_PORT\n                            \n                        \n                        \n                            \n                                 TCP_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_TCP_PORT\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                 USERS_REST_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_REST_PORT\n                            \n                        \n            \n        \n\n    src/header-names.ts\n    \n        \n            \n                \n                    \n                        \n                        HeaderNames\n                    \n                \n                    \n                        \n                            Names of request headers.\n\n                        \n                    \n                        \n                            \n                                 X_API_KEY\n                            \n                        \n                        \n                            \n                                Value : x-api-key\n                            \n                        \n            \n        \n\n    src/configuration/InjectionNames.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        InjectionNames\n                    \n                \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : API_KEY\n                            \n                        \n                        \n                            \n                                 GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : GRPC_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_GRPC_PROXY\n                            \n                        \n                        \n                            \n                                 CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                Value : CLIENT_TCP_PROXY\n                            \n                        \n                        \n                            \n                                 TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                Value : TCP_USERS_CLIENT\n                            \n                        \n                        \n                            \n                                 GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                Value : GRPC_CONFIG\n                            \n                        \n                        \n                            \n                                 TCP_CONFIG\n                            \n                        \n                        \n                            \n                                Value : TCP_CONFIG\n                            \n                        \n                        \n                            \n                                 USE_SWAGGER\n                            \n                        \n                        \n                            \n                                Value : USE_SWAGGER\n                            \n                        \n                        \n                            \n                                 HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                Value : HASH_ROUNDS\n                            \n                        \n                        \n                            \n                                 SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                Value : SECRETS_FROM_ENV\n                            \n                        \n                        \n                            \n                                 PROJECT_NAME\n                            \n                        \n                        \n                            \n                                Value : PROJECT_NAME\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                 SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                Value : SWAGGER_CONFIG\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_REST_ADDRESS\n                            \n                        \n                        \n                            \n                                 HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                Value : HEALTH_CHECK_DOCUMENTATION_ADDRESS\n                            \n                        \n                        \n                            \n                                 USERS_REST_PORT\n                            \n                        \n                        \n                            \n                                Value : USERS_REST_PORT\n                            \n                        \n            \n        \n\n    src/configuration/secret-manager.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SecretNames\n                    \n                \n                    \n                        \n                            The names of secrets.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : UsersServiceApiKey\n                            \n                        \n                        \n                            \n                                 CONNECTION_STRING\n                            \n                        \n                        \n                            \n                                Value : UsersServiceConnectionString\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            clientTest   (test/.../client.tester.ts)\n                        \n                        \n                            stringOfLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidation   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForLength   (test/.../test-helper.ts)\n                        \n                        \n                            testDtoValidationForMissingField   (test/.../test-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    The application setup.\n\n\n                \n            \n        \n    \n    test/client.tester.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        clientTest\n                        \n                    \n                \n            \n            \n                \nclientTest(clientInjectionName: string, microserviceConfigName: string)\n                \n            \n\n\n\n\n            \n                \n                    A generic test for different clients and services: GRPC, TCP\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clientInjectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for the client.\n\n                                    \n                                \n                                \n                                    microserviceConfigName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The injection name for client configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    test/test-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringOfLength\n                        \n                    \n                \n            \n            \n                \nstringOfLength(length: number, defaultCharacter: string)\n                \n            \n\n\n\n\n            \n                \n                    Create a string of the given length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The length of the output string.\n\n                                    \n                                \n                                \n                                    defaultCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'a'\n                                    \n\n                                    \n                                        The resulting string contains length * defaultCharacter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidation\n                        \n                    \n                \n            \n            \n                \ntestDtoValidation(cls: ClassConstructor, plain: any, hasError, error?: string)\n                \n            \n\n\n\n\n            \n                \n                    Test the dto validation for the given data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    plain\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        An object that is transformed into the dto.\n\n                                    \n                                \n                                \n                                    hasError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True if an error is expected and false otherwise.\n\n                                    \n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The expected error string or a part of it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForLength\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForLength(__namedParameters: {cls: ClassConstructor, factory: function, name: string, minLength: number, maxLength: number})\n                \n            \n\n\n\n\n            \n                \n                    Test the length validation for a field of a dto.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factory\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testDtoValidationForMissingField\n                        \n                    \n                \n            \n            \n                \ntestDtoValidationForMissingField(cls: ClassConstructor, factory)\n                \n            \n\n\n\n\n            \n                \n                    Tests if the dto validation fails if a field is missing.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the dto.\n\n                                    \n                                \n                                \n                                    factory\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A factory method for creating a new plain test object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_GuardsModule\n\n\n\ncluster_GuardsModule_exports\n\n\n\ncluster_GuardsModule_providers\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_providers\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY \n\nInjectionNames.CLIENT_GRPC_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_GRPC_PROXY \n\n\n\n\n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY \n\nInjectionNames.CLIENT_TCP_PROXY  -->\n\nClientsModule->InjectionNames.CLIENT_TCP_PROXY \n\n\n\n\n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT \n\nInjectionNames.GRPC_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.GRPC_USERS_CLIENT \n\n\n\n\n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT \n\nInjectionNames.TCP_USERS_CLIENT  -->\n\nClientsModule->InjectionNames.TCP_USERS_CLIENT \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nClientsModule -->\n\nConfigurationModule->ClientsModule\n\n\n\n\n\nGuardsModule\n\nGuardsModule\n\nGuardsModule -->\n\nConfigurationModule->GuardsModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nConfigurationModule->HealthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nConfigurationModule->UsersModule\n\n\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY \n\nInjectionNames.API_KEY  -->\n\nConfigurationModule->InjectionNames.API_KEY \n\n\n\n\n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING \n\nInjectionNames.CONNECTION_STRING  -->\n\nConfigurationModule->InjectionNames.CONNECTION_STRING \n\n\n\n\n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG \n\nInjectionNames.GRPC_CONFIG  -->\n\nConfigurationModule->InjectionNames.GRPC_CONFIG \n\n\n\n\n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS \n\nInjectionNames.HASH_ROUNDS  -->\n\nConfigurationModule->InjectionNames.HASH_ROUNDS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\nInjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_DOCUMENTATION_ADDRESS \n\n\n\n\n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS \n\nInjectionNames.HEALTH_CHECK_REST_ADDRESS  -->\n\nConfigurationModule->InjectionNames.HEALTH_CHECK_REST_ADDRESS \n\n\n\n\n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME \n\nInjectionNames.PROJECT_NAME  -->\n\nConfigurationModule->InjectionNames.PROJECT_NAME \n\n\n\n\n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV \n\nInjectionNames.SECRETS_FROM_ENV  -->\n\nConfigurationModule->InjectionNames.SECRETS_FROM_ENV \n\n\n\n\n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG \n\nInjectionNames.SWAGGER_CONFIG  -->\n\nConfigurationModule->InjectionNames.SWAGGER_CONFIG \n\n\n\n\n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG \n\nInjectionNames.TCP_CONFIG  -->\n\nConfigurationModule->InjectionNames.TCP_CONFIG \n\n\n\n\n\nInjectionNames.USERS_REST_PORT \n\nInjectionNames.USERS_REST_PORT \n\nInjectionNames.USERS_REST_PORT  -->\n\nConfigurationModule->InjectionNames.USERS_REST_PORT \n\n\n\n\n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER \n\nInjectionNames.USE_SWAGGER  -->\n\nConfigurationModule->InjectionNames.USE_SWAGGER \n\n\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nConfigurationModule->PipesModule\n\n\n\nUsersModule -->\n\nGuardsModule->UsersModule\n\n\n\nAppModule -->\n\nGuardsModule->AppModule\n\n\n\n\n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard \n\nApiKeyGrpcGuard  -->\n\nGuardsModule->ApiKeyGrpcGuard \n\n\n\n\n\nApiKeyHttpGuard \n\nApiKeyHttpGuard \n\nApiKeyHttpGuard  -->\n\nGuardsModule->ApiKeyHttpGuard \n\n\n\n\n\nApiKeyTcpGuard \n\nApiKeyTcpGuard \n\nApiKeyTcpGuard  -->\n\nGuardsModule->ApiKeyTcpGuard \n\n\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggingModule\n\nLoggingModule\n\nConfigurationModule -->\n\nLoggingModule->ConfigurationModule\n\n\n\nAppModule -->\n\nLoggingModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSecretManagerService\n\nSecretManagerService\n\nConfigurationModule -->\n\nSecretManagerService->ConfigurationModule\n\n\n\n\n\nApiKeyGrpcGuard\n\nApiKeyGrpcGuard\n\nGuardsModule -->\n\nApiKeyGrpcGuard->GuardsModule\n\n\n\n\n\nApiKeyHttpGuard\n\nApiKeyHttpGuard\n\nGuardsModule -->\n\nApiKeyHttpGuard->GuardsModule\n\n\n\n\n\nApiKeyTcpGuard\n\nApiKeyTcpGuard\n\nGuardsModule -->\n\nApiKeyTcpGuard->GuardsModule\n\n\n\n\n\nHashPipe\n\nHashPipe\n\nPipesModule -->\n\nHashPipe->PipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A service that provides CRUD operations on users.\n        \n            License : MIT\n        \n            Author : Michael Diers\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/database/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The document type for users.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Constants   (src/.../constants.ts)\n                        \n                        \n                            GRPC_USERS_SERVICE_NAME   (src/.../grpc-users-client.ts)\n                        \n                        \n                            LOGGING_SERVICE   (src/.../logging.interface.ts)\n                        \n                        \n                            USERS_DATABASE_SERVICE   (src/.../users-database.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Constants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The minimum length for display names.\n   */\n  DISPLAY_NAME_MIN_LENGTH: 3,\n\n  /**\n   * The maximum length for display names.\n   */\n  DISPLAY_NAME_MAX_LENGTH: 256,\n\n  /**\n   * The minimum length for emails.\n   */\n  EMAIL_MIN_LENGTH: 5,\n\n  /**\n   * The maximum length for emails.\n   */\n  EMAIL_MAX_LENGTH: 2048,\n\n  /**\n   * The minimum length for passwords.\n   */\n  PASSWORD_MIN_LENGTH: 8,\n\n  /**\n   * The maximum length for passwords.\n   */\n  PASSWORD_MAX_LENGTH: 4096,\n\n  /**\n   * The expected version for uuids.\n   */\n  UUID_VERSION: '4' as UUIDVersion,\n}\n                    \n                \n\n            \n                \n                    Predefined validation constants.\n\n                \n            \n\n        \n    \n\n    src/clients/grpc-users-client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GRPC_USERS_SERVICE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GrpcUsersService'\n                    \n                \n\n            \n                \n                    The name of the grpc users service.\n\n                \n            \n\n        \n    \n\n    src/logging/logging.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGING_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOGGING_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users-database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_DATABASE_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_DATABASE_SERVICE'\n                    \n                \n\n            \n                \n                    Used for dependency injection.\n\n                \n            \n\n        \n    \n\n    src/users/interfaces/users.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n            \n                \n                    Name used for depedency injection.\n\n                \n            \n\n        \n    \n\n    src/users/database/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The mongodb schema for users.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
